{"version":3,"sources":["$_lazy_route_resource lazy namespace object","dist/ngx-chess-board/fesm2015/ngx-chess-board.js","src/app/app.component.html","node_modules/tslib/tslib.es6.js","src/app/app.component.scss","src/app/app.component.ts","src/app/app.module.ts","src/environments/environment.ts","src/main.ts"],"names":[],"mappings":"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","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Injectable, ɵɵdefineInjectable, Component, ViewChild, EventEmitter, Input, HostListener, Output, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { __awaiter } from 'tslib';\nimport { cloneDeep } from 'lodash';\nimport { Subject } from 'rxjs';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/models/pieces/color.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @enum {number} */\r\nconst Color = {\r\n    WHITE: 0,\r\n    BLACK: 1,\r\n};\r\nColor[Color.WHITE] = 'WHITE';\r\nColor[Color.BLACK] = 'BLACK';\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/models/pieces/piece.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @abstract\r\n */\r\nclass Piece {\r\n    /**\r\n     * @param {?} point\r\n     * @param {?} color\r\n     * @param {?} image\r\n     * @param {?} relValue\r\n     * @param {?} board\r\n     */\r\n    constructor(point, color, image, relValue, board) {\r\n        this.checkPoints = [];\r\n        this.color = color;\r\n        this.image = image;\r\n        this.point = point;\r\n        this.relValue = relValue;\r\n        this.board = board;\r\n    }\r\n}\r\nif (false) {\r\n    /** @type {?} */\r\n    Piece.prototype.point;\r\n    /** @type {?} */\r\n    Piece.prototype.color;\r\n    /** @type {?} */\r\n    Piece.prototype.image;\r\n    /** @type {?} */\r\n    Piece.prototype.checkPoints;\r\n    /** @type {?} */\r\n    Piece.prototype.relValue;\r\n    /** @type {?} */\r\n    Piece.prototype.board;\r\n    /**\r\n     * @abstract\r\n     * @return {?}\r\n     */\r\n    Piece.prototype.getPossibleMoves = function () { };\r\n    /**\r\n     * @abstract\r\n     * @return {?}\r\n     */\r\n    Piece.prototype.getPossibleCaptures = function () { };\r\n    /**\r\n     * @abstract\r\n     * @return {?}\r\n     */\r\n    Piece.prototype.getCoveredFields = function () { };\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/models/pieces/point.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass Point {\r\n    /**\r\n     * @param {?} row\r\n     * @param {?} col\r\n     */\r\n    constructor(row, col) {\r\n        this.row = row;\r\n        this.col = col;\r\n    }\r\n    /**\r\n     * @param {?} that\r\n     * @return {?}\r\n     */\r\n    isEqual(that) {\r\n        return that && this.row === that.row && this.col === that.col;\r\n    }\r\n    /**\r\n     * @param {?} row\r\n     * @param {?} col\r\n     * @return {?}\r\n     */\r\n    hasCoordsEqual(row, col) {\r\n        return row && col && this.row === row && this.col === col;\r\n    }\r\n}\r\nif (false) {\r\n    /** @type {?} */\r\n    Point.prototype.row;\r\n    /** @type {?} */\r\n    Point.prototype.col;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/models/pieces/rook.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass Rook extends Piece {\r\n    /**\r\n     * @param {?} point\r\n     * @param {?} color\r\n     * @param {?} image\r\n     * @param {?} board\r\n     */\r\n    constructor(point, color, image, board) {\r\n        super(point, color, image, 5, board);\r\n        this.isMovedAlready = false;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getPossibleMoves() {\r\n        /** @type {?} */\r\n        let possiblePoints = [];\r\n        /** @type {?} */\r\n        let row = this.point.row;\r\n        /** @type {?} */\r\n        let col = this.point.col;\r\n        for (let i = row + 1; i < 8; ++i) { // dol\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        for (let i = row - 1; i >= 0; --i) { // gora\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        for (let j = col - 1; j >= 0; --j) { // lewo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        for (let j = col + 1; j < 8; ++j) { // prawo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        return possiblePoints;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getPossibleCaptures() {\r\n        /** @type {?} */\r\n        let possiblePoints = [];\r\n        /** @type {?} */\r\n        let row = this.point.row;\r\n        /** @type {?} */\r\n        let col = this.point.col;\r\n        for (let i = row + 1; i < 8; ++i) { // dol\r\n            if (this.board.isFieldTakenByEnemy(i, col, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n                possiblePoints.push(new Point(i, col));\r\n                break;\r\n            }\r\n            else {\r\n                if (!this.board.isFieldEmpty(i, col)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        for (let i = row - 1; i >= 0; --i) { // gora\r\n            if (this.board.isFieldTakenByEnemy(i, col, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n                possiblePoints.push(new Point(i, col));\r\n                break;\r\n            }\r\n            else {\r\n                if (!this.board.isFieldEmpty(i, col)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        for (let j = col - 1; j >= 0; --j) { // lewo\r\n            if (this.board.isFieldTakenByEnemy(row, j, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n                possiblePoints.push(new Point(row, j));\r\n                break;\r\n            }\r\n            else {\r\n                if (!this.board.isFieldEmpty(row, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        for (let j = col + 1; j < 8; ++j) { // prawo\r\n            if (this.board.isFieldTakenByEnemy(row, j, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n                possiblePoints.push(new Point(row, j));\r\n                break;\r\n            }\r\n            else {\r\n                if (!this.board.isFieldEmpty(row, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return possiblePoints;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getCoveredFields() {\r\n        /** @type {?} */\r\n        let possiblePoints = [];\r\n        /** @type {?} */\r\n        let row = this.point.row;\r\n        /** @type {?} */\r\n        let col = this.point.col;\r\n        for (let i = row + 1; i < 8; ++i) { // dol\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            }\r\n            else {\r\n                if (!(this.board.getPieceByField instanceof King)) {\r\n                    possiblePoints.push(new Point(i, col));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        for (let i = row - 1; i >= 0; --i) { // gora\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            }\r\n            else {\r\n                if (!(this.board.getPieceByField instanceof King)) {\r\n                    possiblePoints.push(new Point(i, col));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        for (let j = col - 1; j >= 0; --j) { // lewo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            }\r\n            else {\r\n                if (!(this.board.getPieceByField instanceof King)) {\r\n                    possiblePoints.push(new Point(row, j));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        for (let j = col + 1; j < 8; ++j) { // prawo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            }\r\n            else {\r\n                if (!(this.board.getPieceByField instanceof King)) {\r\n                    possiblePoints.push(new Point(row, j));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return possiblePoints;\r\n    }\r\n}\r\nif (false) {\r\n    /** @type {?} */\r\n    Rook.prototype.isMovedAlready;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/models/pieces/king.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass King extends Piece {\r\n    /**\r\n     * @param {?} point\r\n     * @param {?} color\r\n     * @param {?} image\r\n     * @param {?} board\r\n     */\r\n    constructor(point, color, image, board) {\r\n        super(point, color, image, 0, board);\r\n        this.castledAlready = false;\r\n        this.shortCastled = false;\r\n        this.longCastled = false;\r\n        this.isCastling = false;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getPossibleMoves() {\r\n        /** @type {?} */\r\n        let possiblePoints = [];\r\n        /** @type {?} */\r\n        let row = this.point.row;\r\n        /** @type {?} */\r\n        let col = this.point.col;\r\n        // lewo\r\n        if (this.board.isFieldEmpty(row, col - 1) && !this.board.isFieldUnderAttack(row, col - 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n            possiblePoints.push(new Point(row, col - 1));\r\n        }\r\n        // prawo\r\n        if (this.board.isFieldEmpty(row, col + 1) && !this.board.isFieldUnderAttack(row, col + 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n            possiblePoints.push(new Point(row, col + 1));\r\n        }\r\n        // dol\r\n        if (this.board.isFieldEmpty(row + 1, col) && !this.board.isFieldUnderAttack(row + 1, col, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n            possiblePoints.push(new Point(row + 1, col));\r\n        }\r\n        // gora\r\n        if (this.board.isFieldEmpty(row - 1, col) && !this.board.isFieldUnderAttack(row - 1, col, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n            possiblePoints.push(new Point(row - 1, col));\r\n        }\r\n        // lewo gora\r\n        if (this.board.isFieldEmpty(row - 1, col - 1) && !this.board.isFieldUnderAttack(row - 1, col - 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n            possiblePoints.push(new Point(row - 1, col - 1));\r\n        }\r\n        // prawo gora\r\n        if (this.board.isFieldEmpty(row - 1, col + 1) && !this.board.isFieldUnderAttack(row - 1, col + 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n            possiblePoints.push(new Point(row - 1, col + 1));\r\n        }\r\n        // lewo dol\r\n        if (this.board.isFieldEmpty(row + 1, col - 1) && !this.board.isFieldUnderAttack(row + 1, col - 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n            possiblePoints.push(new Point(row + 1, col - 1));\r\n        }\r\n        // prawo dol\r\n        if (this.board.isFieldEmpty(row + 1, col + 1) && !this.board.isFieldUnderAttack(row + 1, col + 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n            possiblePoints.push(new Point(row + 1, col + 1));\r\n        }\r\n        if (!this.isMovedAlready) {\r\n            /** @type {?} */\r\n            let longCastlePossible = true;\r\n            for (let i = col - 1; i > 0; --i) {\r\n                if (!this.board.isFieldEmpty(row, i) || this.board.isFieldUnderAttack(row, i, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n                    longCastlePossible = false;\r\n                    break;\r\n                }\r\n            }\r\n            if (longCastlePossible && this.board.getPieceByField(row, 0)) {\r\n                /** @type {?} */\r\n                let leftRook = this.board.getPieceByField(row, 0);\r\n                if (leftRook instanceof Rook) {\r\n                    if (!leftRook.isMovedAlready) {\r\n                        possiblePoints.push(new Point(row, col - 2));\r\n                    }\r\n                }\r\n            }\r\n            /** @type {?} */\r\n            let shortCastlePossible = true;\r\n            for (let i = col + 1; i < 7; ++i) {\r\n                if (!this.board.isFieldEmpty(row, i) || this.board.isFieldUnderAttack(row, i, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n                    shortCastlePossible = false;\r\n                    break;\r\n                }\r\n            }\r\n            if (shortCastlePossible && this.board.getPieceByField(row, 7)) {\r\n                /** @type {?} */\r\n                let rightRook = this.board.getPieceByField(row, 7);\r\n                if (rightRook instanceof Rook) {\r\n                    if (!rightRook.isMovedAlready) {\r\n                        possiblePoints.push(new Point(row, col + 2));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return possiblePoints;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getPossibleCaptures() {\r\n        /** @type {?} */\r\n        let possiblePoints = [];\r\n        /** @type {?} */\r\n        let row = this.point.row;\r\n        /** @type {?} */\r\n        let col = this.point.col;\r\n        // lewo\r\n        if (this.board.isFieldTakenByEnemy(row, col - 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE) && !this.board.isFieldUnderAttack(row, col - 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n            possiblePoints.push(new Point(row, col - 1));\r\n        }\r\n        // prawo\r\n        if (this.board.isFieldTakenByEnemy(row, col + 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE) && !this.board.isFieldUnderAttack(row, col + 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n            possiblePoints.push(new Point(row, col + 1));\r\n        }\r\n        // dol\r\n        if (this.board.isFieldTakenByEnemy(row + 1, col, this.color === Color.WHITE ? Color.BLACK : Color.WHITE) && !this.board.isFieldUnderAttack(row + 1, col, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n            possiblePoints.push(new Point(row + 1, col));\r\n        }\r\n        // gora\r\n        if (this.board.isFieldTakenByEnemy(row - 1, col, this.color === Color.WHITE ? Color.BLACK : Color.WHITE) && !this.board.isFieldUnderAttack(row - 1, col, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n            possiblePoints.push(new Point(row - 1, col));\r\n        }\r\n        // lewo gora\r\n        if (this.board.isFieldTakenByEnemy(row - 1, col - 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE) && !this.board.isFieldUnderAttack(row - 1, col - 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n            possiblePoints.push(new Point(row - 1, col - 1));\r\n        }\r\n        // prawo gora\r\n        if (this.board.isFieldTakenByEnemy(row - 1, col + 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE) && !this.board.isFieldUnderAttack(row - 1, col + 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n            possiblePoints.push(new Point(row - 1, col + 1));\r\n        }\r\n        // lewo dol\r\n        if (this.board.isFieldTakenByEnemy(row + 1, col - 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE) && !this.board.isFieldUnderAttack(row + 1, col - 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n            possiblePoints.push(new Point(row + 1, col - 1));\r\n        }\r\n        // prawo dol\r\n        if (this.board.isFieldTakenByEnemy(row + 1, col + 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE) && !this.board.isFieldUnderAttack(row + 1, col + 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n            possiblePoints.push(new Point(row + 1, col + 1));\r\n        }\r\n        return possiblePoints;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getCoveredFields() {\r\n        /** @type {?} */\r\n        let possiblePoints = [];\r\n        /** @type {?} */\r\n        let row = this.point.row;\r\n        /** @type {?} */\r\n        let col = this.point.col;\r\n        // lewo\r\n        if (this.board.isFieldTakenByEnemy(row, col - 1, this.color)) {\r\n            possiblePoints.push(new Point(row, col - 1));\r\n        }\r\n        // prawo\r\n        if (this.board.isFieldTakenByEnemy(row, col + 1, this.color)) {\r\n            possiblePoints.push(new Point(row, col + 1));\r\n        }\r\n        // dol\r\n        if (this.board.isFieldTakenByEnemy(row + 1, col, this.color)) {\r\n            possiblePoints.push(new Point(row + 1, col));\r\n        }\r\n        // gora\r\n        if (this.board.isFieldTakenByEnemy(row - 1, col, this.color)) {\r\n            possiblePoints.push(new Point(row - 1, col));\r\n        }\r\n        // lewo gora\r\n        if (this.board.isFieldTakenByEnemy(row - 1, col - 1, this.color)) {\r\n            possiblePoints.push(new Point(row - 1, col - 1));\r\n        }\r\n        // prawo gora\r\n        if (this.board.isFieldTakenByEnemy(row - 1, col + 1, this.color)) {\r\n            possiblePoints.push(new Point(row - 1, col + 1));\r\n        }\r\n        // lewo dol\r\n        if (this.board.isFieldTakenByEnemy(row + 1, col - 1, this.color)) {\r\n            possiblePoints.push(new Point(row + 1, col - 1));\r\n        }\r\n        // prawo dol\r\n        if (this.board.isFieldTakenByEnemy(row + 1, col + 1, this.color)) {\r\n            possiblePoints.push(new Point(row + 1, col + 1));\r\n        }\r\n        return possiblePoints;\r\n    }\r\n}\r\nif (false) {\r\n    /** @type {?} */\r\n    King.prototype.castledAlready;\r\n    /** @type {?} */\r\n    King.prototype.shortCastled;\r\n    /** @type {?} */\r\n    King.prototype.longCastled;\r\n    /** @type {?} */\r\n    King.prototype.isMovedAlready;\r\n    /** @type {?} */\r\n    King.prototype.isCastling;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/utils/unicode-constants.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass UnicodeConstants {\r\n}\r\nUnicodeConstants.WHITE_KING = '&#x2654;';\r\nUnicodeConstants.WHITE_QUEEN = '&#x2655;';\r\nUnicodeConstants.WHITE_KNIGHT = '&#x2658;';\r\nUnicodeConstants.WHITE_ROOK = '&#x2656;';\r\nUnicodeConstants.WHITE_PAWN = '&#x2659;';\r\nUnicodeConstants.WHITE_BISHOP = '&#x2657;';\r\nUnicodeConstants.BLACK_KING = '&#x265A;';\r\nUnicodeConstants.BLACK_QUEEN = '&#x265B;';\r\nUnicodeConstants.BLACK_KNIGHT = '&#x265E;';\r\nUnicodeConstants.BLACK_ROOK = '&#x265C;';\r\nUnicodeConstants.BLACK_PAWN = '&#x265F;';\r\nUnicodeConstants.BLACK_BISHOP = '&#x265D;';\r\nif (false) {\r\n    /** @type {?} */\r\n    UnicodeConstants.WHITE_KING;\r\n    /** @type {?} */\r\n    UnicodeConstants.WHITE_QUEEN;\r\n    /** @type {?} */\r\n    UnicodeConstants.WHITE_KNIGHT;\r\n    /** @type {?} */\r\n    UnicodeConstants.WHITE_ROOK;\r\n    /** @type {?} */\r\n    UnicodeConstants.WHITE_PAWN;\r\n    /** @type {?} */\r\n    UnicodeConstants.WHITE_BISHOP;\r\n    /** @type {?} */\r\n    UnicodeConstants.BLACK_KING;\r\n    /** @type {?} */\r\n    UnicodeConstants.BLACK_QUEEN;\r\n    /** @type {?} */\r\n    UnicodeConstants.BLACK_KNIGHT;\r\n    /** @type {?} */\r\n    UnicodeConstants.BLACK_ROOK;\r\n    /** @type {?} */\r\n    UnicodeConstants.BLACK_PAWN;\r\n    /** @type {?} */\r\n    UnicodeConstants.BLACK_BISHOP;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/models/pieces/queen.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass Queen extends Piece {\r\n    /**\r\n     * @param {?} point\r\n     * @param {?} color\r\n     * @param {?} image\r\n     * @param {?} board\r\n     */\r\n    constructor(point, color, image, board) {\r\n        super(point, color, image, 9, board);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getPossibleMoves() {\r\n        /** @type {?} */\r\n        let possiblePoints = [];\r\n        /** @type {?} */\r\n        let row = this.point.row;\r\n        /** @type {?} */\r\n        let col = this.point.col;\r\n        for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) { // lewa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) { // prawa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) { // lewa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) { // prawa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        for (let i = row + 1; i < 8; ++i) { // dol\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        for (let i = row - 1; i >= 0; --i) { // gora\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        for (let j = col - 1; j >= 0; --j) { // lewo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        for (let j = col + 1; j < 8; ++j) { // prawo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        return possiblePoints;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getPossibleCaptures() {\r\n        /** @type {?} */\r\n        let possiblePoints = [];\r\n        /** @type {?} */\r\n        let row = this.point.row;\r\n        /** @type {?} */\r\n        let col = this.point.col;\r\n        for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) { // lewa gorna przekatna\r\n            if (this.board.isFieldTakenByEnemy(i, j, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            }\r\n            else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) { // prawa gorna przekatna\r\n            if (this.board.isFieldTakenByEnemy(i, j, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            }\r\n            else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) { // lewa dolna przekatna\r\n            if (this.board.isFieldTakenByEnemy(i, j, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            }\r\n            else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) { // prawa dolna przekatna\r\n            if (this.board.isFieldTakenByEnemy(i, j, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            }\r\n            else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        for (let i = row + 1; i < 8; ++i) { // dol\r\n            if (this.board.isFieldTakenByEnemy(i, col, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n                possiblePoints.push(new Point(i, col));\r\n                break;\r\n            }\r\n            else {\r\n                if (!this.board.isFieldEmpty(i, col)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        for (let i = row - 1; i >= 0; --i) { // gora\r\n            if (this.board.isFieldTakenByEnemy(i, col, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n                possiblePoints.push(new Point(i, col));\r\n                break;\r\n            }\r\n            else {\r\n                if (!this.board.isFieldEmpty(i, col)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        for (let j = col - 1; j >= 0; --j) { // lewo\r\n            if (this.board.isFieldTakenByEnemy(row, j, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n                possiblePoints.push(new Point(row, j));\r\n                break;\r\n            }\r\n            else {\r\n                if (!this.board.isFieldEmpty(row, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        for (let j = col + 1; j < 8; ++j) { // prawo\r\n            if (this.board.isFieldTakenByEnemy(row, j, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n                possiblePoints.push(new Point(row, j));\r\n                break;\r\n            }\r\n            else {\r\n                if (!this.board.isFieldEmpty(row, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return possiblePoints;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getCoveredFields() {\r\n        /** @type {?} */\r\n        let possiblePoints = [];\r\n        /** @type {?} */\r\n        let row = this.point.row;\r\n        /** @type {?} */\r\n        let col = this.point.col;\r\n        for (let i = row + 1; i < 8; ++i) { // dol\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            }\r\n            else {\r\n                if (!(this.board.getPieceByField(i, col) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, col));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        for (let i = row - 1; i >= 0; --i) { // gora\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            }\r\n            else {\r\n                if (!(this.board.getPieceByField(i, col) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, col));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        for (let j = col - 1; j >= 0; --j) { // lewo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            }\r\n            else {\r\n                if (!(this.board.getPieceByField(row, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(row, j));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        for (let j = col + 1; j < 8; ++j) { // prawo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            }\r\n            else {\r\n                if (!(this.board.getPieceByField(row, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(row, j));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) { // lewa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            }\r\n            else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) { // prawa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            }\r\n            else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) { // lewa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            }\r\n            else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) { // prawa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            }\r\n            else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return possiblePoints;\r\n    }\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/models/pieces/pawn.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass Pawn extends Piece {\r\n    /**\r\n     * @param {?} point\r\n     * @param {?} color\r\n     * @param {?} image\r\n     * @param {?} board\r\n     */\r\n    constructor(point, color, image, board) {\r\n        super(point, color, image, 1, board);\r\n        this.isMovedAlready = false;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getPossibleMoves() {\r\n        /** @type {?} */\r\n        let possiblePoints = [];\r\n        /** @type {?} */\r\n        let row = this.point.row;\r\n        /** @type {?} */\r\n        let col = this.point.col;\r\n        if ((!this.board.reverted && this.color === Color.WHITE) || (this.board.reverted && this.color === Color.BLACK)) {\r\n            if (this.board.isFieldEmpty(row - 1, col)) {\r\n                possiblePoints.push(new Point(row - 1, col));\r\n                if (!this.isMovedAlready && this.board.isFieldEmpty(row - 2, col)) {\r\n                    possiblePoints.push(new Point(row - 2, col));\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if ( /*!board.isFieldTakenByEnemy(row + 1, col, Color.WHITE) &&*/this.board.isFieldEmpty(row + 1, col)) {\r\n                possiblePoints.push(new Point(row + 1, col));\r\n                if (!this.isMovedAlready && this.board.isFieldEmpty(row + 2, col)) {\r\n                    possiblePoints.push(new Point(row + 2, col));\r\n                }\r\n            }\r\n        }\r\n        return possiblePoints;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getPossibleCaptures() {\r\n        /** @type {?} */\r\n        let possiblePoints = [];\r\n        /** @type {?} */\r\n        let row = this.point.row;\r\n        /** @type {?} */\r\n        let col = this.point.col;\r\n        if ((!this.board.reverted && this.color === Color.WHITE) || (this.board.reverted && this.color === Color.BLACK)) {\r\n            if (this.board.isFieldTakenByEnemy(row - 1, col - 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n                possiblePoints.push(new Point(row - 1, col - 1));\r\n            }\r\n            if (this.board.isFieldTakenByEnemy(row - 1, col + 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n                possiblePoints.push(new Point(row - 1, col + 1));\r\n            }\r\n        }\r\n        else {\r\n            if (this.board.isFieldTakenByEnemy(row + 1, col - 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n                possiblePoints.push(new Point(row + 1, col - 1));\r\n            }\r\n            if (this.board.isFieldTakenByEnemy(row + 1, col + 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n                possiblePoints.push(new Point(row + 1, col + 1));\r\n            }\r\n        }\r\n        if (this.board.enPassantPoint && this.board.enPassantPiece.color === (this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n            if (row === this.board.enPassantPiece.point.row && Math.abs(this.board.enPassantPiece.point.col - col) === 1) {\r\n                possiblePoints.push(this.board.enPassantPoint);\r\n            }\r\n        }\r\n        return possiblePoints;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getCoveredFields() {\r\n        /** @type {?} */\r\n        let possiblePoints = [];\r\n        /** @type {?} */\r\n        let row = this.point.row;\r\n        /** @type {?} */\r\n        let col = this.point.col;\r\n        if ((!this.board.reverted && this.color === Color.WHITE) || (this.board.reverted && this.color === Color.BLACK)) {\r\n            possiblePoints.push(new Point(row - 1, col - 1));\r\n            possiblePoints.push(new Point(row - 1, col + 1));\r\n        }\r\n        else {\r\n            possiblePoints.push(new Point(row + 1, col - 1));\r\n            possiblePoints.push(new Point(row + 1, col + 1));\r\n        }\r\n        return possiblePoints;\r\n    }\r\n}\r\nif (false) {\r\n    /** @type {?} */\r\n    Pawn.prototype.isMovedAlready;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/models/pieces/knight.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass Knight extends Piece {\r\n    /**\r\n     * @param {?} point\r\n     * @param {?} color\r\n     * @param {?} image\r\n     * @param {?} board\r\n     */\r\n    constructor(point, color, image, board) {\r\n        super(point, color, image, 3, board);\r\n        this.isMovedAlready = false;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getPossibleMoves() {\r\n        /** @type {?} */\r\n        let possiblePoints = [];\r\n        /** @type {?} */\r\n        let row = this.point.row;\r\n        /** @type {?} */\r\n        let col = this.point.col;\r\n        // gora -> lewo\r\n        if (this.board.isFieldEmpty(row - 2, col - 1)) {\r\n            possiblePoints.push(new Point(row - 2, col - 1));\r\n        }\r\n        // gora -> prawo\r\n        if (this.board.isFieldEmpty(row - 2, col + 1)) {\r\n            possiblePoints.push(new Point(row - 2, col + 1));\r\n        }\r\n        // lewo -> gora\r\n        if (this.board.isFieldEmpty(row - 1, col - 2)) {\r\n            possiblePoints.push(new Point(row - 1, col - 2));\r\n        }\r\n        // prawo -> gora\r\n        if (this.board.isFieldEmpty(row - 1, col + 2)) {\r\n            possiblePoints.push(new Point(row - 1, col + 2));\r\n        }\r\n        // lewo -> dol\r\n        if (this.board.isFieldEmpty(row + 1, col - 2)) {\r\n            possiblePoints.push(new Point(row + 1, col - 2));\r\n        }\r\n        // prawo -> dol\r\n        if (this.board.isFieldEmpty(row + 1, col + 2)) {\r\n            possiblePoints.push(new Point(row + 1, col + 2));\r\n        }\r\n        // dol -> lewo\r\n        if (this.board.isFieldEmpty(row + 2, col - 1)) {\r\n            possiblePoints.push(new Point(row + 2, col - 1));\r\n        }\r\n        // dol -> prawo\r\n        if (this.board.isFieldEmpty(row + 2, col + 1)) {\r\n            possiblePoints.push(new Point(row + 2, col + 1));\r\n        }\r\n        return possiblePoints;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getPossibleCaptures() {\r\n        /** @type {?} */\r\n        let possiblePoints = [];\r\n        /** @type {?} */\r\n        let row = this.point.row;\r\n        /** @type {?} */\r\n        let col = this.point.col;\r\n        // gora -> lewo\r\n        if (this.board.isFieldTakenByEnemy(row - 2, col - 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n            possiblePoints.push(new Point(row - 2, col - 1));\r\n        }\r\n        // gora -> prawo\r\n        if (this.board.isFieldTakenByEnemy(row - 2, col + 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n            possiblePoints.push(new Point(row - 2, col + 1));\r\n        }\r\n        // lewo -> gora\r\n        if (this.board.isFieldTakenByEnemy(row - 1, col - 2, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n            possiblePoints.push(new Point(row - 1, col - 2));\r\n        }\r\n        // prawo -> gora\r\n        if (this.board.isFieldTakenByEnemy(row - 1, col + 2, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n            possiblePoints.push(new Point(row - 1, col + 2));\r\n        }\r\n        // lewo -> dol\r\n        if (this.board.isFieldTakenByEnemy(row + 1, col - 2, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n            possiblePoints.push(new Point(row + 1, col - 2));\r\n        }\r\n        // prawo -> dol\r\n        if (this.board.isFieldTakenByEnemy(row + 1, col + 2, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n            possiblePoints.push(new Point(row + 1, col + 2));\r\n        }\r\n        // dol -> lewo\r\n        if (this.board.isFieldTakenByEnemy(row + 2, col - 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n            possiblePoints.push(new Point(row + 2, col - 1));\r\n        }\r\n        // dol -> prawo\r\n        if (this.board.isFieldTakenByEnemy(row + 2, col + 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n            possiblePoints.push(new Point(row + 2, col + 1));\r\n        }\r\n        return possiblePoints;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getCoveredFields() {\r\n        /** @type {?} */\r\n        let possiblePoints = [];\r\n        /** @type {?} */\r\n        let row = this.point.row;\r\n        /** @type {?} */\r\n        let col = this.point.col;\r\n        // gora -> lewo\r\n        possiblePoints.push(new Point(row - 2, col - 1));\r\n        // gora -> prawo\r\n        possiblePoints.push(new Point(row - 2, col + 1));\r\n        // lewo -> gora\r\n        possiblePoints.push(new Point(row - 1, col - 2));\r\n        // prawo -> gora\r\n        possiblePoints.push(new Point(row - 1, col + 2));\r\n        // lewo -> dol\r\n        possiblePoints.push(new Point(row + 1, col - 2));\r\n        // prawo -> dol\r\n        possiblePoints.push(new Point(row + 1, col + 2));\r\n        // dol -> lewo\r\n        possiblePoints.push(new Point(row + 2, col - 1));\r\n        // dol -> prawo\r\n        possiblePoints.push(new Point(row + 2, col + 1));\r\n        return possiblePoints;\r\n    }\r\n}\r\nif (false) {\r\n    /** @type {?} */\r\n    Knight.prototype.isMovedAlready;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/models/pieces/bishop.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass Bishop extends Piece {\r\n    /**\r\n     * @param {?} point\r\n     * @param {?} color\r\n     * @param {?} image\r\n     * @param {?} board\r\n     */\r\n    constructor(point, color, image, board) {\r\n        super(point, color, image, 3, board);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getPossibleMoves() {\r\n        /** @type {?} */\r\n        let possiblePoints = [];\r\n        /** @type {?} */\r\n        let row = this.point.row;\r\n        /** @type {?} */\r\n        let col = this.point.col;\r\n        for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) { // lewa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } //else if (board.getPieceByField(i, j) instanceof King && (board.getPieceByField(i, j).color !== this.color)){\r\n            // for( let a = row - 1, b = col - 1; a > i && j >= col; --a, --b){\r\n            //   possiblePoints.push(new Point(i, j));\r\n            //   }\r\n            // }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) { // prawa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) { // lewa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) { // prawa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        return possiblePoints;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getPossibleCaptures() {\r\n        /** @type {?} */\r\n        let possiblePoints = [];\r\n        /** @type {?} */\r\n        let row = this.point.row;\r\n        /** @type {?} */\r\n        let col = this.point.col;\r\n        for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) { // lewa gorna przekatna\r\n            if (this.board.isFieldTakenByEnemy(i, j, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            }\r\n            else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) { // prawa gorna przekatna\r\n            if (this.board.isFieldTakenByEnemy(i, j, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            }\r\n            else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) { // lewa dolna przekatna\r\n            if (this.board.isFieldTakenByEnemy(i, j, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            }\r\n            else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) { // prawa dolna przekatna\r\n            if (this.board.isFieldTakenByEnemy(i, j, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            }\r\n            else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return possiblePoints;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getCoveredFields() {\r\n        /** @type {?} */\r\n        let possiblePoints = [];\r\n        /** @type {?} */\r\n        let row = this.point.row;\r\n        /** @type {?} */\r\n        let col = this.point.col;\r\n        for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) { // lewa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j))\r\n                possiblePoints.push(new Point(i, j));\r\n            else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) { // prawa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j))\r\n                possiblePoints.push(new Point(i, j));\r\n            else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) { // lewa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j))\r\n                possiblePoints.push(new Point(i, j));\r\n            else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) { // prawa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j))\r\n                possiblePoints.push(new Point(i, j));\r\n            else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return possiblePoints;\r\n    }\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/models/board.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass Board {\r\n    constructor() {\r\n        this.pieces = [];\r\n        this.enPassantPoint = null;\r\n        this.enPassantPiece = null;\r\n        this.lastMoveSrc = null;\r\n        this.lastMoveDest = null;\r\n        this.possibleCaptures = [];\r\n        this.possibleMoves = [];\r\n        this.currentWhitePlayer = true;\r\n        this.reverted = false;\r\n        this.fullMoveCount = 1;\r\n        this.board = [];\r\n        for (var i = 0; i < 8; ++i) {\r\n            this.board[i] = [];\r\n            for (var j = 0; j < 8; ++j) {\r\n                this.board[i][j] = 0;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} row\r\n     * @param {?} col\r\n     * @return {?}\r\n     */\r\n    isXYInPossibleMoves(row, col) {\r\n        return this.possibleMoves.some((/**\r\n         * @param {?} e\r\n         * @return {?}\r\n         */\r\n        e => e.row === row && e.col === col));\r\n    }\r\n    /**\r\n     * @param {?} row\r\n     * @param {?} col\r\n     * @return {?}\r\n     */\r\n    isXYInPossibleCaptures(row, col) {\r\n        return this.possibleCaptures.some((/**\r\n         * @param {?} e\r\n         * @return {?}\r\n         */\r\n        e => e.row === row && e.col === col));\r\n    }\r\n    /**\r\n     * @param {?} i\r\n     * @param {?} j\r\n     * @return {?}\r\n     */\r\n    isXYInSourceMove(i, j) {\r\n        return this.lastMoveSrc && this.lastMoveSrc.row === i && this.lastMoveSrc.col === j;\r\n    }\r\n    /**\r\n     * @param {?} i\r\n     * @param {?} j\r\n     * @return {?}\r\n     */\r\n    isXYInDestMove(i, j) {\r\n        return this.lastMoveDest && this.lastMoveDest.row === i && this.lastMoveDest.col === j;\r\n    }\r\n    /**\r\n     * @param {?} i\r\n     * @param {?} j\r\n     * @return {?}\r\n     */\r\n    isXYInActiveMove(i, j) {\r\n        return this.activePiece && this.activePiece.point.row === i && this.activePiece.point.col === j;\r\n    }\r\n    /**\r\n     * @param {?} point\r\n     * @return {?}\r\n     */\r\n    isPointInPossibleMoves(point) {\r\n        return this.possibleMoves.some((/**\r\n         * @param {?} e\r\n         * @return {?}\r\n         */\r\n        e => e.row === point.row && e.col === point.col));\r\n    }\r\n    /**\r\n     * @param {?} point\r\n     * @return {?}\r\n     */\r\n    isPointInPossibleCaptures(point) {\r\n        return this.possibleCaptures.some((/**\r\n         * @param {?} e\r\n         * @return {?}\r\n         */\r\n        e => e.row === point.row && e.col === point.col));\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    reset() {\r\n        this.lastMoveDest = null;\r\n        this.lastMoveSrc = null;\r\n        this.whiteKingChecked = false;\r\n        this.blackKingChecked = false;\r\n        this.possibleCaptures = [];\r\n        this.possibleMoves = [];\r\n        this.activePiece = null;\r\n        this.reverted = false;\r\n        this.currentWhitePlayer = true;\r\n        this.enPassantPoint = null;\r\n        this.enPassantPiece = null;\r\n        this.fullMoveCount = 1;\r\n        this.calculateFEN();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    reverse() {\r\n        this.reverted = !this.reverted;\r\n        this.activePiece = null;\r\n        this.possibleMoves = [];\r\n        this.possibleCaptures = [];\r\n        for (let i = 0; i < this.pieces.length; ++i) {\r\n            this.reversePoint(this.pieces[i].point);\r\n        }\r\n        this.reversePoint(this.lastMoveSrc);\r\n        if (this.enPassantPoint && this.enPassantPiece) {\r\n            this.reversePoint(this.enPassantPoint);\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} point\r\n     * @return {?}\r\n     */\r\n    reversePoint(point) {\r\n        if (point) {\r\n            point.row = Math.abs(point.row - 7);\r\n            point.col = Math.abs(point.col - 7);\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    clone() {\r\n        return cloneDeep(this);\r\n    }\r\n    /**\r\n     * @param {?} row\r\n     * @param {?} col\r\n     * @param {?} enemyColor\r\n     * @return {?}\r\n     */\r\n    isFieldTakenByEnemy(row, col, enemyColor) {\r\n        if (row > 7 || row < 0 || col > 7 || col < 0) {\r\n            return false;\r\n        }\r\n        return this.pieces.some((/**\r\n         * @param {?} e\r\n         * @return {?}\r\n         */\r\n        e => e.point.col === col && e.point.row === row && e.color === enemyColor));\r\n    }\r\n    /**\r\n     * @param {?} row\r\n     * @param {?} col\r\n     * @return {?}\r\n     */\r\n    isFieldEmpty(row, col) {\r\n        if (row > 7 || row < 0 || col > 7 || col < 0) {\r\n            return false;\r\n        }\r\n        return !this.pieces.some((/**\r\n         * @param {?} e\r\n         * @return {?}\r\n         */\r\n        e => e.point.col === col && e.point.row === row));\r\n    }\r\n    /**\r\n     * @param {?} row\r\n     * @param {?} col\r\n     * @param {?} color\r\n     * @return {?}\r\n     */\r\n    isFieldUnderAttack(row, col, color) {\r\n        /** @type {?} */\r\n        let found = false;\r\n        return this.pieces.filter((/**\r\n         * @param {?} e\r\n         * @return {?}\r\n         */\r\n        e => e.color === color)).some((/**\r\n         * @param {?} e\r\n         * @return {?}\r\n         */\r\n        e => e.getCoveredFields().some((/**\r\n         * @param {?} f\r\n         * @return {?}\r\n         */\r\n        f => f.col === col && f.row === row))));\r\n    }\r\n    /**\r\n     * @param {?} row\r\n     * @param {?} col\r\n     * @return {?}\r\n     */\r\n    getPieceByField(row, col) {\r\n        if (this.isFieldEmpty(row, col)) {\r\n            //   throw new Error('Piece not found');\r\n            return undefined;\r\n        }\r\n        return this.pieces.find((/**\r\n         * @param {?} e\r\n         * @return {?}\r\n         */\r\n        e => e.point.col === col && e.point.row === row));\r\n    }\r\n    /**\r\n     * @param {?} color\r\n     * @param {?} piece\r\n     * @return {?}\r\n     */\r\n    isKingInCheck(color, piece) {\r\n        /** @type {?} */\r\n        let king = piece\r\n            .find((/**\r\n         * @param {?} e\r\n         * @return {?}\r\n         */\r\n        e => e.color === color && e instanceof King));\r\n        if (king) {\r\n            return piece.some((/**\r\n             * @param {?} e\r\n             * @return {?}\r\n             */\r\n            e => e.getPossibleCaptures().some((/**\r\n             * @param {?} e\r\n             * @return {?}\r\n             */\r\n            e => e.col === king.point.col && e.row === king.point.row)) && e.color !== color));\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * @param {?} color\r\n     * @return {?}\r\n     */\r\n    getKingByColor(color) {\r\n        return (/** @type {?} */ (this.pieces.find((/**\r\n         * @param {?} e\r\n         * @return {?}\r\n         */\r\n        e => (e instanceof King) && e.color === color))));\r\n    }\r\n    /**\r\n     * @param {?} color\r\n     * @return {?}\r\n     */\r\n    getCastleFENString(color) {\r\n        /** @type {?} */\r\n        let king = this.getKingByColor(color);\r\n        if (king.isMovedAlready) {\r\n            return '';\r\n        }\r\n        /** @type {?} */\r\n        let fen = '';\r\n        /** @type {?} */\r\n        let leftRook = this.getPieceByField(king.point.row, 0);\r\n        /** @type {?} */\r\n        let rightRook = this.getPieceByField(king.point.row, 7);\r\n        if (rightRook instanceof Rook && rightRook.color === color) {\r\n            if (!rightRook.isMovedAlready) {\r\n                fen += this.reverted ? 'q' : 'k';\r\n            }\r\n        }\r\n        if (leftRook instanceof Rook && leftRook.color === color) {\r\n            if (!leftRook.isMovedAlready) {\r\n                fen += this.reverted ? 'k' : 'q';\r\n            }\r\n        }\r\n        fen = fen.split('').sort().join(\"\");\r\n        return color === Color.BLACK ? fen : fen.toUpperCase();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getEnPassantFENString() {\r\n        if (this.enPassantPoint) {\r\n            if (this.reverted) {\r\n                return String.fromCharCode(104 - this.enPassantPoint.col) + (this.enPassantPoint.row + 1);\r\n            }\r\n            else {\r\n                return String.fromCharCode(97 + this.enPassantPoint.col) + (Math.abs(this.enPassantPoint.row - 7) + 1);\r\n            }\r\n        }\r\n        else {\r\n            return '-';\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    calculateFEN() {\r\n        /** @type {?} */\r\n        let fen = '';\r\n        for (let i = 0; i < 8; ++i) {\r\n            /** @type {?} */\r\n            let emptyFields = 0;\r\n            for (let j = 0; j < 8; ++j) {\r\n                /** @type {?} */\r\n                let piece = this.pieces.find((/**\r\n                 * @param {?} e\r\n                 * @return {?}\r\n                 */\r\n                e => e.point.col === j && e.point.row === i));\r\n                if (piece) {\r\n                    if (emptyFields > 0) {\r\n                        fen += emptyFields;\r\n                        emptyFields = 0;\r\n                    }\r\n                    if (piece instanceof Rook) {\r\n                        fen += piece.color === Color.BLACK ? 'r' : 'R';\r\n                    }\r\n                    else if (piece instanceof Knight) {\r\n                        fen += piece.color === Color.BLACK ? 'n' : 'N';\r\n                    }\r\n                    else if (piece instanceof Bishop) {\r\n                        fen += piece.color === Color.BLACK ? 'b' : 'B';\r\n                    }\r\n                    else if (piece instanceof Queen) {\r\n                        fen += piece.color === Color.BLACK ? 'q' : 'Q';\r\n                    }\r\n                    else if (piece instanceof King) {\r\n                        fen += piece.color === Color.BLACK ? 'k' : 'K';\r\n                    }\r\n                    else if (piece instanceof Pawn) {\r\n                        fen += piece.color === Color.BLACK ? 'p' : 'P';\r\n                    }\r\n                }\r\n                else {\r\n                    ++emptyFields;\r\n                }\r\n            }\r\n            if (emptyFields > 0) {\r\n                fen += emptyFields;\r\n            }\r\n            fen += '/';\r\n        }\r\n        fen = fen.substr(0, fen.length - 1);\r\n        if (this.reverted) {\r\n            fen = fen.split('').reverse().join('');\r\n        }\r\n        fen += (' ' + (this.currentWhitePlayer ? 'w' : 'b'));\r\n        /** @type {?} */\r\n        let whiteEnPassant = this.getCastleFENString(Color.WHITE);\r\n        /** @type {?} */\r\n        let blackEnPassant = this.getCastleFENString(Color.BLACK);\r\n        /** @type {?} */\r\n        let concatedEnPassant = whiteEnPassant + blackEnPassant;\r\n        if (!concatedEnPassant) {\r\n            concatedEnPassant = '-';\r\n        }\r\n        fen += (' ' + concatedEnPassant);\r\n        fen += (' ' + (this.getEnPassantFENString()));\r\n        fen += ' ' + 0;\r\n        fen += ' ' + this.fullMoveCount;\r\n        this.fen = fen;\r\n    }\r\n    /**\r\n     * @param {?} i\r\n     * @param {?} j\r\n     * @return {?}\r\n     */\r\n    isXYInPointSelection(i, j) {\r\n        return false;\r\n    }\r\n}\r\nif (false) {\r\n    /** @type {?} */\r\n    Board.prototype.board;\r\n    /** @type {?} */\r\n    Board.prototype.pieces;\r\n    /** @type {?} */\r\n    Board.prototype.enPassantPoint;\r\n    /** @type {?} */\r\n    Board.prototype.enPassantPiece;\r\n    /** @type {?} */\r\n    Board.prototype.lastMoveSrc;\r\n    /** @type {?} */\r\n    Board.prototype.lastMoveDest;\r\n    /** @type {?} */\r\n    Board.prototype.activePiece;\r\n    /** @type {?} */\r\n    Board.prototype.blackKingChecked;\r\n    /** @type {?} */\r\n    Board.prototype.possibleCaptures;\r\n    /** @type {?} */\r\n    Board.prototype.possibleMoves;\r\n    /** @type {?} */\r\n    Board.prototype.whiteKingChecked;\r\n    /** @type {?} */\r\n    Board.prototype.currentWhitePlayer;\r\n    /** @type {?} */\r\n    Board.prototype.reverted;\r\n    /** @type {?} */\r\n    Board.prototype.fullMoveCount;\r\n    /** @type {?} */\r\n    Board.prototype.fen;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/utils/move-utils.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass MoveUtils {\r\n    /**\r\n     * @param {?} currentColor\r\n     * @param {?} row\r\n     * @param {?} col\r\n     * @param {?} destRow\r\n     * @param {?} destCol\r\n     * @param {?} board\r\n     * @return {?}\r\n     */\r\n    static willMoveCauseCheck(currentColor, row, col, destRow, destCol, board) {\r\n        /** @type {?} */\r\n        let srcPiece = board.getPieceByField(row, col);\r\n        /** @type {?} */\r\n        let destPiece = board.getPieceByField(destRow, destCol);\r\n        if (srcPiece) {\r\n            srcPiece.point.row = destRow;\r\n            srcPiece.point.col = destCol;\r\n        }\r\n        if (destPiece) {\r\n            board.pieces = board.pieces.filter((/**\r\n             * @param {?} e\r\n             * @return {?}\r\n             */\r\n            e => e !== destPiece));\r\n        }\r\n        /** @type {?} */\r\n        let isBound = board.isKingInCheck(currentColor, board.pieces);\r\n        if (srcPiece) {\r\n            srcPiece.point.col = col;\r\n            srcPiece.point.row = row;\r\n        }\r\n        if (destPiece) {\r\n            board.pieces.push(destPiece);\r\n        }\r\n        return isBound;\r\n    }\r\n    /**\r\n     * @param {?} sourcePoint\r\n     * @param {?} destPoint\r\n     * @param {?} reverted\r\n     * @return {?}\r\n     */\r\n    static format(sourcePoint, destPoint, reverted) {\r\n        if (reverted) {\r\n            /** @type {?} */\r\n            let sourceX = 104 - sourcePoint.col;\r\n            /** @type {?} */\r\n            let destX = 104 - destPoint.col;\r\n            return String.fromCharCode(sourceX) + (sourcePoint.row + 1)\r\n                + String.fromCharCode(destX) + (destPoint.row + 1);\r\n        }\r\n        else {\r\n            /** @type {?} */\r\n            let incrementX = 97;\r\n            return String.fromCharCode(sourcePoint.col + incrementX) + (Math.abs(sourcePoint.row - 7) + 1)\r\n                + String.fromCharCode(destPoint.col + incrementX) + (Math.abs(destPoint.row - 7) + 1);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/service/ngx-chess-board.service.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass NgxChessBoardService {\r\n    constructor() {\r\n        this.componentMethodCallSource = new Subject();\r\n        this.componentMethodCalled$ = this.componentMethodCallSource.asObservable();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    reset() {\r\n        this.componentMethodCallSource.next();\r\n    }\r\n}\r\nNgxChessBoardService.decorators = [\r\n    { type: Injectable, args: [{\r\n                providedIn: 'root'\r\n            },] }\r\n];\r\n/** @nocollapse */ NgxChessBoardService.ngInjectableDef = ɵɵdefineInjectable({ factory: function NgxChessBoardService_Factory() { return new NgxChessBoardService(); }, token: NgxChessBoardService, providedIn: \"root\" });\r\nif (false) {\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    NgxChessBoardService.prototype.componentMethodCallSource;\r\n    /** @type {?} */\r\n    NgxChessBoardService.prototype.componentMethodCalled$;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/piece-decorator/piece-abstract-decorator.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @abstract\r\n */\r\nclass PieceAbstractDecorator {\r\n    /**\r\n     * @protected\r\n     * @param {?} piece\r\n     */\r\n    constructor(piece) {\r\n        this.piece = piece;\r\n    }\r\n}\r\nif (false) {\r\n    /** @type {?} */\r\n    PieceAbstractDecorator.prototype.piece;\r\n    /**\r\n     * @abstract\r\n     * @return {?}\r\n     */\r\n    PieceAbstractDecorator.prototype.getPossibleCaptures = function () { };\r\n    /**\r\n     * @abstract\r\n     * @return {?}\r\n     */\r\n    PieceAbstractDecorator.prototype.getPossibleMoves = function () { };\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/piece-decorator/available-move-decorator.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass AvailableMoveDecorator extends PieceAbstractDecorator {\r\n    /**\r\n     * @param {?} piece\r\n     * @param {?} pointClicked\r\n     * @param {?} color\r\n     * @param {?} board\r\n     */\r\n    constructor(piece, pointClicked, color, board) {\r\n        super(piece);\r\n        this.pointClicked = pointClicked;\r\n        this.color = color;\r\n        this.board = board;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getPossibleCaptures() {\r\n        return this.piece.getPossibleCaptures()\r\n            .filter((/**\r\n         * @param {?} point\r\n         * @return {?}\r\n         */\r\n        point => !MoveUtils.willMoveCauseCheck(this.color, this.pointClicked.row, this.pointClicked.col, point.row, point.col, this.board)));\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getPossibleMoves() {\r\n        return this.piece.getPossibleMoves()\r\n            .filter((/**\r\n         * @param {?} point\r\n         * @return {?}\r\n         */\r\n        point => !MoveUtils.willMoveCauseCheck(this.color, this.pointClicked.row, this.pointClicked.col, point.row, point.col, this.board)));\r\n    }\r\n}\r\nif (false) {\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    AvailableMoveDecorator.prototype.pointClicked;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    AvailableMoveDecorator.prototype.color;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    AvailableMoveDecorator.prototype.board;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/board-state-provider/board-state-provider.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass BoardStateProvider {\r\n    constructor() {\r\n        this.moves = [];\r\n    }\r\n    /**\r\n     * @param {?} moveHistory\r\n     * @return {?}\r\n     */\r\n    addMove(moveHistory) {\r\n        this.moves.push(moveHistory);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getMoves() {\r\n        return this.moves;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    pop() {\r\n        return this.moves.pop();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    isEmpty() {\r\n        return this.moves.length === 0;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    clear() {\r\n        this.moves = [];\r\n    }\r\n}\r\nif (false) {\r\n    /** @type {?} */\r\n    BoardStateProvider.prototype.moves;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/board-state-provider/board-state.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass BoardState {\r\n    /**\r\n     * @param {?} board\r\n     */\r\n    constructor(board) {\r\n        this.board = board;\r\n    }\r\n}\r\nif (false) {\r\n    /** @type {?} */\r\n    BoardState.prototype.board;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/history-move-provider/history-move.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass HistoryMove {\r\n    /**\r\n     * @param {?} move\r\n     * @param {?} piece\r\n     * @param {?} color\r\n     */\r\n    constructor(move, piece, color) {\r\n        this.move = move;\r\n        this.piece = piece;\r\n        this.color = color;\r\n    }\r\n}\r\nif (false) {\r\n    /** @type {?} */\r\n    HistoryMove.prototype.move;\r\n    /** @type {?} */\r\n    HistoryMove.prototype.piece;\r\n    /** @type {?} */\r\n    HistoryMove.prototype.color;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/history-move-provider/history-move-provider.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass HistoryMoveProvider {\r\n    constructor() {\r\n        this.historyMoves = [];\r\n    }\r\n    /**\r\n     * @param {?} historyMove\r\n     * @return {?}\r\n     */\r\n    addMove(historyMove) {\r\n        this.historyMoves.push(historyMove);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    pop() {\r\n        return this.historyMoves.pop();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getAll() {\r\n        return this.historyMoves;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    clear() {\r\n        this.historyMoves = [];\r\n    }\r\n}\r\nif (false) {\r\n    /** @type {?} */\r\n    HistoryMoveProvider.prototype.historyMoves;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/utils/constants.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass Constants {\r\n}\r\nConstants.DEFAULT_DARK_TILE_COLOR = 'rgb(97, 84, 61)';\r\nConstants.DEFAULT_LIGHT_TILE_COLOR = '#BAA378';\r\nConstants.DEFAULT_SIZE = 400;\r\nConstants.MIN_BOARD_SIZE = 100;\r\nConstants.MAX_BOARD_SIZE = 4000;\r\nif (false) {\r\n    /** @type {?} */\r\n    Constants.DEFAULT_DARK_TILE_COLOR;\r\n    /** @type {?} */\r\n    Constants.DEFAULT_LIGHT_TILE_COLOR;\r\n    /** @type {?} */\r\n    Constants.DEFAULT_SIZE;\r\n    /** @type {?} */\r\n    Constants.MIN_BOARD_SIZE;\r\n    /** @type {?} */\r\n    Constants.MAX_BOARD_SIZE;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/coords/coords-provider.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass CoordsProvider {\r\n    constructor() {\r\n        this._xCoords = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\r\n        this._yCoords = [8, 7, 6, 5, 4, 3, 2, 1];\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    reverse() {\r\n        this._xCoords = this._xCoords.reverse();\r\n        this._yCoords = this._yCoords.reverse();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get xCoords() {\r\n        return this._xCoords;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get yCoords() {\r\n        return this._yCoords;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    reset() {\r\n        this.init();\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    init() {\r\n        this._xCoords = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\r\n        this._yCoords = [8, 7, 6, 5, 4, 3, 2, 1];\r\n    }\r\n}\r\nif (false) {\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    CoordsProvider.prototype._xCoords;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    CoordsProvider.prototype._yCoords;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/board-state-provider/board-loader.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass BoardLoader {\r\n    /**\r\n     * @param {?} board\r\n     */\r\n    constructor(board) {\r\n        this.board = board;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    addPieces() {\r\n        this.board.pieces = [];\r\n        // piony czarne\r\n        for (let i = 0; i < 8; ++i) {\r\n            this.board.pieces.push(new Pawn(new Point(1, i), Color.BLACK, UnicodeConstants.BLACK_PAWN, this.board));\r\n        }\r\n        this.board.pieces.push(new Rook(new Point(0, 0), Color.BLACK, UnicodeConstants.BLACK_ROOK, this.board));\r\n        this.board.pieces.push(new Knight(new Point(0, 1), Color.BLACK, UnicodeConstants.BLACK_KNIGHT, this.board));\r\n        this.board.pieces.push(new Bishop(new Point(0, 2), Color.BLACK, UnicodeConstants.BLACK_BISHOP, this.board));\r\n        this.board.pieces.push(new Queen(new Point(0, 3), Color.BLACK, UnicodeConstants.BLACK_QUEEN, this.board));\r\n        this.board.pieces.push(new King(new Point(0, 4), Color.BLACK, UnicodeConstants.BLACK_KING, this.board));\r\n        this.board.pieces.push(new Bishop(new Point(0, 5), Color.BLACK, UnicodeConstants.BLACK_BISHOP, this.board));\r\n        this.board.pieces.push(new Knight(new Point(0, 6), Color.BLACK, UnicodeConstants.BLACK_KNIGHT, this.board));\r\n        this.board.pieces.push(new Rook(new Point(0, 7), Color.BLACK, UnicodeConstants.BLACK_ROOK, this.board));\r\n        // piony biale\r\n        for (let i = 0; i < 8; ++i) {\r\n            this.board.pieces.push(new Pawn(new Point(6, i), Color.WHITE, UnicodeConstants.WHITE_PAWN, this.board));\r\n        }\r\n        this.board.pieces.push(new Rook(new Point(7, 0), Color.WHITE, UnicodeConstants.WHITE_ROOK, this.board));\r\n        this.board.pieces.push(new Knight(new Point(7, 1), Color.WHITE, UnicodeConstants.WHITE_KNIGHT, this.board));\r\n        this.board.pieces.push(new Bishop(new Point(7, 2), Color.WHITE, UnicodeConstants.WHITE_BISHOP, this.board));\r\n        this.board.pieces.push(new Queen(new Point(7, 3), Color.WHITE, UnicodeConstants.WHITE_QUEEN, this.board));\r\n        this.board.pieces.push(new King(new Point(7, 4), Color.WHITE, UnicodeConstants.WHITE_KING, this.board));\r\n        this.board.pieces.push(new Bishop(new Point(7, 5), Color.WHITE, UnicodeConstants.WHITE_BISHOP, this.board));\r\n        this.board.pieces.push(new Knight(new Point(7, 6), Color.WHITE, UnicodeConstants.WHITE_KNIGHT, this.board));\r\n        this.board.pieces.push(new Rook(new Point(7, 7), Color.WHITE, UnicodeConstants.WHITE_ROOK, this.board));\r\n        this.board.calculateFEN();\r\n    }\r\n    /**\r\n     * @param {?} fen\r\n     * @return {?}\r\n     */\r\n    loadFEN(fen) {\r\n        if (fen) {\r\n            this.board.reverted = false;\r\n            this.board.pieces = [];\r\n            /** @type {?} */\r\n            let split = fen.split('/');\r\n            for (let i = 0; i < 8; ++i) {\r\n                /** @type {?} */\r\n                let pointer = 0;\r\n                for (let j = 0; j < 8; ++j) {\r\n                    /** @type {?} */\r\n                    let chunk = split[i].charAt(j);\r\n                    if (chunk.match(/[0-9]/)) {\r\n                        pointer += Number(chunk);\r\n                    }\r\n                    else {\r\n                        switch (chunk) {\r\n                            case 'r':\r\n                                this.board.pieces.push(new Rook(new Point(i, pointer), Color.BLACK, UnicodeConstants.BLACK_ROOK, this.board));\r\n                                break;\r\n                            case 'n':\r\n                                this.board.pieces.push(new Knight(new Point(i, pointer), Color.BLACK, UnicodeConstants.BLACK_KNIGHT, this.board));\r\n                                break;\r\n                            case 'b':\r\n                                this.board.pieces.push(new Bishop(new Point(i, pointer), Color.BLACK, UnicodeConstants.BLACK_BISHOP, this.board));\r\n                                break;\r\n                            case 'q':\r\n                                this.board.pieces.push(new Queen(new Point(i, pointer), Color.BLACK, UnicodeConstants.BLACK_QUEEN, this.board));\r\n                                break;\r\n                            case 'k':\r\n                                this.board.pieces.push(new King(new Point(i, pointer), Color.BLACK, UnicodeConstants.BLACK_KING, this.board));\r\n                                break;\r\n                            case 'p': {\r\n                                /** @type {?} */\r\n                                let pawn = new Pawn(new Point(i, pointer), Color.BLACK, UnicodeConstants.BLACK_PAWN, this.board);\r\n                                if ((pawn.color === Color.BLACK && pawn.point.row !== 1) || (pawn.color === Color.WHITE && pawn.point.row !== 6)) {\r\n                                    pawn.isMovedAlready = true;\r\n                                }\r\n                                this.board.pieces.push(pawn);\r\n                                break;\r\n                            }\r\n                            case 'R':\r\n                                this.board.pieces.push(new Rook(new Point(i, pointer), Color.WHITE, UnicodeConstants.WHITE_ROOK, this.board));\r\n                                break;\r\n                            case 'N':\r\n                                this.board.pieces.push(new Knight(new Point(i, pointer), Color.WHITE, UnicodeConstants.WHITE_KNIGHT, this.board));\r\n                                break;\r\n                            case 'B':\r\n                                this.board.pieces.push(new Bishop(new Point(i, pointer), Color.WHITE, UnicodeConstants.WHITE_BISHOP, this.board));\r\n                                break;\r\n                            case 'Q':\r\n                                this.board.pieces.push(new Queen(new Point(i, pointer), Color.WHITE, UnicodeConstants.WHITE_QUEEN, this.board));\r\n                                break;\r\n                            case 'K':\r\n                                this.board.pieces.push(new King(new Point(i, pointer), Color.WHITE, UnicodeConstants.WHITE_KING, this.board));\r\n                                break;\r\n                            case 'P': {\r\n                                /** @type {?} */\r\n                                let pawn = new Pawn(new Point(i, pointer), Color.WHITE, UnicodeConstants.WHITE_PAWN, this.board);\r\n                                if ((pawn.color === Color.BLACK && pawn.point.row !== 1) || (pawn.color === Color.WHITE && pawn.point.row !== 6)) {\r\n                                    pawn.isMovedAlready = true;\r\n                                }\r\n                                this.board.pieces.push(pawn);\r\n                                break;\r\n                            }\r\n                        }\r\n                        ++pointer;\r\n                    }\r\n                }\r\n            }\r\n            this.setCurrentPlayer(fen);\r\n            this.setCastles(fen);\r\n            this.setEnPassant(fen);\r\n            this.setFullMoveCount(fen);\r\n        }\r\n        else {\r\n            throw Error('Incorrect FEN provided');\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} fen\r\n     * @return {?}\r\n     */\r\n    setCurrentPlayer(fen) {\r\n        if (fen) {\r\n            /** @type {?} */\r\n            let split = fen.split(' ');\r\n            this.board.currentWhitePlayer = split[1] === 'w';\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} board\r\n     * @return {?}\r\n     */\r\n    setBoard(board) {\r\n        this.board = board;\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} fen\r\n     * @return {?}\r\n     */\r\n    setCastles(fen) {\r\n        if (fen) {\r\n            /** @type {?} */\r\n            let split = fen.split(' ');\r\n            /** @type {?} */\r\n            let castleChunk = split[2];\r\n            if (!castleChunk.includes('K')) {\r\n                this.setRookAlreadyMoved(Color.WHITE, 7);\r\n            }\r\n            if (!castleChunk.includes('Q')) {\r\n                this.setRookAlreadyMoved(Color.WHITE, 0);\r\n            }\r\n            if (!castleChunk.includes('k')) {\r\n                this.setRookAlreadyMoved(Color.BLACK, 7);\r\n            }\r\n            if (!castleChunk.includes('q')) {\r\n                this.setRookAlreadyMoved(Color.BLACK, 0);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} fen\r\n     * @return {?}\r\n     */\r\n    setFullMoveCount(fen) {\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} fen\r\n     * @return {?}\r\n     */\r\n    setEnPassant(fen) {\r\n        if (fen) {\r\n            /** @type {?} */\r\n            let split = fen.split(' ');\r\n            /** @type {?} */\r\n            let enPassantPoint = split[3];\r\n            if (enPassantPoint === '-') {\r\n                return;\r\n            }\r\n            // if()\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} color\r\n     * @param {?} col\r\n     * @return {?}\r\n     */\r\n    setRookAlreadyMoved(color, col) {\r\n        /** @type {?} */\r\n        let rook = (/** @type {?} */ (this.board.pieces.find((/**\r\n         * @param {?} e\r\n         * @return {?}\r\n         */\r\n        e => e.color === color && e instanceof Rook && e.point.col === col))));\r\n        rook.isMovedAlready = true;\r\n    }\r\n}\r\nif (false) {\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    BoardLoader.prototype.board;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/piece-promotion-modal/piece-promotion-modal.component.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass PiecePromotionModalComponent {\r\n    constructor() {\r\n        this.selectedIndex = 1;\r\n    }\r\n    /**\r\n     * @param {?} closeCallback\r\n     * @return {?}\r\n     */\r\n    open(closeCallback) {\r\n        this.onCloseCallback = closeCallback;\r\n        this.modal.nativeElement.style.display = 'block';\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    close() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this.onCloseCallback(this.selectedIndex);\r\n            this.modal.nativeElement.style.display = 'none';\r\n        });\r\n    }\r\n    /**\r\n     * @param {?} index\r\n     * @return {?}\r\n     */\r\n    changeSelection(index) {\r\n        this.selectedIndex = index;\r\n    }\r\n}\r\nPiecePromotionModalComponent.decorators = [\r\n    { type: Component, args: [{\r\n                selector: 'app-piece-promotion-modal',\r\n                template: \"<div #myModal class=\\\"container\\\">\\r\\n  <div class=\\\"wrapper\\\">\\r\\n    <div class=\\\"content\\\">\\r\\n      <div class=\\\"piece-wrapper\\\">\\r\\n        <div class=\\\"piece\\\" (click)=\\\"changeSelection(1)\\\" [class.selected]=\\\"selectedIndex===1\\\">&#x265B;</div>\\r\\n        <div class=\\\"piece\\\" (click)=\\\"changeSelection(2)\\\" [class.selected]=\\\"selectedIndex===2\\\">&#x265C;</div>\\r\\n        <div class=\\\"piece\\\" (click)=\\\"changeSelection(3)\\\" [class.selected]=\\\"selectedIndex===3\\\">&#x265D;</div>\\r\\n        <div class=\\\"piece\\\" (click)=\\\"changeSelection(4)\\\" [class.selected]=\\\"selectedIndex===4\\\">&#x265E;</div>\\r\\n      </div>\\r\\n      <div style=\\\"text-align: center; margin-top: 5px\\\">\\r\\n        <button (click)=\\\"close()\\\" id=\\\"close-button\\\">Promote!</button>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\",\r\n                styles: [\".container{display:none;position:absolute;z-index:1;top:0;color:#000;width:100%;height:100%;overflow:auto;background-color:rgba(0,0,0,.4)}.wrapper{position:relative;height:100%;width:100%}.content{background-color:#fefefe;margin:auto;position:relative;top:30%;font-size:100%;height:40%;padding:10px;border:1px solid #888;width:90%}.piece{font-size:5rem;height:100%;width:25%;cursor:pointer;display:inline-block}.piece-wrapper{height:80%;width:100%}#close-button{border-radius:4px;background-color:#4caf50;border:none;color:#fff;padding-left:5px;padding-right:5px;text-align:center;text-decoration:none;display:inline-block}.selected{border:2px solid #00b919;border-radius:4px;box-sizing:border-box}\"]\r\n            }] }\r\n];\r\nPiecePromotionModalComponent.propDecorators = {\r\n    modal: [{ type: ViewChild, args: ['myModal', { static: false },] }]\r\n};\r\nif (false) {\r\n    /** @type {?} */\r\n    PiecePromotionModalComponent.prototype.modal;\r\n    /** @type {?} */\r\n    PiecePromotionModalComponent.prototype.selectedIndex;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    PiecePromotionModalComponent.prototype.onCloseCallback;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/drawing-tools/arrow.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass Arrow {\r\n    /**\r\n     * @param {?} arrow\r\n     * @return {?}\r\n     */\r\n    isEqual(arrow) {\r\n        return arrow && this.start.isEqual(arrow.start) && this.end.isEqual(arrow.end);\r\n    }\r\n}\r\nif (false) {\r\n    /** @type {?} */\r\n    Arrow.prototype.start;\r\n    /** @type {?} */\r\n    Arrow.prototype.end;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/drawing-tools/draw-point.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass DrawPoint {\r\n    /**\r\n     * @param {?} x\r\n     * @param {?} y\r\n     */\r\n    constructor(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n    /**\r\n     * @param {?} that\r\n     * @return {?}\r\n     */\r\n    isEqual(that) {\r\n        return that && that.x === this.x && this.y === that.y;\r\n    }\r\n}\r\nif (false) {\r\n    /** @type {?} */\r\n    DrawPoint.prototype.x;\r\n    /** @type {?} */\r\n    DrawPoint.prototype.y;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/drawing-tools/circle.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass Circle {\r\n    /**\r\n     * @param {?} circle\r\n     * @return {?}\r\n     */\r\n    isEqual(circle) {\r\n        return circle && this.drawPoint.isEqual(circle.drawPoint);\r\n    }\r\n}\r\nif (false) {\r\n    /** @type {?} */\r\n    Circle.prototype.drawPoint;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/drawing-tools/draw-provider.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass DrawProvider {\r\n    constructor() {\r\n        this._arrows = [];\r\n        this._circles = [];\r\n    }\r\n    /**\r\n     * @param {?} circle\r\n     * @return {?}\r\n     */\r\n    addCircle(circle) {\r\n        this.circles.push(circle);\r\n    }\r\n    /**\r\n     * @param {?} arrow\r\n     * @return {?}\r\n     */\r\n    addArrow(arrow) {\r\n        this.arrows.push(arrow);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get circles() {\r\n        return this._circles;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get arrows() {\r\n        return this._arrows;\r\n    }\r\n    /**\r\n     * @param {?} circle\r\n     * @return {?}\r\n     */\r\n    containsCircle(circle) {\r\n        return this.circles.some((/**\r\n         * @param {?} e\r\n         * @return {?}\r\n         */\r\n        e => e.isEqual(circle)));\r\n    }\r\n    /**\r\n     * @param {?} arrow\r\n     * @return {?}\r\n     */\r\n    containsArrow(arrow) {\r\n        return this.arrows.some((/**\r\n         * @param {?} e\r\n         * @return {?}\r\n         */\r\n        e => e.isEqual(arrow)));\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    clear() {\r\n        this._arrows = [];\r\n        this._circles = [];\r\n    }\r\n}\r\nif (false) {\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DrawProvider.prototype._circles;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DrawProvider.prototype._arrows;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/ngx-chess-board.component.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass NgxChessBoardComponent {\r\n    /**\r\n     * @param {?} ngxChessBoardService\r\n     */\r\n    constructor(ngxChessBoardService) {\r\n        this.ngxChessBoardService = ngxChessBoardService;\r\n        this._size = Constants.DEFAULT_SIZE;\r\n        this.darkTileColor = Constants.DEFAULT_DARK_TILE_COLOR;\r\n        this.lightTileColor = Constants.DEFAULT_LIGHT_TILE_COLOR;\r\n        this.showCoords = true;\r\n        this.dragDisabled = false;\r\n        this.drawDisabled = false;\r\n        this.onMove = new EventEmitter();\r\n        this.selected = false;\r\n        this.coords = new CoordsProvider();\r\n        this.disabling = false;\r\n        this.board = new Board();\r\n        this.boardLoader = new BoardLoader(this.board);\r\n        this.boardLoader.addPieces();\r\n        this.boardStateProvider = new BoardStateProvider();\r\n        this.moveHistoryProvider = new HistoryMoveProvider();\r\n        this.drawProvider = new DrawProvider();\r\n    }\r\n    /**\r\n     * @param {?} size\r\n     * @return {?}\r\n     */\r\n    set size(size) {\r\n        if (size && size >= Constants.MIN_BOARD_SIZE && size <= Constants.MAX_BOARD_SIZE) {\r\n            this._size = size;\r\n        }\r\n        else {\r\n            this._size = Constants.DEFAULT_SIZE;\r\n        }\r\n        this.drawProvider.clear();\r\n        this.calculatePieceSize();\r\n    }\r\n    /**\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    onRightClick(event) {\r\n        event.preventDefault();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnInit() {\r\n        this.ngxChessBoardService.componentMethodCalled$.subscribe((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            this.board.reset();\r\n        }));\r\n        this.calculatePieceSize();\r\n    }\r\n    /**\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    onMouseUp(event) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (event.which !== 1 && !this.drawDisabled) {\r\n                this.addDrawPoint(event.x, event.y);\r\n                return;\r\n            }\r\n            this.drawProvider.clear();\r\n            if (this.dragDisabled) {\r\n                return;\r\n            }\r\n            /** @type {?} */\r\n            let pointClicked = this.getClickPoint(event);\r\n            if (this.board.activePiece && pointClicked.isEqual(this.board.activePiece.point) && this.disabling) {\r\n                this.disableSelection();\r\n                this.disabling = false;\r\n                return;\r\n            }\r\n            if (this.selected) {\r\n                this.handleClickEvent(pointClicked);\r\n                //   this.possibleMoves = activePiece.getPossibleMoves();\r\n            }\r\n            else {\r\n                /** @type {?} */\r\n                let pieceClicked = this.getPieceByPoint(pointClicked.row, pointClicked.col);\r\n                if (pieceClicked) {\r\n                    if ((this.board.currentWhitePlayer && pieceClicked.color === Color.BLACK) || (!this.board.currentWhitePlayer && pieceClicked.color === Color.WHITE)) {\r\n                        return;\r\n                    }\r\n                    this.prepareActivePiece(pieceClicked, pointClicked);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    afterMoveActions() {\r\n        this.checkIfPawnFirstMove(this.board.activePiece);\r\n        this.checkIfRookMoved(this.board.activePiece);\r\n        this.checkIfKingMoved(this.board.activePiece);\r\n        this.board.blackKingChecked = this.board.isKingInCheck(Color.BLACK, this.board.pieces);\r\n        this.board.whiteKingChecked = this.board.isKingInCheck(Color.WHITE, this.board.pieces);\r\n        this.checkForPossibleMoves(Color.BLACK, 'Checkmate!');\r\n        this.checkForPossibleMoves(Color.WHITE, 'Checkmate!');\r\n        this.board.calculateFEN();\r\n        this.checkForPat(Color.BLACK);\r\n        this.checkForPat(Color.WHITE);\r\n        this.disabling = false;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    disableSelection() {\r\n        this.selected = false;\r\n        this.board.possibleCaptures = [];\r\n        this.board.activePiece = null;\r\n        this.board.possibleMoves = [];\r\n    }\r\n    /**\r\n     * @param {?} pieceClicked\r\n     * @param {?} pointClicked\r\n     * @return {?}\r\n     */\r\n    prepareActivePiece(pieceClicked, pointClicked) {\r\n        this.board.activePiece = pieceClicked;\r\n        this.selected = true;\r\n        this.board.possibleCaptures = new AvailableMoveDecorator(pieceClicked, pointClicked, this.board.currentWhitePlayer ? Color.WHITE : Color.BLACK, this.board).getPossibleCaptures();\r\n        this.board.possibleMoves = new AvailableMoveDecorator(pieceClicked, pointClicked, this.board.currentWhitePlayer ? Color.WHITE : Color.BLACK, this.board).getPossibleMoves();\r\n    }\r\n    /**\r\n     * @param {?} row\r\n     * @param {?} col\r\n     * @return {?}\r\n     */\r\n    getPieceByPoint(row, col) {\r\n        row = Math.floor(row);\r\n        col = Math.floor(col);\r\n        return this.board.pieces.find((/**\r\n         * @param {?} e\r\n         * @return {?}\r\n         */\r\n        e => e.point.col === col && e.point.row === row));\r\n    }\r\n    /**\r\n     * @param {?} piece\r\n     * @return {?}\r\n     */\r\n    isKingChecked(piece) {\r\n        if (piece instanceof King) {\r\n            return piece.color === Color.WHITE ? this.board.whiteKingChecked : this.board.blackKingChecked;\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    getClickPoint(event) {\r\n        return new Point(Math.floor((event.y - this.boardRef.nativeElement.getBoundingClientRect().top) / (this.boardRef.nativeElement.getBoundingClientRect().height / 8)), Math.floor((event.x - this.boardRef.nativeElement.getBoundingClientRect().left) / (this.boardRef.nativeElement.getBoundingClientRect().width / 8)));\r\n    }\r\n    /**\r\n     * @param {?} piece\r\n     * @param {?} newPoint\r\n     * @return {?}\r\n     */\r\n    movePiece(piece, newPoint) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this.moveHistoryProvider.addMove(new HistoryMove(MoveUtils.format(piece.point, newPoint, this.board.reverted), piece.constructor.name, piece.color === Color.WHITE ? 'white' : 'black'));\r\n            /** @type {?} */\r\n            let destPiece = this.board.pieces.find((/**\r\n             * @param {?} e\r\n             * @return {?}\r\n             */\r\n            e => e.point.col === newPoint.col && e.point.row === newPoint.row));\r\n            if (destPiece && piece.color != destPiece.color) {\r\n                this.board.pieces = this.board.pieces.filter((/**\r\n                 * @param {?} e\r\n                 * @return {?}\r\n                 */\r\n                e => e !== destPiece));\r\n            }\r\n            else if (destPiece && piece.color === destPiece.color) {\r\n                return;\r\n            }\r\n            if (piece instanceof King) {\r\n                /** @type {?} */\r\n                let squaresMoved = Math.abs(newPoint.col - piece.point.col);\r\n                if (squaresMoved > 1) {\r\n                    if (newPoint.col < 3) {\r\n                        /** @type {?} */\r\n                        let leftRook = this.board.getPieceByField(piece.point.row, 0);\r\n                        leftRook.point.col = 3;\r\n                    }\r\n                    else {\r\n                        /** @type {?} */\r\n                        let rightRook = this.board.getPieceByField(piece.point.row, 7);\r\n                        rightRook.point.col = 5;\r\n                    }\r\n                }\r\n            }\r\n            if (piece instanceof Pawn) {\r\n                this.checkIfPawnTakesEnPassant(newPoint);\r\n                this.checkIfPawnEnpassanted(piece, newPoint);\r\n            }\r\n            piece.point = newPoint;\r\n            this.increaseFullMoveCount();\r\n            this.board.currentWhitePlayer = !this.board.currentWhitePlayer;\r\n            return this.checkForPawnPromote(piece);\r\n        });\r\n    }\r\n    /**\r\n     * @param {?} piece\r\n     * @return {?}\r\n     */\r\n    checkIfPawnFirstMove(piece) {\r\n        if (piece instanceof Pawn) {\r\n            ((/** @type {?} */ (piece))).isMovedAlready = true;\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} piece\r\n     * @return {?}\r\n     */\r\n    checkIfRookMoved(piece) {\r\n        if (piece instanceof Rook) {\r\n            piece.isMovedAlready = true;\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} piece\r\n     * @return {?}\r\n     */\r\n    checkIfKingMoved(piece) {\r\n        if (piece instanceof King) {\r\n            piece.isMovedAlready = true;\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} piece\r\n     * @return {?}\r\n     */\r\n    checkForPawnPromote(piece) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (!(piece instanceof Pawn)) {\r\n                return;\r\n            }\r\n            if (piece.point.row === 0 || piece.point.row === 7) {\r\n                this.board.pieces = this.board.pieces.filter((/**\r\n                 * @param {?} e\r\n                 * @return {?}\r\n                 */\r\n                e => e !== piece));\r\n                this.openPromoteDialog(piece);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * @param {?} piece\r\n     * @return {?}\r\n     */\r\n    openPromoteDialog(piece) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this.modal.open((/**\r\n             * @param {?} index\r\n             * @return {?}\r\n             */\r\n            (index) => {\r\n                /** @type {?} */\r\n                let isWhite = piece.color === Color.WHITE;\r\n                switch (index) {\r\n                    case 1:\r\n                        this.board.pieces.push(new Queen(piece.point, piece.color, isWhite ? UnicodeConstants.WHITE_QUEEN : UnicodeConstants.BLACK_QUEEN, this.board));\r\n                        break;\r\n                    case 2:\r\n                        this.board.pieces.push(new Rook(piece.point, piece.color, isWhite ? UnicodeConstants.WHITE_ROOK : UnicodeConstants.BLACK_ROOK, this.board));\r\n                        break;\r\n                    case 3:\r\n                        this.board.pieces.push(new Bishop(piece.point, piece.color, isWhite ? UnicodeConstants.WHITE_BISHOP : UnicodeConstants.BLACK_BISHOP, this.board));\r\n                        break;\r\n                    case 4:\r\n                        this.board.pieces.push(new Knight(piece.point, piece.color, isWhite ? UnicodeConstants.WHITE_KNIGHT : UnicodeConstants.BLACK_KNIGHT, this.board));\r\n                        break;\r\n                    default:\r\n                        this.board.pieces.push(new Queen(piece.point, piece.color, isWhite ? UnicodeConstants.WHITE_QUEEN : UnicodeConstants.BLACK_QUEEN, this.board));\r\n                        break;\r\n                }\r\n                this.afterMoveActions();\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} color\r\n     * @param {?} text\r\n     * @return {?}\r\n     */\r\n    checkForPossibleMoves(color, text) {\r\n        if (!this.board.pieces.filter((/**\r\n         * @param {?} e\r\n         * @return {?}\r\n         */\r\n        e => e.color === color))\r\n            .some((/**\r\n         * @param {?} e\r\n         * @return {?}\r\n         */\r\n        e => e.getPossibleMoves().some((/**\r\n         * @param {?} f\r\n         * @return {?}\r\n         */\r\n        f => !MoveUtils.willMoveCauseCheck(color, e.point.row, e.point.col, f.row, f.col, this.board)))\r\n            || e.getPossibleCaptures().some((/**\r\n             * @param {?} f\r\n             * @return {?}\r\n             */\r\n            f => !MoveUtils.willMoveCauseCheck(color, e.point.row, e.point.col, f.row, f.col, this.board)))))) {\r\n            alert(text);\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} color\r\n     * @return {?}\r\n     */\r\n    checkForPat(color) {\r\n        if (color === Color.WHITE && !this.board.whiteKingChecked) {\r\n            this.checkForPossibleMoves(color, 'Stalemate!');\r\n        }\r\n        else if (color === Color.BLACK && !this.board.blackKingChecked) {\r\n            this.checkForPossibleMoves(color, 'Stalemate!');\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} piece\r\n     * @param {?} newPoint\r\n     * @return {?}\r\n     */\r\n    checkIfPawnEnpassanted(piece, newPoint) {\r\n        if (Math.abs(piece.point.row - newPoint.row) > 1) {\r\n            this.board.enPassantPiece = piece;\r\n            this.board.enPassantPoint = new Point((piece.point.row + newPoint.row) / 2, piece.point.col);\r\n        }\r\n        else {\r\n            this.board.enPassantPoint = null;\r\n            this.board.enPassantPiece = null;\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} newPoint\r\n     * @return {?}\r\n     */\r\n    checkIfPawnTakesEnPassant(newPoint) {\r\n        if (newPoint.isEqual(this.board.enPassantPoint)) {\r\n            this.board.pieces = this.board.pieces\r\n                .filter((/**\r\n             * @param {?} piece\r\n             * @return {?}\r\n             */\r\n            piece => piece !== this.board.enPassantPiece));\r\n            this.board.enPassantPoint = null;\r\n            this.board.enPassantPiece = null;\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    reset() {\r\n        this.boardStateProvider.clear();\r\n        this.moveHistoryProvider.clear();\r\n        this.boardLoader.addPieces();\r\n        this.board.reset();\r\n        this.coords.reset();\r\n        this.drawProvider.clear();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    reverse() {\r\n        this.selected = false;\r\n        this.board.reverse();\r\n        this.coords.reverse();\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    saveClone() {\r\n        /** @type {?} */\r\n        let clone = this.board.clone();\r\n        if (this.board.reverted) {\r\n            clone.reverse();\r\n        }\r\n        this.boardStateProvider.addMove(new BoardState(clone));\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    undo() {\r\n        if (!this.boardStateProvider.isEmpty()) {\r\n            /** @type {?} */\r\n            let lastBoard = this.boardStateProvider.pop().board;\r\n            if (this.board.reverted) {\r\n                lastBoard.reverse();\r\n            }\r\n            this.board = lastBoard;\r\n            this.boardLoader.setBoard(this.board);\r\n            this.board.possibleCaptures = [];\r\n            this.board.possibleMoves = [];\r\n            this.moveHistoryProvider.pop();\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getMoveHistory() {\r\n        return JSON.stringify(this.moveHistoryProvider.getAll());\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    calculatePieceSize() {\r\n        this.pieceSize = this._size / 10;\r\n    }\r\n    /**\r\n     * @param {?} fen\r\n     * @return {?}\r\n     */\r\n    setFEN(fen) {\r\n        try {\r\n            this.boardLoader.loadFEN(fen);\r\n        }\r\n        catch (e) {\r\n            this.boardLoader.addPieces();\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getFEN() {\r\n        return this.board.fen;\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    increaseFullMoveCount() {\r\n        if (!this.board.currentWhitePlayer) {\r\n            ++this.board.fullMoveCount;\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    dragEnded(event) {\r\n        event.source.reset();\r\n        event.source.element.nativeElement.style.zIndex = '0';\r\n        event.source.element.nativeElement.style.pointerEvents = 'auto';\r\n        event.source.element.nativeElement.style.touchAction = 'auto';\r\n    }\r\n    /**\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    dragStart(event) {\r\n        /** @type {?} */\r\n        let style = event.source.element.nativeElement.style;\r\n        style.position = 'relative';\r\n        style.zIndex = '1000';\r\n        style.touchAction = 'none';\r\n        style.pointerEvents = 'none';\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} pointClicked\r\n     * @return {?}\r\n     */\r\n    handleClickEvent(pointClicked) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (this.board.isPointInPossibleMoves(pointClicked) || this.board.isPointInPossibleCaptures(pointClicked)) {\r\n                this.saveClone();\r\n                this.board.lastMoveSrc = new Point(this.board.activePiece.point.row, this.board.activePiece.point.col);\r\n                this.board.lastMoveDest = pointClicked;\r\n                yield this.movePiece(this.board.activePiece, pointClicked);\r\n                this.afterMoveActions();\r\n                this.onMove.emit();\r\n            }\r\n            this.disableSelection();\r\n            /** @type {?} */\r\n            let pieceClicked = this.getPieceByPoint(pointClicked.row, pointClicked.col);\r\n            if (pieceClicked) {\r\n                if ((this.board.currentWhitePlayer && pieceClicked.color === Color.BLACK) || (!this.board.currentWhitePlayer && pieceClicked.color === Color.WHITE)) {\r\n                    return;\r\n                }\r\n                this.prepareActivePiece(pieceClicked, pointClicked);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    onMouseDown(event) {\r\n        if (event.which !== 1) {\r\n            this.drawPoint = this.getDrawingPoint(event.x, event.y);\r\n            return;\r\n        }\r\n        /** @type {?} */\r\n        let pointClicked = this.getClickPoint(event);\r\n        this.drawProvider.clear();\r\n        if (this.board.activePiece && pointClicked.isEqual(this.board.activePiece.point)) {\r\n            this.disabling = true;\r\n            return;\r\n        }\r\n        if (this.selected) {\r\n            this.handleClickEvent(pointClicked);\r\n            //   this.possibleMoves = activePiece.getPossibleMoves();\r\n        }\r\n        else {\r\n            /** @type {?} */\r\n            let pieceClicked = this.getPieceByPoint(pointClicked.row, pointClicked.col);\r\n            if (pieceClicked) {\r\n                if ((this.board.currentWhitePlayer && pieceClicked.color === Color.BLACK) || (!this.board.currentWhitePlayer && pieceClicked.color === Color.WHITE)) {\r\n                    return;\r\n                }\r\n                this.prepareActivePiece(pieceClicked, pointClicked);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} x\r\n     * @param {?} y\r\n     * @return {?}\r\n     */\r\n    getDrawingPoint(x, y) {\r\n        /** @type {?} */\r\n        let squareSize = this._size / 8;\r\n        /** @type {?} */\r\n        let xx = Math.floor((x - this.boardRef.nativeElement.getBoundingClientRect().left) / squareSize);\r\n        /** @type {?} */\r\n        let yy = Math.floor((y - this.boardRef.nativeElement.getBoundingClientRect().top) / squareSize);\r\n        return new DrawPoint(Math.floor(xx * squareSize + squareSize / 2), Math.floor(yy * squareSize + squareSize / 2));\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} x\r\n     * @param {?} y\r\n     * @return {?}\r\n     */\r\n    addDrawPoint(x, y) {\r\n        /** @type {?} */\r\n        let upPoint = this.getDrawingPoint(x, y);\r\n        if (this.drawPoint.isEqual(upPoint)) {\r\n            /** @type {?} */\r\n            let circle = new Circle();\r\n            circle.drawPoint = upPoint;\r\n            if (!this.drawProvider.containsCircle(circle)) {\r\n                this.drawProvider.addCircle(circle);\r\n            }\r\n        }\r\n        else {\r\n            /** @type {?} */\r\n            let arrow = new Arrow();\r\n            arrow.start = this.drawPoint;\r\n            arrow.end = upPoint;\r\n            if (!this.drawProvider.containsArrow(arrow)) {\r\n                this.drawProvider.addArrow(arrow);\r\n            }\r\n        }\r\n    }\r\n}\r\nNgxChessBoardComponent.decorators = [\r\n    { type: Component, args: [{\r\n                selector: 'ngx-chess-board',\r\n                template: \"<div id=\\\"board\\\" [style.height.px]=\\\"_size\\\" [style.width.px]=\\\"_size\\\" #boardRef (pointerdown)=\\\"onMouseDown($event)\\\"\\r\\n     (pointerup)=\\\"onMouseUp($event)\\\">\\r\\n  <div id=\\\"drag\\\">\\r\\n    <div *ngFor=\\\"let row of board.board; let i = index\\\" class=\\\"board-row\\\">\\r\\n      <div *ngFor=\\\"let col of row; let j = index\\\" class=\\\"board-col\\\"\\r\\n           [style.background-color]=\\\"((i + j) %2 === 0 ) ?  lightTileColor : darkTileColor\\\"\\r\\n           [ngClass]=\\\"[board.isXYInPointSelection(i,j) ? 'point-circle':'',board.isXYInActiveMove(i,j) ? 'current-selection':'' ,board.isXYInPossibleMoves(i,j) ? 'possible-point' : '', board.isXYInPossibleCaptures(i,j) ? 'possible-capture' : '',  isKingChecked(getPieceByPoint(i,j)) ? 'king-check' : '', board.isXYInSourceMove(i,j)?'source-move':'',board.isXYInDestMove(i,j)?'dest-move':'']\\\">\\r\\n        <span *ngIf=\\\"showCoords && j === 7\\\" class=\\\"yCoord\\\" [style.color]=\\\"(i % 2 === 0)? lightTileColor : darkTileColor\\\"\\r\\n              [style.font-size.px]=\\\"pieceSize / 4\\\">{{coords.yCoords[i]}}</span>\\r\\n        <span *ngIf=\\\"showCoords && i === 7\\\" class=\\\"xCoord\\\" [style.color]=\\\"(j % 2 === 0)? lightTileColor : darkTileColor\\\"\\r\\n              [style.font-size.px]=\\\"pieceSize / 4\\\">{{coords.xCoords[j]}}</span>\\r\\n        <div *ngIf=\\\"getPieceByPoint(i, j)\\\" style=\\\"height:100%; width:100%\\\">\\r\\n          <div cdkDrag\\r\\n               (cdkDragStarted)=\\\"dragStart($event)\\\"\\r\\n               (cdkDragEnded)=\\\"dragEnded($event)\\\"\\r\\n               [cdkDragDisabled]=\\\"dragDisabled\\\"\\r\\n               class=\\\"piece\\\" [style.font-size]=\\\"pieceSize + 'px'\\\" [innerHTML]=\\\"getPieceByPoint(i,j).image\\\">\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  <svg [attr.width]=\\\"_size\\\" [attr.height]=\\\"_size\\\" style=\\\"position:absolute;top:0; pointer-events: none\\\">\\r\\n\\r\\n    <defs>\\r\\n      <marker id=\\\"markerArrow\\\" style=\\\"marker-offset: 20px\\\" markerWidth=\\\"13\\\" markerHeight=\\\"13\\\" refX=\\\"10\\\" refY=\\\"6\\\"\\r\\n              orient=\\\"auto\\\">\\r\\n        <path d=\\\"M2,2 L2,11 L10,6 L2,2\\\" style=\\\"fill: #00ea0c;\\\"/>\\r\\n      </marker>\\r\\n    </defs>\\r\\n    <line [attr.x1]=\\\"arrow.start.x\\\" [attr.y1]=\\\"arrow.start.y\\\" [attr.x2]=\\\"arrow.end.x\\\" [attr.y2]=\\\"arrow.end.y\\\"\\r\\n          class=\\\"arrow\\\" *ngFor=\\\"let arrow of drawProvider.arrows\\\"/>\\r\\n\\r\\n    <circle [attr.cx]=\\\"circle.drawPoint.x\\\" [attr.cy]=\\\"circle.drawPoint.y\\\" [attr.r]=\\\"_size/18\\\" stroke=\\\"blueviolet\\\"\\r\\n            stroke-width=\\\"0.8\\\" fill-opacity=\\\"0.0\\\" *ngFor=\\\"let circle of drawProvider.circles\\\"/>\\r\\n  </svg>\\r\\n  <app-piece-promotion-modal #modal></app-piece-promotion-modal>\\r\\n\\r\\n</div>\\r\\n\",\r\n                styles: [\"@charset \\\"UTF-8\\\";#board{font-family:\\\"Courier New\\\",serif;position:relative}.board-row{display:block;width:100%;height:12.5%;position:relative}.board-col{position:relative;display:inline-block;width:12.5%;vertical-align:top;cursor:default;height:100%}.piece{height:100%;cursor:-webkit-grab;cursor:grab;width:100%;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-user-select:none;background-size:cover;justify-content:center;text-align:center;color:#000!important}.piece::after{content:\\\"\\u200B\\\"}#drag{height:100%;width:100%}.possible-point{border:3px solid #000;position:static;box-sizing:border-box}.possible-capture:hover,.possible-point:hover{opacity:.4}.possible-capture{border:3px solid #00ff2a;box-sizing:border-box}.king-check{border:3px solid red;box-sizing:border-box}.source-move{background-color:rgba(146,111,26,.79)!important}.dest-move{background-color:#b28e1a!important}.current-selection{background-color:#d3a91e!important}.yCoord{position:absolute;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-user-select:none;cursor:pointer;right:.2em;font-family:\\\"Lucida Console\\\",Courier,monospace;box-sizing:border-box}.xCoord{position:absolute;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-user-select:none;cursor:pointer;left:.2em;bottom:0;font-family:\\\"Lucida Console\\\",Courier,monospace;box-sizing:border-box}.hovering{background-color:red!important}.arrow{stroke:#00ea0c;stroke-width:2;marker-end:url(#markerArrow)}svg{-webkit-filter:drop-shadow(1px 1px 0 #111) drop-shadow(-1px 1px 0 #111) drop-shadow(1px -1px 0 #111) drop-shadow(-1px -1px 0 #111);filter:drop-shadow(1px 1px 0 #111) drop-shadow(-1px 1px 0 #111) drop-shadow(1px -1px 0 #111) drop-shadow(-1px -1px 0 #111)}\"]\r\n            }] }\r\n];\r\n/** @nocollapse */\r\nNgxChessBoardComponent.ctorParameters = () => [\r\n    { type: NgxChessBoardService }\r\n];\r\nNgxChessBoardComponent.propDecorators = {\r\n    size: [{ type: Input, args: ['size',] }],\r\n    onRightClick: [{ type: HostListener, args: ['contextmenu', ['$event'],] }],\r\n    darkTileColor: [{ type: Input, args: ['darkTileColor',] }],\r\n    lightTileColor: [{ type: Input, args: ['lightTileColor',] }],\r\n    showCoords: [{ type: Input, args: ['showCoords',] }],\r\n    dragDisabled: [{ type: Input, args: ['dragDisabled',] }],\r\n    drawDisabled: [{ type: Input, args: ['drawDisabled',] }],\r\n    onMove: [{ type: Output }],\r\n    boardRef: [{ type: ViewChild, args: ['boardRef', { static: false },] }],\r\n    modal: [{ type: ViewChild, args: ['modal', { static: false },] }]\r\n};\r\nif (false) {\r\n    /** @type {?} */\r\n    NgxChessBoardComponent.prototype._size;\r\n    /** @type {?} */\r\n    NgxChessBoardComponent.prototype.darkTileColor;\r\n    /** @type {?} */\r\n    NgxChessBoardComponent.prototype.lightTileColor;\r\n    /** @type {?} */\r\n    NgxChessBoardComponent.prototype.showCoords;\r\n    /** @type {?} */\r\n    NgxChessBoardComponent.prototype.dragDisabled;\r\n    /** @type {?} */\r\n    NgxChessBoardComponent.prototype.drawDisabled;\r\n    /** @type {?} */\r\n    NgxChessBoardComponent.prototype.onMove;\r\n    /** @type {?} */\r\n    NgxChessBoardComponent.prototype.pieceSize;\r\n    /** @type {?} */\r\n    NgxChessBoardComponent.prototype.selected;\r\n    /** @type {?} */\r\n    NgxChessBoardComponent.prototype.boardRef;\r\n    /** @type {?} */\r\n    NgxChessBoardComponent.prototype.modal;\r\n    /** @type {?} */\r\n    NgxChessBoardComponent.prototype.board;\r\n    /** @type {?} */\r\n    NgxChessBoardComponent.prototype.boardStateProvider;\r\n    /** @type {?} */\r\n    NgxChessBoardComponent.prototype.moveHistoryProvider;\r\n    /** @type {?} */\r\n    NgxChessBoardComponent.prototype.boardLoader;\r\n    /** @type {?} */\r\n    NgxChessBoardComponent.prototype.coords;\r\n    /** @type {?} */\r\n    NgxChessBoardComponent.prototype.disabling;\r\n    /** @type {?} */\r\n    NgxChessBoardComponent.prototype.drawProvider;\r\n    /** @type {?} */\r\n    NgxChessBoardComponent.prototype.drawPoint;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    NgxChessBoardComponent.prototype.ngxChessBoardService;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/ngx-chess-board.module.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass NgxChessBoardModule {\r\n    /**\r\n     * @return {?}\r\n     */\r\n    static forRoot() {\r\n        return {\r\n            ngModule: NgxChessBoardModule,\r\n            providers: [NgxChessBoardService]\r\n        };\r\n    }\r\n}\r\nNgxChessBoardModule.decorators = [\r\n    { type: NgModule, args: [{\r\n                declarations: [NgxChessBoardComponent, PiecePromotionModalComponent],\r\n                imports: [\r\n                    CommonModule,\r\n                    DragDropModule,\r\n                ],\r\n                exports: [NgxChessBoardComponent]\r\n            },] }\r\n];\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/ngx-chess-board-view.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @record\r\n */\r\nfunction NgxChessBoardView() { }\r\nif (false) {\r\n    /**\r\n     * @return {?}\r\n     */\r\n    NgxChessBoardView.prototype.reset = function () { };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    NgxChessBoardView.prototype.reverse = function () { };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    NgxChessBoardView.prototype.undo = function () { };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    NgxChessBoardView.prototype.getMoveHistory = function () { };\r\n    /**\r\n     * @param {?} fen\r\n     * @return {?}\r\n     */\r\n    NgxChessBoardView.prototype.setFEN = function (fen) { };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    NgxChessBoardView.prototype.getFEN = function () { };\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: public-api.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: ngx-chess-board.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\nexport { NgxChessBoardModule, NgxChessBoardService, NgxChessBoardComponent as ɵa, PiecePromotionModalComponent as ɵb };\n//# sourceMappingURL=ngx-chess-board.js.map\n","export default \"<div style=\\\"width:400px; margin-left: auto; margin-right: auto\\\">\\r\\n  <h2 style=\\\"text-align: center\\\">ngx-chess-board example</h2>\\r\\n  <ngx-chess-board #board [size]=\\\"size\\\" [lightTileColor]=\\\"lightTileColor\\\" (onMove)=\\\"moveCallback()\\\"\\r\\n                   [dragDisabled]=\\\"dragDisabled\\\"\\r\\n                   [drawDisabled]=\\\"drawDisabled\\\"\\r\\n                   [darkTileColor]=\\\"darkTileColor\\\"></ngx-chess-board>\\r\\n  <!--<ngx-chess-board></ngx-chess-board> You can also use it like this  -->\\r\\n  <hr>\\r\\n  <label for=\\\"lightTile\\\">Light tile color:</label>\\r\\n  <div class=\\\"input-group\\\">\\r\\n    <div class=\\\"input-group-prepend\\\">\\r\\n      <span class=\\\"input-group-text\\\" id=\\\"basic-addon3\\\" [style.background-color]=\\\"lightTileColor\\\"></span>\\r\\n    </div>\\r\\n    <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"blue\\\" [(ngModel)]=\\\"lightTileColor\\\" id=\\\"lightTile\\\"\\r\\n           aria-describedby=\\\"basic-addon3\\\">\\r\\n  </div>\\r\\n  <br>\\r\\n  <label for=\\\"darkTile\\\">Dark tile color:</label>\\r\\n  <div class=\\\"input-group\\\">\\r\\n    <div class=\\\"input-group-prepend\\\">\\r\\n      <span class=\\\"input-group-text\\\" id=\\\"darkTileSpan\\\" [style.background-color]=\\\"darkTileColor\\\"></span>\\r\\n    </div>\\r\\n    <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"blue\\\" [(ngModel)]=\\\"darkTileColor\\\" id=\\\"darkTile\\\"\\r\\n           aria-describedby=\\\"basic-addon3\\\">\\r\\n  </div>\\r\\n\\r\\n  <br>\\r\\n  <label for=\\\"size\\\">Size:</label>\\r\\n  <div class=\\\"input-group\\\">\\r\\n    <input type=\\\"number\\\" class=\\\"form-control\\\" placeholder=\\\"Between 100 and 4000\\\" [(ngModel)]=\\\"size\\\" id=\\\"size\\\"\\r\\n           aria-describedby=\\\"basic-addon3\\\">\\r\\n    <div class=\\\"input-group-append\\\">\\r\\n      <span class=\\\"input-group-text\\\">px</span>\\r\\n    </div>\\r\\n  </div>\\r\\n  <br>\\r\\n\\r\\n  <div style=\\\"display:flex;\\\">\\r\\n    <button type=\\\"button\\\" class=\\\"btn btn-primary\\\"\\r\\n            style=\\\"margin-left:auto; margin-right: 10px\\\" (click)=\\\"reset()\\\">Reset\\r\\n    </button>\\r\\n\\r\\n    <button type=\\\"button\\\" class=\\\"btn btn-warning\\\"\\r\\n            style=\\\"margin-right: 10px\\\" (click)=\\\"reverse()\\\">Reverse\\r\\n    </button>\\r\\n\\r\\n    <button type=\\\"button\\\" class=\\\"btn btn-info\\\"\\r\\n            style=\\\"margin-right: 10px\\\" (click)=\\\"undo()\\\">Undo\\r\\n    </button>\\r\\n\\r\\n    <button type=\\\"button\\\" class=\\\"btn btn-success\\\"\\r\\n            style=\\\"margin-right:auto\\\" (click)=\\\"showMoveHistory()\\\">Display moves\\r\\n    </button>\\r\\n  </div>\\r\\n\\r\\n  <label class=\\\"switch mt-3\\\">\\r\\n    <input type=\\\"checkbox\\\" checked (click)=\\\"switchDrag()\\\">\\r\\n    <span class=\\\"slider round\\\"></span>\\r\\n  </label>\\r\\n  Piece dragging is {{ dragDisabled ? 'OFF' : 'ON'}}\\r\\n  <br>\\r\\n  <label class=\\\"switch mt-3\\\">\\r\\n    <input type=\\\"checkbox\\\" checked (click)=\\\"switchDraw()\\\">\\r\\n    <span class=\\\"slider round\\\"></span>\\r\\n  </label>\\r\\n  Drawing with right mouse button is {{ drawDisabled ? 'OFF' : 'ON'}}\\r\\n  <hr style=\\\"border-color: gray\\\">\\r\\n\\r\\n  <div class=\\\"form-group input-group-sm\\\">\\r\\n    <label for=\\\"fen\\\">FEN</label>\\r\\n    <input type=\\\"text\\\" class=\\\"form-control  form-control-lg\\\" id=\\\"fen\\\" aria-describedby=\\\"fen\\\" [(ngModel)]=\\\"fen\\\"\\r\\n           placeholder=\\\"FEN\\\">\\r\\n  </div>\\r\\n\\r\\n  <div style=\\\"display:flex;\\\">\\r\\n    <button type=\\\"button\\\" class=\\\"btn btn-success\\\"\\r\\n            style=\\\"margin-left:auto; margin-right: 10px\\\" (click)=\\\"setFen()\\\">Set FEN\\r\\n    </button>\\r\\n\\r\\n    <button type=\\\"button\\\" class=\\\"btn btn-info\\\"\\r\\n            style=\\\"margin-right:auto\\\" (click)=\\\"getFEN()\\\">Show FEN\\r\\n    </button>\\r\\n  </div>\\r\\n\\r\\n</div>\\r\\n\\r\\n\"","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","export default \".switch {\\n  position: relative;\\n  display: inline-block;\\n  width: 50px;\\n  height: 24px;\\n}\\n\\n/* Hide default HTML checkbox */\\n\\n.switch input {\\n  opacity: 0;\\n  width: 0;\\n  height: 0;\\n}\\n\\n/* The slider */\\n\\n.slider {\\n  position: absolute;\\n  cursor: pointer;\\n  top: 0;\\n  left: 0;\\n  right: 0;\\n  bottom: 0;\\n  background-color: #ccc;\\n  transition: 0.4s;\\n}\\n\\n.slider:before {\\n  position: absolute;\\n  content: \\\"\\\";\\n  height: 16px;\\n  width: 16px;\\n  left: 6px;\\n  bottom: 4px;\\n  background-color: white;\\n  transition: 0.4s;\\n}\\n\\ninput:checked + .slider {\\n  background-color: #2196F3;\\n}\\n\\ninput:focus + .slider {\\n  box-shadow: 0 0 1px #2196F3;\\n}\\n\\ninput:checked + .slider:before {\\n  transform: translateX(26px);\\n}\\n\\n/* Rounded sliders */\\n\\n.slider.round {\\n  border-radius: 34px;\\n}\\n\\n.slider.round:before {\\n  border-radius: 50%;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvQzpcXFVzZXJzXFxLb21wdXRlclxcRGVza3RvcFxcTm93eSBmb2xkZXJcXGNoZXNzLWJvYXJkL3NyY1xcYXBwXFxhcHAuY29tcG9uZW50LnNjc3MiLCJzcmMvYXBwL2FwcC5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGtCQUFBO0VBQ0EscUJBQUE7RUFDQSxXQUFBO0VBQ0EsWUFBQTtBQ0NGOztBREVBLCtCQUFBOztBQUNBO0VBQ0UsVUFBQTtFQUNBLFFBQUE7RUFDQSxTQUFBO0FDQ0Y7O0FERUEsZUFBQTs7QUFDQTtFQUNFLGtCQUFBO0VBQ0EsZUFBQTtFQUNBLE1BQUE7RUFDQSxPQUFBO0VBQ0EsUUFBQTtFQUNBLFNBQUE7RUFDQSxzQkFBQTtFQUVBLGdCQUFBO0FDQ0Y7O0FERUE7RUFDRSxrQkFBQTtFQUNBLFdBQUE7RUFDQSxZQUFBO0VBQ0EsV0FBQTtFQUNBLFNBQUE7RUFDQSxXQUFBO0VBQ0EsdUJBQUE7RUFFQSxnQkFBQTtBQ0NGOztBREVBO0VBQ0UseUJBQUE7QUNDRjs7QURFQTtFQUNFLDJCQUFBO0FDQ0Y7O0FERUE7RUFHRSwyQkFBQTtBQ0NGOztBREVBLG9CQUFBOztBQUNBO0VBQ0UsbUJBQUE7QUNDRjs7QURFQTtFQUNFLGtCQUFBO0FDQ0YiLCJmaWxlIjoic3JjL2FwcC9hcHAuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuc3dpdGNoIHtcclxuICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gIHdpZHRoOiA1MHB4O1xyXG4gIGhlaWdodDogMjRweDtcclxufVxyXG5cclxuLyogSGlkZSBkZWZhdWx0IEhUTUwgY2hlY2tib3ggKi9cclxuLnN3aXRjaCBpbnB1dCB7XHJcbiAgb3BhY2l0eTogMDtcclxuICB3aWR0aDogMDtcclxuICBoZWlnaHQ6IDA7XHJcbn1cclxuXHJcbi8qIFRoZSBzbGlkZXIgKi9cclxuLnNsaWRlciB7XHJcbiAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gIGN1cnNvcjogcG9pbnRlcjtcclxuICB0b3A6IDA7XHJcbiAgbGVmdDogMDtcclxuICByaWdodDogMDtcclxuICBib3R0b206IDA7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogI2NjYztcclxuICAtd2Via2l0LXRyYW5zaXRpb246IC40cztcclxuICB0cmFuc2l0aW9uOiAuNHM7XHJcbn1cclxuXHJcbi5zbGlkZXI6YmVmb3JlIHtcclxuICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgY29udGVudDogXCJcIjtcclxuICBoZWlnaHQ6IDE2cHg7XHJcbiAgd2lkdGg6IDE2cHg7XHJcbiAgbGVmdDogNnB4O1xyXG4gIGJvdHRvbTogNHB4O1xyXG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xyXG4gIC13ZWJraXQtdHJhbnNpdGlvbjogLjRzO1xyXG4gIHRyYW5zaXRpb246IC40cztcclxufVxyXG5cclxuaW5wdXQ6Y2hlY2tlZCArIC5zbGlkZXIge1xyXG4gIGJhY2tncm91bmQtY29sb3I6ICMyMTk2RjM7XHJcbn1cclxuXHJcbmlucHV0OmZvY3VzICsgLnNsaWRlciB7XHJcbiAgYm94LXNoYWRvdzogMCAwIDFweCAjMjE5NkYzO1xyXG59XHJcblxyXG5pbnB1dDpjaGVja2VkICsgLnNsaWRlcjpiZWZvcmUge1xyXG4gIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDI2cHgpO1xyXG4gIC1tcy10cmFuc2Zvcm06IHRyYW5zbGF0ZVgoMjZweCk7XHJcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDI2cHgpO1xyXG59XHJcblxyXG4vKiBSb3VuZGVkIHNsaWRlcnMgKi9cclxuLnNsaWRlci5yb3VuZCB7XHJcbiAgYm9yZGVyLXJhZGl1czogMzRweDtcclxufVxyXG5cclxuLnNsaWRlci5yb3VuZDpiZWZvcmUge1xyXG4gIGJvcmRlci1yYWRpdXM6IDUwJTtcclxufVxyXG4iLCIuc3dpdGNoIHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIHdpZHRoOiA1MHB4O1xuICBoZWlnaHQ6IDI0cHg7XG59XG5cbi8qIEhpZGUgZGVmYXVsdCBIVE1MIGNoZWNrYm94ICovXG4uc3dpdGNoIGlucHV0IHtcbiAgb3BhY2l0eTogMDtcbiAgd2lkdGg6IDA7XG4gIGhlaWdodDogMDtcbn1cblxuLyogVGhlIHNsaWRlciAqL1xuLnNsaWRlciB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICB0b3A6IDA7XG4gIGxlZnQ6IDA7XG4gIHJpZ2h0OiAwO1xuICBib3R0b206IDA7XG4gIGJhY2tncm91bmQtY29sb3I6ICNjY2M7XG4gIC13ZWJraXQtdHJhbnNpdGlvbjogMC40cztcbiAgdHJhbnNpdGlvbjogMC40cztcbn1cblxuLnNsaWRlcjpiZWZvcmUge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIGNvbnRlbnQ6IFwiXCI7XG4gIGhlaWdodDogMTZweDtcbiAgd2lkdGg6IDE2cHg7XG4gIGxlZnQ6IDZweDtcbiAgYm90dG9tOiA0cHg7XG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICAtd2Via2l0LXRyYW5zaXRpb246IDAuNHM7XG4gIHRyYW5zaXRpb246IDAuNHM7XG59XG5cbmlucHV0OmNoZWNrZWQgKyAuc2xpZGVyIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzIxOTZGMztcbn1cblxuaW5wdXQ6Zm9jdXMgKyAuc2xpZGVyIHtcbiAgYm94LXNoYWRvdzogMCAwIDFweCAjMjE5NkYzO1xufVxuXG5pbnB1dDpjaGVja2VkICsgLnNsaWRlcjpiZWZvcmUge1xuICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlWCgyNnB4KTtcbiAgLW1zLXRyYW5zZm9ybTogdHJhbnNsYXRlWCgyNnB4KTtcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDI2cHgpO1xufVxuXG4vKiBSb3VuZGVkIHNsaWRlcnMgKi9cbi5zbGlkZXIucm91bmQge1xuICBib3JkZXItcmFkaXVzOiAzNHB4O1xufVxuXG4uc2xpZGVyLnJvdW5kOmJlZm9yZSB7XG4gIGJvcmRlci1yYWRpdXM6IDUwJTtcbn0iXX0= */\"","import {Component, ViewChild} from '@angular/core';\r\nimport {NgxChessBoardService} from 'ngx-chess-board';\r\nimport {NgxChessBoardView} from 'ngx-chess-board';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent {\r\n  title = 'ngx-chess-board demo';\r\n\r\n  darkTileColor: string = 'rgb(97, 84, 61)';\r\n  lightTileColor: string = '#BAA378';\r\n  size: number = 400;\r\n  fen = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1';\r\n\r\n  @ViewChild('board', {static: false}) board: NgxChessBoardView;\r\n\r\n  dragDisabled: boolean = false;\r\n  drawDisabled: boolean = false;\r\n\r\n  constructor(private ngxService: NgxChessBoardService) {\r\n  }\r\n\r\n  reset() {\r\n    alert('Resetting game');\r\n    this.board.reset();\r\n    this.fen = this.board.getFEN();\r\n  }\r\n\r\n  reverse() {\r\n    alert('Reverting board');\r\n    this.board.reverse();\r\n  }\r\n\r\n  undo() {\r\n    this.board.undo();\r\n    this.fen = this.board.getFEN();\r\n  }\r\n\r\n  showMoveHistory() {\r\n    alert(this.board.getMoveHistory());\r\n  }\r\n\r\n  setFen() {\r\n    alert('Setting FEN');\r\n    this.board.setFEN(this.fen);\r\n  }\r\n\r\n  getFEN() {\r\n    let fen = this.board.getFEN();\r\n    alert(fen);\r\n  }\r\n\r\n  moveCallback() {\r\n    this.fen = this.board.getFEN();\r\n  }\r\n\r\n  switchDrag() {\r\n    this.dragDisabled = !this.dragDisabled;\r\n  }\r\n\r\n  switchDraw() {\r\n    this.drawDisabled = !this.drawDisabled;\r\n  }\r\n}\r\n","import {BrowserModule} from '@angular/platform-browser';\r\nimport {NgModule} from '@angular/core';\r\n\r\nimport {AppComponent} from './app.component';\r\nimport {NgxChessBoardModule} from 'ngx-chess-board';\r\nimport {FormsModule} from '@angular/forms';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    FormsModule,\r\n    NgxChessBoardModule.forRoot()\r\n  ],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule {\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"],"sourceRoot":"webpack:///","file":"main-es5.js"}