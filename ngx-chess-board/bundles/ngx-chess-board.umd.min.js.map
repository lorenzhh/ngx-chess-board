{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://ngx-chess-board/lib/models/pieces/color.ts","ng://ngx-chess-board/lib/models/pieces/piece.ts","ng://ngx-chess-board/lib/models/pieces/point.ts","ng://ngx-chess-board/lib/models/pieces/rook.ts","ng://ngx-chess-board/lib/models/pieces/king.ts","ng://ngx-chess-board/lib/utils/unicode-constants.ts","ng://ngx-chess-board/lib/models/pieces/queen.ts","ng://ngx-chess-board/lib/models/pieces/pawn.ts","ng://ngx-chess-board/lib/models/pieces/knight.ts","ng://ngx-chess-board/lib/models/pieces/bishop.ts","ng://ngx-chess-board/lib/models/board.ts","ng://ngx-chess-board/lib/utils/move-utils.ts","ng://ngx-chess-board/lib/service/ngx-chess-board.service.ts","ng://ngx-chess-board/lib/piece-decorator/piece-abstract-decorator.ts","ng://ngx-chess-board/lib/piece-decorator/available-move-decorator.ts","ng://ngx-chess-board/lib/board-state-provider/board-state-provider.ts","ng://ngx-chess-board/lib/board-state-provider/board-state.ts","ng://ngx-chess-board/lib/history-move-provider/history-move.ts","ng://ngx-chess-board/lib/history-move-provider/history-move-provider.ts","ng://ngx-chess-board/lib/utils/constants.ts","ng://ngx-chess-board/lib/coords/coords-provider.ts","ng://ngx-chess-board/lib/board-state-provider/board-loader.ts","ng://ngx-chess-board/lib/piece-promotion-modal/piece-promotion-modal.component.ts","ng://ngx-chess-board/lib/drawing-tools/arrow.ts","ng://ngx-chess-board/lib/drawing-tools/draw-point.ts","ng://ngx-chess-board/lib/drawing-tools/circle.ts","ng://ngx-chess-board/lib/drawing-tools/draw-provider.ts","ng://ngx-chess-board/lib/ngx-chess-board.component.ts","ng://ngx-chess-board/lib/ngx-chess-board.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","__generator","body","f","y","t","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","n","v","op","TypeError","call","pop","length","push","Color","WHITE","BLACK","point","color","image","relValue","board","checkPoints","Point","row","col","isEqual","that","hasCoordsEqual","Rook","_super","_this","isMovedAlready","tslib_1.__extends","getPossibleMoves","possiblePoints","i","isFieldEmpty","j","getPossibleCaptures","isFieldTakenByEnemy","getCoveredFields","getPieceByField","King","Piece","castledAlready","shortCastled","longCastled","isCastling","isFieldUnderAttack","longCastlePossible","leftRook","shortCastlePossible","rightRook","UnicodeConstants","WHITE_KING","WHITE_QUEEN","WHITE_KNIGHT","WHITE_ROOK","WHITE_PAWN","WHITE_BISHOP","BLACK_KING","BLACK_QUEEN","BLACK_KNIGHT","BLACK_ROOK","BLACK_PAWN","BLACK_BISHOP","Queen","Pawn","reverted","enPassantPoint","enPassantPiece","Math","abs","Knight","Bishop","Board","pieces","lastMoveSrc","lastMoveDest","possibleCaptures","possibleMoves","currentWhitePlayer","fullMoveCount","isXYInPossibleMoves","some","isXYInPossibleCaptures","isXYInSourceMove","isXYInDestMove","isXYInActiveMove","activePiece","isPointInPossibleMoves","isPointInPossibleCaptures","reset","whiteKingChecked","blackKingChecked","calculateFEN","reverse","reversePoint","clone","cloneDeep","enemyColor","filter","find","isKingInCheck","piece","king","getKingByColor","getCastleFENString","fen","split","sort","join","toUpperCase","getEnPassantFENString","String","fromCharCode","emptyFields","this_1","substr","concatedEnPassant","isXYInPointSelection","MoveUtils","willMoveCauseCheck","currentColor","destRow","destCol","srcPiece","destPiece","isBound","format","sourcePoint","destPoint","sourceX","destX","NgxChessBoardService","componentMethodCallSource","Subject","componentMethodCalled$","asObservable","Injectable","args","providedIn","AvailableMoveDecorator","pointClicked","PieceAbstractDecorator","BoardStateProvider","moves","addMove","moveHistory","getMoves","isEmpty","clear","BoardState","HistoryMove","move","HistoryMoveProvider","historyMoves","historyMove","getAll","Constants","DEFAULT_DARK_TILE_COLOR","DEFAULT_LIGHT_TILE_COLOR","DEFAULT_SIZE","MIN_BOARD_SIZE","MAX_BOARD_SIZE","CoordsProvider","_xCoords","_yCoords","defineProperty","init","BoardLoader","addPieces","loadFEN","Error","pointer","chunk","charAt","match","Number","pawn","setCurrentPlayer","setCastles","setEnPassant","setFullMoveCount","setBoard","castleChunk","includes","setRookAlreadyMoved","PiecePromotionModalComponent","selectedIndex","open","closeCallback","onCloseCallback","modal","nativeElement","style","display","close","changeSelection","index","Component","selector","template","ViewChild","static","Arrow","arrow","start","end","DrawPoint","x","Circle","circle","drawPoint","DrawProvider","_arrows","_circles","addCircle","circles","addArrow","arrows","containsCircle","containsArrow","NgxChessBoardComponent","ngxChessBoardService","_size","darkTileColor","lightTileColor","showCoords","dragDisabled","drawDisabled","onMove","EventEmitter","selected","coords","disabling","boardLoader","boardStateProvider","moveHistoryProvider","drawProvider","size","calculatePieceSize","onRightClick","event","preventDefault","ngOnInit","subscribe","onMouseUp","which","addDrawPoint","getClickPoint","disableSelection","handleClickEvent","pieceClicked","getPieceByPoint","prepareActivePiece","afterMoveActions","checkIfPawnFirstMove","checkIfRookMoved","checkIfKingMoved","checkForPossibleMoves","checkForPat","floor","isKingChecked","boardRef","getBoundingClientRect","top","height","left","width","movePiece","newPoint","name","checkIfPawnTakesEnPassant","checkIfPawnEnpassanted","increaseFullMoveCount","checkForPawnPromote","openPromoteDialog","isWhite","text","alert","saveClone","undo","lastBoard","getMoveHistory","JSON","stringify","pieceSize","setFEN","getFEN","dragEnded","source","element","zIndex","pointerEvents","touchAction","dragStart","position","_a","emit","onMouseDown","getDrawingPoint","squareSize","xx","yy","upPoint","Input","HostListener","Output","NgxChessBoardModule","forRoot","ngModule","providers","NgModule","declarations","imports","CommonModule","DragDropModule","exports"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","export enum Color{\r\n    WHITE,\r\n    BLACK\r\n}","import {Point} from './point';\r\nimport {Color} from './color';\r\nimport {AbstractPiece} from '../../piece-decorator/abstract-piece';\r\nimport {Board} from '../board';\r\n\r\nexport abstract class Piece implements AbstractPiece {\r\n  point: Point;\r\n  color: Color;\r\n  image: string;\r\n  checkPoints: Point[] = [];\r\n  relValue: number;\r\n  board: Board;\r\n\r\n  constructor(point: Point, color: Color, image: string, relValue: number, board: Board) {\r\n    this.color = color;\r\n    this.image = image;\r\n    this.point = point;\r\n    this.relValue = relValue;\r\n    this.board = board;\r\n  }\r\n\r\n  abstract getPossibleMoves(): Point[];\r\n\r\n  abstract getPossibleCaptures(): Point[];\r\n\r\n  abstract getCoveredFields(): Point[]; // zwraca liste punktow ktore sa puste lub istnieje na nich pionek tego samego koloru\r\n\r\n}\r\n","export class Point {\r\n  row: number;\r\n  col: number;\r\n\r\n  constructor(row: number, col: number) {\r\n    this.row = row;\r\n    this.col = col;\r\n  }\r\n\r\n  isEqual(that: Point) {\r\n    return that && this.row === that.row && this.col === that.col;\r\n  }\r\n\r\n  hasCoordsEqual(row: number, col: number) {\r\n    return row && col && this.row === row && this.col === col;\r\n  }\r\n}\r\n\r\n","import { Piece } from './piece';\r\nimport { Color } from './color';\r\nimport { Point } from './point';\r\nimport { King } from './king';\r\nimport {Board} from '../board';\r\n\r\nexport class Rook extends Piece {\r\n\r\n  isMovedAlready = false;\r\n\r\n  constructor(point: Point, color: Color, image: string, board: Board) {\r\n        super(point, color, image, 5, board);\r\n    }\r\n\r\n    getPossibleMoves(): Point[] {\r\n        let possiblePoints = [];\r\n\r\n        let row = this.point.row;\r\n        let col = this.point.col;\r\n\r\n        for (let i = row + 1; i < 8; ++i) { // dol\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1; i >= 0; --i) { // gora\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let j = col - 1; j >= 0; --j) { // lewo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let j = col + 1; j < 8; ++j) { // prawo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n    getPossibleCaptures(): Point[] {\r\n        let possiblePoints = [];\r\n\r\n        let row = this.point.row;\r\n        let col = this.point.col;\r\n\r\n        for (let i = row + 1; i < 8; ++i) { // dol\r\n            if (this.board.isFieldTakenByEnemy(i, col, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n                possiblePoints.push(new Point(i, col));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, col)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1; i >= 0; --i) { // gora\r\n            if (this.board.isFieldTakenByEnemy(i, col, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n                possiblePoints.push(new Point(i, col));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, col)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let j = col - 1; j >= 0; --j) { // lewo\r\n            if (this.board.isFieldTakenByEnemy(row, j, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n                possiblePoints.push(new Point(row,j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(row,j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let j = col + 1; j < 8; ++j) { // prawo\r\n            if (this.board.isFieldTakenByEnemy(row, j, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n                possiblePoints.push(new Point(row, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(row, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n\r\n    getCoveredFields(): Point[] {\r\n        let possiblePoints = [];\r\n\r\n        let row = this.point.row;\r\n        let col = this.point.col;\r\n\r\n        for (let i = row + 1; i < 8; ++i) { // dol\r\n            if (this.board.isFieldEmpty(i, col)){\r\n                possiblePoints.push(new Point(i, col));\r\n            } else {\r\n                if (!(this.board.getPieceByField instanceof King)) {\r\n                    possiblePoints.push(new Point(i, col));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1; i >= 0; --i) { // gora\r\n            if (this.board.isFieldEmpty(i, col)){\r\n                possiblePoints.push(new Point(i, col));\r\n            } else {\r\n                if (!(this.board.getPieceByField instanceof King)) {\r\n                    possiblePoints.push(new Point(i, col));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let j = col - 1; j >= 0; --j) { // lewo\r\n            if (this.board.isFieldEmpty(row, j)){\r\n                possiblePoints.push(new Point(row, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField instanceof King)) {\r\n                    possiblePoints.push(new Point(row, j));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let j = col + 1; j < 8; ++j) { // prawo\r\n            if (this.board.isFieldEmpty(row, j)){\r\n                possiblePoints.push(new Point(row, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField instanceof King)) {\r\n                    possiblePoints.push(new Point(row, j));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n}\r\n","import {Piece} from './piece';\r\nimport {Color} from './color';\r\nimport {Point} from './point';\r\nimport {Rook} from \"./rook\";\r\nimport {Board} from '../board';\r\n\r\nexport class King extends Piece {\r\n\r\n  castledAlready = false;\r\n  shortCastled = false;\r\n  longCastled = false;\r\n  isMovedAlready;\r\n  isCastling = false;\r\n\r\n  constructor(point: Point, color: Color, image: string, board: Board) {\r\n    super(point, color, image, 0, board);\r\n  }\r\n\r\n  getPossibleMoves(): Point[] {\r\n    let possiblePoints = [];\r\n\r\n    let row = this.point.row;\r\n    let col = this.point.col;\r\n    // lewo\r\n    if (this.board.isFieldEmpty(row, col - 1) && !this.board.isFieldUnderAttack(row, col - 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n      possiblePoints.push(new Point(row, col - 1));\r\n    }\r\n\r\n    // prawo\r\n    if (this.board.isFieldEmpty(row, col + 1) && !this.board.isFieldUnderAttack(row, col + 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n      possiblePoints.push(new Point(row, col + 1));\r\n    }\r\n\r\n    // dol\r\n    if (this.board.isFieldEmpty(row + 1, col) && !this.board.isFieldUnderAttack(row + 1, col, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n      possiblePoints.push(new Point(row + 1, col));\r\n    }\r\n\r\n    // gora\r\n    if (this.board.isFieldEmpty(row - 1, col) && !this.board.isFieldUnderAttack(row - 1, col, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n      possiblePoints.push(new Point(row - 1, col));\r\n    }\r\n\r\n    // lewo gora\r\n    if (this.board.isFieldEmpty(row - 1, col - 1) && !this.board.isFieldUnderAttack(row - 1, col - 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n      possiblePoints.push(new Point(row - 1, col - 1));\r\n    }\r\n    // prawo gora\r\n    if (this.board.isFieldEmpty(row - 1, col + 1) && !this.board.isFieldUnderAttack(row - 1, col + 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n      possiblePoints.push(new Point(row - 1, col + 1));\r\n    }\r\n\r\n    // lewo dol\r\n    if (this.board.isFieldEmpty(row + 1, col - 1) && !this.board.isFieldUnderAttack(row + 1, col - 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n      possiblePoints.push(new Point(row + 1, col - 1));\r\n    }\r\n    // prawo dol\r\n    if (this.board.isFieldEmpty(row + 1, col + 1) && !this.board.isFieldUnderAttack(row + 1, col + 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n      possiblePoints.push(new Point(row + 1, col + 1));\r\n    }\r\n\r\n    if(!this.isMovedAlready){\r\n      let longCastlePossible = true;\r\n      for (let i = col - 1; i > 0; --i) {\r\n        if (!this.board.isFieldEmpty(row, i) || this.board.isFieldUnderAttack(row, i, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n          longCastlePossible = false;\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (longCastlePossible && this.board.getPieceByField(row, 0)) {\r\n        let leftRook = this.board.getPieceByField(row, 0);\r\n        if (leftRook instanceof Rook) {\r\n          if (!leftRook.isMovedAlready) {\r\n            possiblePoints.push(new Point(row, col - 2));\r\n          }\r\n        }\r\n      }\r\n\r\n      let shortCastlePossible = true;\r\n      for (let i = col + 1; i < 7; ++i) {\r\n        if (!this.board.isFieldEmpty(row, i) || this.board.isFieldUnderAttack(row, i, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n          shortCastlePossible = false;\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (shortCastlePossible && this.board.getPieceByField(row, 7)) {\r\n        let rightRook = this.board.getPieceByField(row, 7);\r\n        if (rightRook instanceof Rook) {\r\n          if (!rightRook.isMovedAlready) {\r\n            possiblePoints.push(new Point(row, col + 2));\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return possiblePoints;\r\n  }\r\n\r\n  getPossibleCaptures(): Point[] {\r\n    let possiblePoints = [];\r\n\r\n    let row = this.point.row;\r\n    let col = this.point.col;\r\n\r\n    // lewo\r\n    if (this.board.isFieldTakenByEnemy(row, col - 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE) && !this.board.isFieldUnderAttack(row, col - 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n      possiblePoints.push(new Point(row, col - 1));\r\n    }\r\n\r\n    // prawo\r\n    if (this.board.isFieldTakenByEnemy(row, col + 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE) && !this.board.isFieldUnderAttack(row, col + 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n      possiblePoints.push(new Point(row, col + 1));\r\n    }\r\n\r\n    // dol\r\n    if (this.board.isFieldTakenByEnemy(row + 1, col, this.color === Color.WHITE ? Color.BLACK : Color.WHITE) && !this.board.isFieldUnderAttack(row + 1, col, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n      possiblePoints.push(new Point(row + 1, col));\r\n    }\r\n\r\n    // gora\r\n    if (this.board.isFieldTakenByEnemy(row - 1, col, this.color === Color.WHITE ? Color.BLACK : Color.WHITE) && !this.board.isFieldUnderAttack(row - 1, col, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n      possiblePoints.push(new Point(row - 1, col));\r\n    }\r\n\r\n    // lewo gora\r\n    if (this.board.isFieldTakenByEnemy(row - 1, col - 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE) && !this.board.isFieldUnderAttack(row - 1, col - 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n      possiblePoints.push(new Point(row - 1, col - 1));\r\n    }\r\n    // prawo gora\r\n    if (this.board.isFieldTakenByEnemy(row - 1, col + 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE) && !this.board.isFieldUnderAttack(row - 1, col + 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n      possiblePoints.push(new Point(row - 1, col + 1));\r\n    }\r\n\r\n    // lewo dol\r\n    if (this.board.isFieldTakenByEnemy(row + 1, col - 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE) && !this.board.isFieldUnderAttack(row + 1, col - 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n      possiblePoints.push(new Point(row + 1, col - 1));\r\n    }\r\n    // prawo dol\r\n    if (this.board.isFieldTakenByEnemy(row + 1, col + 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE) && !this.board.isFieldUnderAttack(row + 1, col + 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n      possiblePoints.push(new Point(row + 1, col + 1));\r\n    }\r\n\r\n    return possiblePoints;\r\n  }\r\n\r\n  getCoveredFields(): Point[] {\r\n    let possiblePoints = [];\r\n\r\n    let row = this.point.row;\r\n    let col = this.point.col;\r\n\r\n    // lewo\r\n    if (this.board.isFieldTakenByEnemy(row, col - 1, this.color)) {\r\n      possiblePoints.push(new Point(row, col - 1));\r\n    }\r\n\r\n    // prawo\r\n    if (this.board.isFieldTakenByEnemy(row, col + 1, this.color)) {\r\n      possiblePoints.push(new Point(row, col + 1));\r\n    }\r\n\r\n    // dol\r\n    if (this.board.isFieldTakenByEnemy(row + 1, col, this.color)) {\r\n      possiblePoints.push(new Point(row + 1, col));\r\n    }\r\n\r\n    // gora\r\n    if (this.board.isFieldTakenByEnemy(row - 1, col, this.color)) {\r\n      possiblePoints.push(new Point(row - 1, col));\r\n    }\r\n\r\n    // lewo gora\r\n    if (this.board.isFieldTakenByEnemy(row - 1, col - 1, this.color)) {\r\n      possiblePoints.push(new Point(row - 1, col - 1));\r\n    }\r\n    // prawo gora\r\n    if (this.board.isFieldTakenByEnemy(row - 1, col + 1, this.color)) {\r\n      possiblePoints.push(new Point(row - 1, col + 1));\r\n    }\r\n\r\n    // lewo dol\r\n    if (this.board.isFieldTakenByEnemy(row + 1, col - 1, this.color)) {\r\n      possiblePoints.push(new Point(row + 1, col - 1));\r\n    }\r\n    // prawo dol\r\n    if (this.board.isFieldTakenByEnemy(row + 1, col + 1, this.color)) {\r\n      possiblePoints.push(new Point(row + 1, col + 1));\r\n    }\r\n\r\n    return possiblePoints;\r\n  }\r\n}\r\n","export class UnicodeConstants {\r\n\r\n  static WHITE_KING = '&#x2654;';\r\n  static WHITE_QUEEN = '&#x2655;';\r\n  static WHITE_KNIGHT = '&#x2658;';\r\n  static WHITE_ROOK = '&#x2656;';\r\n  static WHITE_PAWN = '&#x2659;';\r\n  static WHITE_BISHOP = '&#x2657;';\r\n\r\n  static BLACK_KING = '&#x265A;';\r\n  static BLACK_QUEEN = '&#x265B;';\r\n  static BLACK_KNIGHT = '&#x265E;';\r\n  static BLACK_ROOK = '&#x265C;';\r\n  static BLACK_PAWN = '&#x265F;';\r\n  static BLACK_BISHOP = '&#x265D;';\r\n\r\n}\r\n","import {Piece} from './piece';\r\nimport {Point} from './point';\r\nimport {Color} from './color';\r\nimport {King} from './king';\r\nimport {Board} from '../board';\r\n\r\nexport class Queen extends Piece {\r\n\r\n  constructor(point: Point, color: Color, image: string, board: Board) {\r\n    super(point, color, image, 9, board);\r\n  }\r\n\r\n  getPossibleMoves(): Point[] {\r\n    let possiblePoints = [];\r\n\r\n    let row = this.point.row;\r\n    let col = this.point.col;\r\n\r\n    for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) { // lewa gorna przekatna\r\n      if (this.board.isFieldEmpty(i, j)) {\r\n        possiblePoints.push(new Point(i, j));\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n\r\n    for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) { // prawa gorna przekatna\r\n      if (this.board.isFieldEmpty(i, j)) {\r\n        possiblePoints.push(new Point(i, j));\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n\r\n    for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) { // lewa dolna przekatna\r\n      if (this.board.isFieldEmpty(i, j)) {\r\n        possiblePoints.push(new Point(i, j));\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n\r\n    for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) { // prawa dolna przekatna\r\n      if (this.board.isFieldEmpty(i, j)) {\r\n        possiblePoints.push(new Point(i, j));\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n\r\n    for (let i = row + 1; i < 8; ++i) { // dol\r\n      if (this.board.isFieldEmpty(i, col)) {\r\n        possiblePoints.push(new Point(i, col));\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n\r\n    for (let i = row - 1; i >= 0; --i) { // gora\r\n      if (this.board.isFieldEmpty(i, col)) {\r\n        possiblePoints.push(new Point(i, col));\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n\r\n    for (let j = col - 1; j >= 0; --j) { // lewo\r\n      if (this.board.isFieldEmpty(row, j)) {\r\n        possiblePoints.push(new Point(row, j));\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n\r\n    for (let j = col + 1; j < 8; ++j) { // prawo\r\n      if (this.board.isFieldEmpty(row, j)) {\r\n        possiblePoints.push(new Point(row, j));\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n\r\n    return possiblePoints;\r\n  }\r\n\r\n  getPossibleCaptures(): Point[] {\r\n    let possiblePoints = [];\r\n\r\n    let row = this.point.row;\r\n    let col = this.point.col;\r\n\r\n    for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) { // lewa gorna przekatna\r\n      if (this.board.isFieldTakenByEnemy(i, j, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n        possiblePoints.push(new Point(i, j));\r\n        break;\r\n      } else {\r\n        if (!this.board.isFieldEmpty(i, j)) {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) { // prawa gorna przekatna\r\n      if (this.board.isFieldTakenByEnemy(i, j, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n        possiblePoints.push(new Point(i, j));\r\n        break;\r\n      } else {\r\n        if (!this.board.isFieldEmpty(i, j)) {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) { // lewa dolna przekatna\r\n      if (this.board.isFieldTakenByEnemy(i, j, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n        possiblePoints.push(new Point(i, j));\r\n        break;\r\n      } else {\r\n        if (!this.board.isFieldEmpty(i, j)) {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) { // prawa dolna przekatna\r\n      if (this.board.isFieldTakenByEnemy(i, j, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n        possiblePoints.push(new Point(i, j));\r\n        break;\r\n      } else {\r\n        if (!this.board.isFieldEmpty(i, j)) {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    for (let i = row + 1; i < 8; ++i) { // dol\r\n      if (this.board.isFieldTakenByEnemy(i, col, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n        possiblePoints.push(new Point(i, col));\r\n        break;\r\n      } else {\r\n        if (!this.board.isFieldEmpty(i, col)) {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    for (let i = row - 1; i >= 0; --i) { // gora\r\n      if (this.board.isFieldTakenByEnemy(i, col, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n        possiblePoints.push(new Point(i, col));\r\n        break;\r\n      } else {\r\n        if (!this.board.isFieldEmpty(i, col)) {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    for (let j = col - 1; j >= 0; --j) { // lewo\r\n      if (this.board.isFieldTakenByEnemy(row, j, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n        possiblePoints.push(new Point(row, j));\r\n        break;\r\n      } else {\r\n        if (!this.board.isFieldEmpty(row, j)) {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    for (let j = col + 1; j < 8; ++j) { // prawo\r\n      if (this.board.isFieldTakenByEnemy(row, j, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n        possiblePoints.push(new Point(row, j));\r\n        break;\r\n      } else {\r\n        if (!this.board.isFieldEmpty(row, j)) {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    return possiblePoints;\r\n  }\r\n\r\n  getCoveredFields(): Point[] {\r\n    let possiblePoints = [];\r\n\r\n    let row = this.point.row;\r\n    let col = this.point.col;\r\n\r\n    for (let i = row + 1; i < 8; ++i) { // dol\r\n      if (this.board.isFieldEmpty(i, col)) {\r\n        possiblePoints.push(new Point(i, col));\r\n      } else {\r\n        if (!(this.board.getPieceByField(i, col) instanceof King)) {\r\n          possiblePoints.push(new Point(i, col));\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    for (let i = row - 1; i >= 0; --i) { // gora\r\n      if (this.board.isFieldEmpty(i, col)) {\r\n        possiblePoints.push(new Point(i, col));\r\n      } else {\r\n        if (!(this.board.getPieceByField(i, col) instanceof King)) {\r\n          possiblePoints.push(new Point(i, col));\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    for (let j = col - 1; j >= 0; --j) { // lewo\r\n      if (this.board.isFieldEmpty(row, j)) {\r\n        possiblePoints.push(new Point(row, j));\r\n      } else {\r\n        if (!(this.board.getPieceByField(row, j) instanceof King)) {\r\n          possiblePoints.push(new Point(row, j));\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    for (let j = col + 1; j < 8; ++j) { // prawo\r\n      if (this.board.isFieldEmpty(row, j)) {\r\n        possiblePoints.push(new Point(row, j));\r\n      } else {\r\n        if (!(this.board.getPieceByField(row, j) instanceof King)) {\r\n          possiblePoints.push(new Point(row, j));\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n\r\n    for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) { // lewa gorna przekatna\r\n      if (this.board.isFieldEmpty(i, j)) {\r\n        possiblePoints.push(new Point(i, j));\r\n      } else {\r\n        if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n          possiblePoints.push(new Point(i, j));\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) { // prawa gorna przekatna\r\n      if (this.board.isFieldEmpty(i, j)) {\r\n        possiblePoints.push(new Point(i, j));\r\n      } else {\r\n        if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n          possiblePoints.push(new Point(i, j));\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) { // lewa dolna przekatna\r\n      if (this.board.isFieldEmpty(i, j)) {\r\n        possiblePoints.push(new Point(i, j));\r\n      } else {\r\n        if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n          possiblePoints.push(new Point(i, j));\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) { // prawa dolna przekatna\r\n      if (this.board.isFieldEmpty(i, j)) {\r\n        possiblePoints.push(new Point(i, j));\r\n      } else {\r\n        if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n          possiblePoints.push(new Point(i, j));\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    return possiblePoints;\r\n  }\r\n\r\n}\r\n","import {Piece} from './piece';\r\nimport {Color} from './color';\r\nimport {Point} from './point';\r\nimport {Board} from '../board';\r\n\r\nexport class Pawn extends Piece {\r\n\r\n  isMovedAlready = false;\r\n\r\n  constructor(point: Point, color: Color, image: string, board: Board) {\r\n    super(point, color, image, 1, board);\r\n  }\r\n\r\n  getPossibleMoves(): Point[] {\r\n    let possiblePoints = [];\r\n    let row = this.point.row;\r\n    let col = this.point.col;\r\n    if ((!this.board.reverted && this.color === Color.WHITE) || (this.board.reverted && this.color === Color.BLACK)) {\r\n      if (this.board.isFieldEmpty(row - 1, col)) {\r\n        possiblePoints.push(new Point(row - 1, col));\r\n\r\n        if (!this.isMovedAlready && this.board.isFieldEmpty(row - 2, col)) {\r\n          possiblePoints.push(new Point(row - 2, col));\r\n        }\r\n      }\r\n    } else {\r\n      if (/*!board.isFieldTakenByEnemy(row + 1, col, Color.WHITE) &&*/ this.board.isFieldEmpty(row + 1, col)) {\r\n        possiblePoints.push(new Point(row + 1, col));\r\n\r\n        if (!this.isMovedAlready && this.board.isFieldEmpty(row + 2, col)) {\r\n          possiblePoints.push(new Point(row + 2, col));\r\n        }\r\n      }\r\n    }\r\n    return possiblePoints;\r\n  }\r\n\r\n  getPossibleCaptures(): Point[] {\r\n    let possiblePoints = [];\r\n    let row = this.point.row;\r\n    let col = this.point.col;\r\n\r\n    if ((!this.board.reverted && this.color === Color.WHITE) || (this.board.reverted && this.color === Color.BLACK)) {\r\n      if (this.board.isFieldTakenByEnemy(row - 1, col - 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n        possiblePoints.push(new Point(row - 1, col - 1));\r\n      }\r\n      if (this.board.isFieldTakenByEnemy(row - 1, col + 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n        possiblePoints.push(new Point(row - 1, col + 1));\r\n      }\r\n    } else {\r\n      if (this.board.isFieldTakenByEnemy(row + 1, col - 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n        possiblePoints.push(new Point(row + 1, col - 1));\r\n      }\r\n      if (this.board.isFieldTakenByEnemy(row + 1, col + 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n        possiblePoints.push(new Point(row + 1, col + 1));\r\n      }\r\n    }\r\n\r\n    if (this.board.enPassantPoint && this.board.enPassantPiece.color === (this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n      if (row === this.board.enPassantPiece.point.row && Math.abs(this.board.enPassantPiece.point.col - col) === 1) {\r\n        possiblePoints.push(this.board.enPassantPoint);\r\n      }\r\n    }\r\n\r\n    return possiblePoints;\r\n  }\r\n\r\n  getCoveredFields(): Point[] {\r\n    let possiblePoints = [];\r\n    let row = this.point.row;\r\n    let col = this.point.col;\r\n\r\n    if ((!this.board.reverted && this.color === Color.WHITE) || (this.board.reverted && this.color === Color.BLACK)) {\r\n\r\n      possiblePoints.push(new Point(row - 1, col - 1));\r\n\r\n      possiblePoints.push(new Point(row - 1, col + 1));\r\n    } else {\r\n      possiblePoints.push(new Point(row + 1, col - 1));\r\n\r\n      possiblePoints.push(new Point(row + 1, col + 1));\r\n    }\r\n\r\n    return possiblePoints;\r\n  }\r\n\r\n}\r\n","import {Piece} from './piece';\r\nimport {Point} from './point';\r\nimport {Color} from './color';\r\nimport {Board} from '../board';\r\n\r\nexport class Knight extends Piece {\r\n\r\n  isMovedAlready = false;\r\n\r\n  constructor(point: Point, color: Color, image: string, board: Board) {\r\n    super(point, color, image, 3, board);\r\n  }\r\n\r\n  getPossibleMoves(): Point[] {\r\n    let possiblePoints = [];\r\n\r\n    let row = this.point.row;\r\n    let col = this.point.col;\r\n\r\n    // gora -> lewo\r\n    if (this.board.isFieldEmpty(row - 2, col - 1)) {\r\n      possiblePoints.push(new Point(row - 2, col - 1));\r\n    }\r\n\r\n    // gora -> prawo\r\n    if (this.board.isFieldEmpty(row - 2, col + 1)) {\r\n      possiblePoints.push(new Point(row - 2, col + 1));\r\n    }\r\n\r\n    // lewo -> gora\r\n    if (this.board.isFieldEmpty(row - 1, col - 2)) {\r\n      possiblePoints.push(new Point(row - 1, col - 2));\r\n    }\r\n\r\n    // prawo -> gora\r\n    if (this.board.isFieldEmpty(row - 1, col + 2)) {\r\n      possiblePoints.push(new Point(row - 1, col + 2));\r\n    }\r\n\r\n    // lewo -> dol\r\n    if (this.board.isFieldEmpty(row + 1, col - 2)) {\r\n      possiblePoints.push(new Point(row + 1, col - 2));\r\n    }\r\n\r\n    // prawo -> dol\r\n    if (this.board.isFieldEmpty(row + 1, col + 2)) {\r\n      possiblePoints.push(new Point(row + 1, col + 2));\r\n    }\r\n\r\n    // dol -> lewo\r\n    if (this.board.isFieldEmpty(row + 2, col - 1)) {\r\n      possiblePoints.push(new Point(row + 2, col - 1));\r\n    }\r\n\r\n    // dol -> prawo\r\n    if (this.board.isFieldEmpty(row + 2, col + 1)) {\r\n      possiblePoints.push(new Point(row + 2, col + 1));\r\n    }\r\n\r\n    return possiblePoints;\r\n  }\r\n\r\n  getPossibleCaptures(): Point[] {\r\n    let possiblePoints = [];\r\n\r\n    let row = this.point.row;\r\n    let col = this.point.col;\r\n\r\n    // gora -> lewo\r\n    if (this.board.isFieldTakenByEnemy(row - 2, col - 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n      possiblePoints.push(new Point(row - 2, col - 1));\r\n    }\r\n\r\n    // gora -> prawo\r\n    if (this.board.isFieldTakenByEnemy(row - 2, col + 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n      possiblePoints.push(new Point(row - 2, col + 1));\r\n    }\r\n\r\n    // lewo -> gora\r\n    if (this.board.isFieldTakenByEnemy(row - 1, col - 2, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n      possiblePoints.push(new Point(row - 1, col - 2));\r\n    }\r\n\r\n    // prawo -> gora\r\n    if (this.board.isFieldTakenByEnemy(row - 1, col + 2, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n      possiblePoints.push(new Point(row - 1, col + 2));\r\n    }\r\n\r\n    // lewo -> dol\r\n    if (this.board.isFieldTakenByEnemy(row + 1, col - 2, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n      possiblePoints.push(new Point(row + 1, col - 2));\r\n    }\r\n\r\n    // prawo -> dol\r\n    if (this.board.isFieldTakenByEnemy(row + 1, col + 2, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n      possiblePoints.push(new Point(row + 1, col + 2));\r\n    }\r\n\r\n    // dol -> lewo\r\n    if (this.board.isFieldTakenByEnemy(row + 2, col - 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n      possiblePoints.push(new Point(row + 2, col - 1));\r\n    }\r\n\r\n    // dol -> prawo\r\n    if (this.board.isFieldTakenByEnemy(row + 2, col + 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n      possiblePoints.push(new Point(row + 2, col + 1));\r\n    }\r\n\r\n    return possiblePoints;\r\n  }\r\n\r\n  getCoveredFields(): Point[] {\r\n    let possiblePoints = [];\r\n\r\n    let row = this.point.row;\r\n    let col = this.point.col;\r\n\r\n    // gora -> lewo\r\n    possiblePoints.push(new Point(row - 2, col - 1));\r\n\r\n\r\n    // gora -> prawo\r\n    possiblePoints.push(new Point(row - 2, col + 1));\r\n\r\n    // lewo -> gora\r\n    possiblePoints.push(new Point(row - 1, col - 2));\r\n\r\n    // prawo -> gora\r\n    possiblePoints.push(new Point(row - 1, col + 2));\r\n\r\n    // lewo -> dol\r\n    possiblePoints.push(new Point(row + 1, col - 2));\r\n\r\n    // prawo -> dol\r\n    possiblePoints.push(new Point(row + 1, col + 2));\r\n\r\n    // dol -> lewo\r\n    possiblePoints.push(new Point(row + 2, col - 1));\r\n\r\n\r\n    // dol -> prawo\r\n    possiblePoints.push(new Point(row + 2, col + 1));\r\n\r\n\r\n    return possiblePoints;\r\n  }\r\n}\r\n","import { Piece } from './piece';\r\nimport { Color } from './color';\r\nimport { Point } from './point';\r\nimport { King } from './king';\r\nimport {Board} from '../board';\r\n\r\nexport class Bishop extends Piece {\r\n\r\n  constructor(point: Point, color: Color, image: string, board: Board) {\r\n        super(point, color, image, 3, board);\r\n    }\r\n\r\n    getPossibleMoves(): Point[] {\r\n        let possiblePoints = [];\r\n\r\n        let row = this.point.row;\r\n        let col = this.point.col;\r\n\r\n        for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) { // lewa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } //else if (board.getPieceByField(i, j) instanceof King && (board.getPieceByField(i, j).color !== this.color)){\r\n               // for( let a = row - 1, b = col - 1; a > i && j >= col; --a, --b){\r\n                 //   possiblePoints.push(new Point(i, j));\r\n             //   }\r\n           // }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) { // prawa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) { // lewa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) { // prawa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n    getPossibleCaptures() {\r\n        let possiblePoints = [];\r\n\r\n        let row = this.point.row;\r\n        let col = this.point.col;\r\n\r\n        for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) { // lewa gorna przekatna\r\n            if (this.board.isFieldTakenByEnemy(i, j, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) { // prawa gorna przekatna\r\n            if (this.board.isFieldTakenByEnemy(i, j, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) { // lewa dolna przekatna\r\n            if (this.board.isFieldTakenByEnemy(i, j, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) { // prawa dolna przekatna\r\n            if (this.board.isFieldTakenByEnemy(i, j, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n    getCoveredFields(): Point[] {\r\n        let possiblePoints = [];\r\n\r\n        let row = this.point.row;\r\n        let col = this.point.col;\r\n\r\n        for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) { // lewa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j))\r\n                possiblePoints.push(new Point(i, j));\r\n            else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) { // prawa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j))\r\n                possiblePoints.push(new Point(i, j));\r\n            else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) { // lewa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j))\r\n                possiblePoints.push(new Point(i, j));\r\n            else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) { // prawa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j))\r\n                possiblePoints.push(new Point(i, j));\r\n            else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n}\r\n","import {Point} from './pieces/point';\r\nimport {Color} from './pieces/color';\r\nimport {King} from './pieces/king';\r\nimport {Piece} from './pieces/piece';\r\nimport {cloneDeep} from 'lodash';\r\nimport {Rook} from './pieces/rook';\r\nimport {Knight} from './pieces/knight';\r\nimport {Bishop} from './pieces/bishop';\r\nimport {Queen} from './pieces/queen';\r\nimport {Pawn} from './pieces/pawn';\r\n\r\nexport class Board {\r\n\r\n  board: number[][];\r\n  pieces: Piece[] = [];\r\n\r\n  enPassantPoint: Point = null;\r\n  enPassantPiece: Piece = null;\r\n  lastMoveSrc: Point = null;\r\n  lastMoveDest: Point = null;\r\n  activePiece: Piece;\r\n\r\n  blackKingChecked: boolean;\r\n  possibleCaptures: any[] = [];\r\n  possibleMoves: Point[] = [];\r\n  whiteKingChecked: boolean;\r\n\r\n  currentWhitePlayer = true;\r\n  reverted: boolean = false;\r\n  fullMoveCount: number = 1;\r\n  fen: string;\r\n\r\n  constructor() {\r\n\r\n    this.board = [];\r\n    for (var i: number = 0; i < 8; ++i) {\r\n      this.board[i] = [];\r\n      for (var j: number = 0; j < 8; ++j) {\r\n        this.board[i][j] = 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  isXYInPossibleMoves(row: number, col: number): boolean {\r\n    return this.possibleMoves.some(e => e.row === row && e.col === col);\r\n  }\r\n\r\n  isXYInPossibleCaptures(row: number, col: number): boolean {\r\n    return this.possibleCaptures.some(e => e.row === row && e.col === col);\r\n  }\r\n\r\n  isXYInSourceMove(i: number, j: number) {\r\n    return this.lastMoveSrc && this.lastMoveSrc.row === i && this.lastMoveSrc.col === j;\r\n  }\r\n\r\n  isXYInDestMove(i: number, j: number) {\r\n    return this.lastMoveDest && this.lastMoveDest.row === i && this.lastMoveDest.col === j;\r\n  }\r\n\r\n  isXYInActiveMove(i: number, j: number) {\r\n    return this.activePiece && this.activePiece.point.row === i && this.activePiece.point.col === j;\r\n  }\r\n\r\n  isPointInPossibleMoves(point: Point): boolean {\r\n    return this.possibleMoves.some(e => e.row === point.row && e.col === point.col);\r\n  }\r\n\r\n  isPointInPossibleCaptures(point: Point): boolean {\r\n    return this.possibleCaptures.some(e => e.row === point.row && e.col === point.col);\r\n  }\r\n\r\n  reset() {\r\n    this.lastMoveDest = null;\r\n    this.lastMoveSrc = null;\r\n    this.whiteKingChecked = false;\r\n    this.blackKingChecked = false;\r\n    this.possibleCaptures = [];\r\n    this.possibleMoves = [];\r\n    this.activePiece = null;\r\n    this.reverted = false;\r\n    this.currentWhitePlayer = true;\r\n    this.enPassantPoint = null;\r\n    this.enPassantPiece = null;\r\n    this.fullMoveCount = 1;\r\n    this.calculateFEN();\r\n  }\r\n\r\n  reverse() {\r\n    this.reverted = !this.reverted;\r\n    this.activePiece = null;\r\n    this.possibleMoves = [];\r\n    this.possibleCaptures = [];\r\n    for (let i = 0; i < this.pieces.length; ++i) {\r\n      this.reversePoint(this.pieces[i].point);\r\n    }\r\n\r\n    this.reversePoint(this.lastMoveSrc);\r\n\r\n    if (this.enPassantPoint && this.enPassantPiece) {\r\n      this.reversePoint(this.enPassantPoint);\r\n    }\r\n  }\r\n\r\n  private reversePoint(point: Point) {\r\n    if (point) {\r\n      point.row = Math.abs(point.row - 7);\r\n      point.col = Math.abs(point.col - 7);\r\n    }\r\n  }\r\n\r\n  clone(): Board {\r\n    return cloneDeep(this);\r\n  }\r\n\r\n  isFieldTakenByEnemy(row: number, col: number, enemyColor: Color): boolean {\r\n    if (row > 7 || row < 0 || col > 7 || col < 0) {\r\n      return false;\r\n    }\r\n    return this.pieces.some(e => e.point.col === col && e.point.row === row && e.color === enemyColor);\r\n  }\r\n\r\n  isFieldEmpty(row: number, col: number): boolean {\r\n    if (row > 7 || row < 0 || col > 7 || col < 0) {\r\n      return false;\r\n    }\r\n    return !this.pieces.some(e => e.point.col === col && e.point.row === row);\r\n  }\r\n\r\n  isFieldUnderAttack(row: number, col: number, color: Color) {\r\n    let found = false;\r\n    return this.pieces.filter(e => e.color === color).some(e => e.getCoveredFields().some(f => f.col === col && f.row === row));\r\n  }\r\n\r\n  getPieceByField(row: number, col: number): Piece {\r\n    if (this.isFieldEmpty(row, col)) {\r\n      //   throw new Error('Piece not found');\r\n      return undefined;\r\n    }\r\n\r\n    return this.pieces.find(e => e.point.col === col && e.point.row === row);\r\n  }\r\n\r\n  isKingInCheck(color: Color, piece: Piece[]): boolean {\r\n    let king = piece\r\n      .find(e => e.color === color && e instanceof King);\r\n\r\n    if (king) {\r\n      return piece.some(e => e.getPossibleCaptures().some(e => e.col === king.point.col && e.row === king.point.row) && e.color !== color);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  getKingByColor(color: Color): King {\r\n    return <King> this.pieces.find(e => (e instanceof King) && e.color === color);\r\n  }\r\n\r\n  getCastleFENString(color: Color) {\r\n    let king = this.getKingByColor(color);\r\n\r\n    if (king.isMovedAlready) {\r\n      return '';\r\n    }\r\n\r\n    let fen = '';\r\n    let leftRook = this.getPieceByField(king.point.row, 0);\r\n    let rightRook = this.getPieceByField(king.point.row, 7);\r\n\r\n    if (rightRook instanceof Rook && rightRook.color === color) {\r\n      if (!rightRook.isMovedAlready) {\r\n        fen += this.reverted ? 'q' : 'k';\r\n      }\r\n    }\r\n\r\n    if (leftRook instanceof Rook && leftRook.color === color) {\r\n      if (!leftRook.isMovedAlready) {\r\n        fen += this.reverted ? 'k' : 'q';\r\n      }\r\n    }\r\n\r\n    fen = fen.split('').sort().join(\"\");\r\n    return color === Color.BLACK ? fen : fen.toUpperCase();\r\n  }\r\n\r\n  getEnPassantFENString() {\r\n    if (this.enPassantPoint) {\r\n      if (this.reverted) {\r\n        return String.fromCharCode(104 - this.enPassantPoint.col) + (this.enPassantPoint.row + 1);\r\n      } else {\r\n        return String.fromCharCode(97 + this.enPassantPoint.col) + (Math.abs(this.enPassantPoint.row - 7) + 1);\r\n      }\r\n    } else {\r\n      return '-';\r\n    }\r\n  }\r\n\r\n\r\n  calculateFEN() {\r\n    let fen = '';\r\n    for (let i = 0; i < 8; ++i) {\r\n      let emptyFields = 0;\r\n      for (let j = 0; j < 8; ++j) {\r\n        let piece = this.pieces.find(e => e.point.col === j && e.point.row === i);\r\n        if (piece) {\r\n          if (emptyFields > 0) {\r\n            fen += emptyFields;\r\n            emptyFields = 0;\r\n          }\r\n\r\n          if (piece instanceof Rook) {\r\n            fen += piece.color === Color.BLACK ? 'r' : 'R';\r\n          } else if (piece instanceof Knight) {\r\n            fen += piece.color === Color.BLACK ? 'n' : 'N';\r\n          } else if (piece instanceof Bishop) {\r\n            fen += piece.color === Color.BLACK ? 'b' : 'B';\r\n          } else if (piece instanceof Queen) {\r\n            fen += piece.color === Color.BLACK ? 'q' : 'Q';\r\n          } else if (piece instanceof King) {\r\n            fen += piece.color === Color.BLACK ? 'k' : 'K';\r\n          } else if (piece instanceof Pawn) {\r\n            fen += piece.color === Color.BLACK ? 'p' : 'P';\r\n          }\r\n        } else {\r\n          ++emptyFields;\r\n        }\r\n      }\r\n\r\n      if (emptyFields > 0) {\r\n        fen += emptyFields;\r\n      }\r\n\r\n      fen += '/';\r\n    }\r\n\r\n    fen = fen.substr(0, fen.length - 1);\r\n\r\n    if (this.reverted) {\r\n      fen = fen.split('').reverse().join('');\r\n    }\r\n\r\n    fen += (' ' + (this.currentWhitePlayer ? 'w' : 'b'));\r\n    let whiteEnPassant = this.getCastleFENString(Color.WHITE);\r\n    let blackEnPassant = this.getCastleFENString(Color.BLACK);\r\n    let concatedEnPassant = whiteEnPassant + blackEnPassant;\r\n    if (!concatedEnPassant) {\r\n      concatedEnPassant = '-';\r\n    }\r\n\r\n    fen += (' ' + concatedEnPassant);\r\n    fen += (' ' + (this.getEnPassantFENString()));\r\n    fen += ' ' + 0;\r\n    fen += ' ' + this.fullMoveCount;\r\n    this.fen = fen;\r\n  }\r\n\r\n  isXYInPointSelection(i: number, j: number) {\r\n    return false;\r\n  }\r\n}\r\n","import {Color} from '../models/pieces/color';\r\nimport {Board} from '../models/board';\r\nimport {Point} from '../models/pieces/point';\r\n\r\nexport class MoveUtils {\r\n\r\n  public static willMoveCauseCheck(currentColor: Color, row: number, col: number, destRow: number, destCol: number, board: Board) {\r\n    let srcPiece = board.getPieceByField(row, col);\r\n    let destPiece = board.getPieceByField(destRow, destCol);\r\n\r\n    if (srcPiece) {\r\n      srcPiece.point.row = destRow;\r\n      srcPiece.point.col = destCol;\r\n    }\r\n\r\n    if (destPiece) {\r\n      board.pieces = board.pieces.filter(e => e !== destPiece);\r\n    }\r\n    let isBound = board.isKingInCheck(currentColor, board.pieces);\r\n\r\n    if (srcPiece) {\r\n      srcPiece.point.col = col;\r\n      srcPiece.point.row = row;\r\n    }\r\n\r\n    if (destPiece) {\r\n      board.pieces.push(destPiece);\r\n    }\r\n\r\n    return isBound;\r\n  }\r\n\r\n  public static format(sourcePoint: Point, destPoint: Point, reverted: boolean) {\r\n    if (reverted) {\r\n      let sourceX = 104 - sourcePoint.col;\r\n      let destX = 104 - destPoint.col;\r\n      return String.fromCharCode(sourceX) + (sourcePoint.row + 1)\r\n        + String.fromCharCode(destX) + (destPoint.row + 1);\r\n    } else {\r\n      let incrementX = 97;\r\n      return String.fromCharCode(sourcePoint.col + incrementX) + (Math.abs(sourcePoint.row - 7) + 1)\r\n        + String.fromCharCode(destPoint.col + incrementX) + (Math.abs(destPoint.row - 7) + 1);\r\n    }\r\n  }\r\n\r\n}\r\n","import {EventEmitter, Injectable} from '@angular/core';\r\nimport {Subject} from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NgxChessBoardService {\r\n\r\n  private componentMethodCallSource = new Subject<any>();\r\n\r\n  componentMethodCalled$ = this.componentMethodCallSource.asObservable();\r\n\r\n  reset() {\r\n    this.componentMethodCallSource.next();\r\n  }\r\n\r\n}\r\n","import {AbstractPiece} from './abstract-piece';\r\nimport {Point} from '../models/pieces/point';\r\n\r\nexport abstract class PieceAbstractDecorator implements AbstractPiece{\r\n\r\n  piece: AbstractPiece;\r\n\r\n  protected constructor(piece: AbstractPiece) {\r\n    this.piece = piece;\r\n  }\r\n\r\n  abstract getPossibleCaptures(): Point[];\r\n\r\n  abstract getPossibleMoves(): Point[];\r\n\r\n}\r\n","import {PieceAbstractDecorator} from './piece-abstract-decorator';\r\nimport {Point} from '../models/pieces/point';\r\nimport {AbstractPiece} from './abstract-piece';\r\nimport {MoveUtils} from '../utils/move-utils';\r\nimport {Color} from '../models/pieces/color';\r\nimport {NgxChessBoardComponent} from '../ngx-chess-board.component';\r\nimport {Board} from '../models/board';\r\n\r\nexport class AvailableMoveDecorator extends PieceAbstractDecorator {\r\n\r\n  private pointClicked: Point;\r\n  private color: Color;\r\n  private board: Board;\r\n\r\n  constructor(piece: AbstractPiece, pointClicked: Point, color: Color, board: Board) {\r\n    super(piece);\r\n    this.pointClicked = pointClicked;\r\n    this.color = color;\r\n    this.board = board;\r\n  }\r\n\r\n  getPossibleCaptures(): Point[] {\r\n    return this.piece.getPossibleCaptures()\r\n      .filter(point => !MoveUtils.willMoveCauseCheck(this.color, this.pointClicked.row, this.pointClicked.col, point.row, point.col, this.board));\r\n  }\r\n\r\n  getPossibleMoves(): Point[] {\r\n    return this.piece.getPossibleMoves()\r\n      .filter(point => !MoveUtils.willMoveCauseCheck(this.color, this.pointClicked.row, this.pointClicked.col, point.row, point.col, this.board));\r\n  }\r\n}\r\n","import {BoardState} from './board-state';\r\n\r\nexport class BoardStateProvider {\r\n\r\n  moves: BoardState[];\r\n\r\n  constructor() {\r\n    this.moves = [];\r\n  }\r\n\r\n  addMove(moveHistory: BoardState) {\r\n    this.moves.push(moveHistory);\r\n  }\r\n\r\n  getMoves() {\r\n    return this.moves;\r\n  }\r\n\r\n  pop() {\r\n    return this.moves.pop();\r\n  }\r\n\r\n  isEmpty() {\r\n    return this.moves.length === 0;\r\n  }\r\n\r\n  clear() {\r\n    this.moves = [];\r\n  }\r\n\r\n}\r\n","import {Piece} from '../models/pieces/piece';\r\nimport {Board} from '../models/board';\r\n\r\nexport class BoardState{\r\n\r\n  board: Board;\r\n\r\n  constructor(board: Board) {\r\n    this.board = board;\r\n  }\r\n\r\n}\r\n","export class HistoryMove {\r\n\r\n  move: string;\r\n  piece: string;\r\n  color: string;\r\n\r\n  constructor(move: string, piece: string, color: string) {\r\n    this.move = move;\r\n    this.piece = piece;\r\n    this.color = color;\r\n  }\r\n\r\n}\r\n","import {HistoryMove} from './history-move';\r\n\r\nexport class HistoryMoveProvider {\r\n\r\n  historyMoves: HistoryMove[];\r\n\r\n  constructor() {\r\n    this.historyMoves = [];\r\n  }\r\n\r\n  addMove(historyMove: HistoryMove) {\r\n    this.historyMoves.push(historyMove);\r\n  }\r\n\r\n  pop() {\r\n    return this.historyMoves.pop();\r\n  }\r\n\r\n  getAll() {\r\n    return this.historyMoves;\r\n  }\r\n\r\n  clear() {\r\n    this.historyMoves = [];\r\n  }\r\n\r\n}\r\n","export class Constants {\r\n static readonly DEFAULT_DARK_TILE_COLOR = 'rgb(97, 84, 61)';\r\n  static readonly DEFAULT_LIGHT_TILE_COLOR = '#BAA378';\r\n\r\n  static readonly DEFAULT_SIZE = 400;\r\n  static readonly MIN_BOARD_SIZE = 100;\r\n  static readonly MAX_BOARD_SIZE = 4000;\r\n\r\n}\r\n","export class CoordsProvider {\r\n\r\n  private _xCoords: string[] = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\r\n  private _yCoords: number[] = [8, 7, 6, 5, 4, 3, 2, 1];\r\n\r\n  reverse() {\r\n    this._xCoords = this._xCoords.reverse();\r\n    this._yCoords = this._yCoords.reverse();\r\n  }\r\n\r\n  get xCoords(): string[] {\r\n    return this._xCoords;\r\n  }\r\n\r\n  get yCoords(): number[] {\r\n    return this._yCoords;\r\n  }\r\n\r\n  reset() {\r\n    this.init();\r\n  }\r\n\r\n  private init() {\r\n    this._xCoords = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\r\n    this._yCoords = [8, 7, 6, 5, 4, 3, 2, 1];\r\n  }\r\n}\r\n","import {Pawn} from '../models/pieces/pawn';\r\nimport {Point} from '../models/pieces/point';\r\nimport {Color} from '../models/pieces/color';\r\nimport {UnicodeConstants} from '../utils/unicode-constants';\r\nimport {Rook} from '../models/pieces/rook';\r\nimport {Knight} from '../models/pieces/knight';\r\nimport {Bishop} from '../models/pieces/bishop';\r\nimport {Queen} from '../models/pieces/queen';\r\nimport {King} from '../models/pieces/king';\r\nimport {Board} from '../models/board';\r\n\r\nexport class BoardLoader {\r\n  private board: Board;\r\n\r\n\r\n  constructor(board: Board) {\r\n    this.board = board;\r\n  }\r\n\r\n  addPieces() {\r\n    this.board.pieces = [];\r\n    // piony czarne\r\n    for (let i = 0; i < 8; ++i) {\r\n      this.board.pieces.push(new Pawn(new Point(1, i), Color.BLACK, UnicodeConstants.BLACK_PAWN, this.board));\r\n    }\r\n    this.board.pieces.push(new Rook(new Point(0, 0), Color.BLACK, UnicodeConstants.BLACK_ROOK, this.board));\r\n    this.board.pieces.push(new Knight(new Point(0, 1), Color.BLACK, UnicodeConstants.BLACK_KNIGHT, this.board));\r\n    this.board.pieces.push(new Bishop(new Point(0, 2), Color.BLACK, UnicodeConstants.BLACK_BISHOP, this.board));\r\n    this.board.pieces.push(new Queen(new Point(0, 3), Color.BLACK, UnicodeConstants.BLACK_QUEEN, this.board));\r\n    this.board.pieces.push(new King(new Point(0, 4), Color.BLACK, UnicodeConstants.BLACK_KING, this.board));\r\n    this.board.pieces.push(new Bishop(new Point(0, 5), Color.BLACK, UnicodeConstants.BLACK_BISHOP, this.board));\r\n    this.board.pieces.push(new Knight(new Point(0, 6), Color.BLACK, UnicodeConstants.BLACK_KNIGHT, this.board));\r\n    this.board.pieces.push(new Rook(new Point(0, 7), Color.BLACK, UnicodeConstants.BLACK_ROOK, this.board));\r\n\r\n\r\n    // piony biale\r\n    for (let i = 0; i < 8; ++i) {\r\n      this.board.pieces.push(new Pawn(new Point(6, i), Color.WHITE, UnicodeConstants.WHITE_PAWN, this.board));\r\n    }\r\n    this.board.pieces.push(new Rook(new Point(7, 0), Color.WHITE, UnicodeConstants.WHITE_ROOK, this.board));\r\n    this.board.pieces.push(new Knight(new Point(7, 1), Color.WHITE, UnicodeConstants.WHITE_KNIGHT, this.board));\r\n    this.board.pieces.push(new Bishop(new Point(7, 2), Color.WHITE, UnicodeConstants.WHITE_BISHOP, this.board));\r\n    this.board.pieces.push(new Queen(new Point(7, 3), Color.WHITE, UnicodeConstants.WHITE_QUEEN, this.board));\r\n    this.board.pieces.push(new King(new Point(7, 4), Color.WHITE, UnicodeConstants.WHITE_KING, this.board));\r\n    this.board.pieces.push(new Bishop(new Point(7, 5), Color.WHITE, UnicodeConstants.WHITE_BISHOP, this.board));\r\n    this.board.pieces.push(new Knight(new Point(7, 6), Color.WHITE, UnicodeConstants.WHITE_KNIGHT, this.board));\r\n    this.board.pieces.push(new Rook(new Point(7, 7), Color.WHITE, UnicodeConstants.WHITE_ROOK, this.board));\r\n\r\n    this.board.calculateFEN();\r\n  }\r\n\r\n  loadFEN(fen: string) {\r\n    if (fen) {\r\n      this.board.reverted = false;\r\n      this.board.pieces = [];\r\n      let split = fen.split('/');\r\n      for (let i = 0; i < 8; ++i) {\r\n        let pointer = 0;\r\n        for (let j = 0; j < 8; ++j) {\r\n          let chunk = split[i].charAt(j);\r\n          if (chunk.match(/[0-9]/)) {\r\n            pointer += Number(chunk);\r\n          } else {\r\n            switch (chunk) {\r\n              case 'r':\r\n                this.board.pieces.push(new Rook(new Point(i, pointer), Color.BLACK, UnicodeConstants.BLACK_ROOK, this.board));\r\n                break;\r\n              case 'n':\r\n                this.board.pieces.push(new Knight(new Point(i, pointer), Color.BLACK, UnicodeConstants.BLACK_KNIGHT, this.board));\r\n\r\n                break;\r\n              case 'b':\r\n                this.board.pieces.push(new Bishop(new Point(i, pointer), Color.BLACK, UnicodeConstants.BLACK_BISHOP, this.board));\r\n                break;\r\n              case 'q':\r\n                this.board.pieces.push(new Queen(new Point(i, pointer), Color.BLACK, UnicodeConstants.BLACK_QUEEN, this.board));\r\n                break;\r\n              case 'k':\r\n                this.board.pieces.push(new King(new Point(i, pointer), Color.BLACK, UnicodeConstants.BLACK_KING, this.board));\r\n                break;\r\n              case 'p': {\r\n                let pawn = new Pawn(new Point(i, pointer), Color.BLACK, UnicodeConstants.BLACK_PAWN, this.board);\r\n                if ((pawn.color === Color.BLACK && pawn.point.row !== 1) || (pawn.color === Color.WHITE && pawn.point.row !== 6)) {\r\n                  pawn.isMovedAlready = true;\r\n                }\r\n                this.board.pieces.push(pawn);\r\n                break;\r\n              }\r\n              case 'R':\r\n                this.board.pieces.push(new Rook(new Point(i, pointer), Color.WHITE, UnicodeConstants.WHITE_ROOK, this.board));\r\n\r\n                break;\r\n              case 'N':\r\n                this.board.pieces.push(new Knight(new Point(i, pointer), Color.WHITE, UnicodeConstants.WHITE_KNIGHT, this.board));\r\n                break;\r\n\r\n              case 'B':\r\n                this.board.pieces.push(new Bishop(new Point(i, pointer), Color.WHITE, UnicodeConstants.WHITE_BISHOP, this.board));\r\n                break;\r\n\r\n              case 'Q':\r\n                this.board.pieces.push(new Queen(new Point(i, pointer), Color.WHITE, UnicodeConstants.WHITE_QUEEN, this.board));\r\n                break;\r\n\r\n              case 'K':\r\n                this.board.pieces.push(new King(new Point(i, pointer), Color.WHITE, UnicodeConstants.WHITE_KING, this.board));\r\n                break;\r\n\r\n              case 'P': {\r\n                let pawn = new Pawn(new Point(i, pointer), Color.WHITE, UnicodeConstants.WHITE_PAWN, this.board);\r\n                if ((pawn.color === Color.BLACK && pawn.point.row !== 1) || (pawn.color === Color.WHITE && pawn.point.row !== 6)) {\r\n                  pawn.isMovedAlready = true;\r\n                }\r\n                this.board.pieces.push(pawn);\r\n                break;\r\n              }\r\n            }\r\n            ++pointer;\r\n          }\r\n        }\r\n      }\r\n\r\n      this.setCurrentPlayer(fen);\r\n      this.setCastles(fen);\r\n      this.setEnPassant(fen);\r\n      this.setFullMoveCount(fen);\r\n    } else {\r\n      throw Error('Incorrect FEN provided');\r\n    }\r\n  }\r\n\r\n\r\n  private setCurrentPlayer(fen: string) {\r\n    if (fen) {\r\n      let split = fen.split(' ');\r\n      this.board.currentWhitePlayer = split[1] === 'w';\r\n    }\r\n  }\r\n\r\n  setBoard(board: Board) {\r\n    this.board = board;\r\n  }\r\n\r\n  private setCastles(fen: string) {\r\n    if (fen) {\r\n      let split = fen.split(' ');\r\n      let castleChunk = split[2];\r\n\r\n      if (!castleChunk.includes('K')) {\r\n        this.setRookAlreadyMoved(Color.WHITE, 7);\r\n      }\r\n\r\n      if (!castleChunk.includes('Q')) {\r\n        this.setRookAlreadyMoved(Color.WHITE, 0);\r\n      }\r\n\r\n      if (!castleChunk.includes('k')) {\r\n        this.setRookAlreadyMoved(Color.BLACK, 7);\r\n      }\r\n\r\n      if (!castleChunk.includes('q')) {\r\n        this.setRookAlreadyMoved(Color.BLACK, 0);\r\n      }\r\n    }\r\n  }\r\n\r\n  private setFullMoveCount(fen: string) {\r\n\r\n  }\r\n\r\n  private setEnPassant(fen: string) {\r\n    if (fen) {\r\n      let split = fen.split(' ');\r\n      let enPassantPoint = split[3];\r\n\r\n      if (enPassantPoint === '-') {\r\n        return;\r\n      }\r\n\r\n      // if()\r\n    }\r\n  }\r\n\r\n  private setRookAlreadyMoved(color: Color, col: number) {\r\n    let rook = <Rook> this.board.pieces.find(e => e.color === color && e instanceof Rook && e.point.col === col);\r\n    rook.isMovedAlready = true;\r\n  }\r\n}\r\n","import {Component, ElementRef, OnInit, ViewChild} from '@angular/core';\r\nimport {Piece} from '../models/pieces/piece';\r\nimport {Observable} from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-piece-promotion-modal',\r\n  templateUrl: './piece-promotion-modal.component.html',\r\n  styleUrls: ['./piece-promotion-modal.component.scss']\r\n})\r\nexport class PiecePromotionModalComponent {\r\n\r\n  @ViewChild('myModal', {static: false}) modal: ElementRef;\r\n\r\n  selectedIndex: number = 1;\r\n  private onCloseCallback: (index: number) => void;\r\n\r\n  open(closeCallback: (index: number) => void) {\r\n    this.onCloseCallback = closeCallback;\r\n    this.modal.nativeElement.style.display = 'block';\r\n  }\r\n\r\n  async close() {\r\n    this.onCloseCallback(this.selectedIndex);\r\n    this.modal.nativeElement.style.display = 'none';\r\n  }\r\n\r\n  changeSelection(index: number){\r\n    this.selectedIndex = index;\r\n  }\r\n\r\n}\r\n","import {DrawPoint} from './draw-point';\r\n\r\nexport class Arrow {\r\n\r\n  start: DrawPoint;\r\n  end: DrawPoint;\r\n\r\n  isEqual(arrow: Arrow) {\r\n    return arrow && this.start.isEqual(arrow.start) && this.end.isEqual(arrow.end);\r\n  }\r\n\r\n}\r\n","export class DrawPoint {\r\n\r\n  x: number;\r\n  y: number;\r\n\r\n  constructor(x: number, y: number) {\r\n    this.x = x;\r\n    this.y = y;\r\n  }\r\n\r\n  isEqual(that: DrawPoint) {\r\n    return that && that.x === this.x && this.y === that.y;\r\n  }\r\n\r\n}\r\n","import {DrawPoint} from './draw-point';\r\n\r\nexport class Circle {\r\n\r\n  drawPoint: DrawPoint;\r\n\r\n  isEqual(circle: Circle) {\r\n    return circle && this.drawPoint.isEqual(circle.drawPoint);\r\n  }\r\n\r\n}\r\n","import {Circle} from './circle';\r\nimport {Arrow} from './arrow';\r\n\r\nexport class DrawProvider {\r\n\r\n  private _circles: Circle[];\r\n  private _arrows: Arrow[];\r\n\r\n\r\n  constructor() {\r\n    this._arrows = [];\r\n    this._circles = [];\r\n  }\r\n\r\n  addCircle(circle: Circle) {\r\n    this.circles.push(circle);\r\n  }\r\n\r\n  addArrow(arrow: Arrow) {\r\n    this.arrows.push(arrow);\r\n  }\r\n\r\n  get circles(): Circle[] {\r\n    return this._circles;\r\n  }\r\n\r\n  get arrows(): Arrow[] {\r\n    return this._arrows;\r\n  }\r\n\r\n  containsCircle(circle: Circle) {\r\n    return this.circles.some(e => e.isEqual(circle));\r\n  }\r\n\r\n  containsArrow(arrow: Arrow) {\r\n    return this.arrows.some(e => e.isEqual(arrow));\r\n  }\r\n\r\n  clear() {\r\n    this._arrows = [];\r\n    this._circles = [];\r\n  }\r\n\r\n}\r\n","import {Component, ElementRef, EventEmitter, HostListener, Input, OnInit, Output, ViewChild} from '@angular/core';\r\nimport {Piece} from './models/pieces/piece';\r\nimport {Color} from './models/pieces/color';\r\nimport {King} from './models/pieces/king';\r\nimport {UnicodeConstants} from './utils/unicode-constants';\r\nimport {Point} from './models/pieces/point';\r\nimport {Rook} from './models/pieces/rook';\r\nimport {Queen} from './models/pieces/queen';\r\nimport {Pawn} from './models/pieces/pawn';\r\nimport {Board} from './models/board';\r\nimport {MoveUtils} from './utils/move-utils';\r\nimport {NgxChessBoardService} from './service/ngx-chess-board.service';\r\nimport {NgxChessBoardView} from './ngx-chess-board-view';\r\nimport {AvailableMoveDecorator} from './piece-decorator/available-move-decorator';\r\nimport {BoardStateProvider} from './board-state-provider/board-state-provider';\r\nimport {BoardState} from './board-state-provider/board-state';\r\nimport {HistoryMove} from './history-move-provider/history-move';\r\nimport {HistoryMoveProvider} from './history-move-provider/history-move-provider';\r\nimport {Constants} from './utils/constants';\r\nimport {CoordsProvider} from './coords/coords-provider';\r\nimport {BoardLoader} from './board-state-provider/board-loader';\r\nimport {CdkDragEnd, CdkDragStart} from '@angular/cdk/drag-drop';\r\nimport {PiecePromotionModalComponent} from './piece-promotion-modal/piece-promotion-modal.component';\r\nimport {Bishop} from './models/pieces/bishop';\r\nimport {Knight} from './models/pieces/knight';\r\nimport {Arrow} from './drawing-tools/arrow';\r\nimport {DrawPoint} from './drawing-tools/draw-point';\r\nimport {Circle} from './drawing-tools/circle';\r\nimport {DrawProvider} from './drawing-tools/draw-provider';\r\n\r\n@Component({\r\n  selector: 'ngx-chess-board',\r\n  templateUrl: './ngx-chess-board.component.html',\r\n  styleUrls: ['./ngx-chess-board.component.scss']\r\n})\r\nexport class NgxChessBoardComponent implements OnInit, NgxChessBoardView {\r\n\r\n  @Input('size')\r\n  public set size(size: number) {\r\n    if (size && size >= Constants.MIN_BOARD_SIZE && size <= Constants.MAX_BOARD_SIZE) {\r\n      this._size = size;\r\n    } else {\r\n      this._size = Constants.DEFAULT_SIZE;\r\n    }\r\n    this.drawProvider.clear();\r\n    this.calculatePieceSize();\r\n  }\r\n\r\n  @HostListener('contextmenu', ['$event'])\r\n  onRightClick(event) {\r\n    event.preventDefault();\r\n  }\r\n\r\n  _size: number = Constants.DEFAULT_SIZE;\r\n\r\n  @Input('darkTileColor')\r\n  darkTileColor: string = Constants.DEFAULT_DARK_TILE_COLOR;\r\n\r\n  @Input('lightTileColor')\r\n  lightTileColor: string = Constants.DEFAULT_LIGHT_TILE_COLOR;\r\n\r\n  @Input('showCoords')\r\n  showCoords: boolean = true;\r\n\r\n  @Input('dragDisabled')\r\n  dragDisabled: boolean = false;\r\n\r\n  @Input('drawDisabled')\r\n  drawDisabled: boolean = false;\r\n\r\n  @Output()\r\n  onMove: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n  pieceSize: number;\r\n  selected = false;\r\n\r\n  @ViewChild('boardRef', {static: false})\r\n  boardRef: ElementRef;\r\n\r\n  @ViewChild('modal', {static: false}) modal: PiecePromotionModalComponent;\r\n\r\n  board: Board;\r\n  boardStateProvider: BoardStateProvider;\r\n  moveHistoryProvider: HistoryMoveProvider;\r\n  boardLoader: BoardLoader;\r\n  coords: CoordsProvider = new CoordsProvider();\r\n  disabling = false;\r\n  drawProvider: DrawProvider;\r\n  drawPoint: DrawPoint;\r\n\r\n  constructor(private ngxChessBoardService: NgxChessBoardService) {\r\n    this.board = new Board();\r\n    this.boardLoader = new BoardLoader(this.board);\r\n    this.boardLoader.addPieces();\r\n    this.boardStateProvider = new BoardStateProvider();\r\n    this.moveHistoryProvider = new HistoryMoveProvider();\r\n    this.drawProvider = new DrawProvider();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.ngxChessBoardService.componentMethodCalled$.subscribe(() => {\r\n      this.board.reset();\r\n    });\r\n    this.calculatePieceSize();\r\n  }\r\n\r\n  async onMouseUp(event) {\r\n    if (event.which !== 1 && !this.drawDisabled) {\r\n      this.addDrawPoint(event.x, event.y);\r\n      return;\r\n    }\r\n\r\n    this.drawProvider.clear();\r\n\r\n    if (this.dragDisabled) {\r\n      return;\r\n    }\r\n    let pointClicked = this.getClickPoint(event);\r\n\r\n    if (this.board.activePiece && pointClicked.isEqual(this.board.activePiece.point) && this.disabling) {\r\n      this.disableSelection();\r\n      this.disabling = false;\r\n      return;\r\n    }\r\n    if (this.selected) {\r\n      this.handleClickEvent(pointClicked);\r\n      //   this.possibleMoves = activePiece.getPossibleMoves();\r\n    } else {\r\n      let pieceClicked = this.getPieceByPoint(pointClicked.row, pointClicked.col);\r\n      if (pieceClicked) {\r\n\r\n        if ((this.board.currentWhitePlayer && pieceClicked.color === Color.BLACK) || (!this.board.currentWhitePlayer && pieceClicked.color === Color.WHITE)) {\r\n          return;\r\n        }\r\n\r\n        this.prepareActivePiece(pieceClicked, pointClicked);\r\n      }\r\n    }\r\n  }\r\n\r\n  afterMoveActions() {\r\n    this.checkIfPawnFirstMove(this.board.activePiece);\r\n    this.checkIfRookMoved(this.board.activePiece);\r\n    this.checkIfKingMoved(this.board.activePiece);\r\n\r\n    this.board.blackKingChecked = this.board.isKingInCheck(Color.BLACK, this.board.pieces);\r\n    this.board.whiteKingChecked = this.board.isKingInCheck(Color.WHITE, this.board.pieces);\r\n\r\n    this.checkForPossibleMoves(Color.BLACK, 'Checkmate!');\r\n    this.checkForPossibleMoves(Color.WHITE, 'Checkmate!');\r\n\r\n    this.board.calculateFEN();\r\n    this.checkForPat(Color.BLACK);\r\n    this.checkForPat(Color.WHITE);\r\n    this.disabling = false;\r\n  }\r\n\r\n  disableSelection() {\r\n    this.selected = false;\r\n    this.board.possibleCaptures = [];\r\n    this.board.activePiece = null;\r\n    this.board.possibleMoves = [];\r\n  }\r\n\r\n  prepareActivePiece(pieceClicked: Piece, pointClicked: Point) {\r\n    this.board.activePiece = pieceClicked;\r\n    this.selected = true;\r\n    this.board.possibleCaptures = new AvailableMoveDecorator(pieceClicked, pointClicked, this.board.currentWhitePlayer ? Color.WHITE : Color.BLACK, this.board).getPossibleCaptures();\r\n    this.board.possibleMoves = new AvailableMoveDecorator(pieceClicked, pointClicked, this.board.currentWhitePlayer ? Color.WHITE : Color.BLACK, this.board).getPossibleMoves();\r\n  }\r\n\r\n  getPieceByPoint(row: number, col: number): Piece {\r\n    row = Math.floor(row);\r\n    col = Math.floor(col);\r\n    return this.board.pieces.find(e => e.point.col === col && e.point.row === row);\r\n  }\r\n\r\n  isKingChecked(piece: Piece) {\r\n    if (piece instanceof King) {\r\n      return piece.color === Color.WHITE ? this.board.whiteKingChecked : this.board.blackKingChecked;\r\n    }\r\n  }\r\n\r\n  getClickPoint(event) {\r\n    return new Point(\r\n      Math.floor((event.y - this.boardRef.nativeElement.getBoundingClientRect().top) / (this.boardRef.nativeElement.getBoundingClientRect().height / 8)),\r\n      Math.floor((event.x - this.boardRef.nativeElement.getBoundingClientRect().left) / (this.boardRef.nativeElement.getBoundingClientRect().width / 8)));\r\n  }\r\n\r\n  async movePiece(piece: Piece, newPoint: Point) {\r\n    this.moveHistoryProvider.addMove(new HistoryMove(MoveUtils.format(piece.point, newPoint, this.board.reverted), piece.constructor.name, piece.color === Color.WHITE ? 'white' : 'black'));\r\n    let destPiece = this.board.pieces.find(e => e.point.col === newPoint.col && e.point.row === newPoint.row);\r\n\r\n    if (destPiece && piece.color != destPiece.color) {\r\n      this.board.pieces = this.board.pieces.filter(e => e !== destPiece);\r\n    } else if (destPiece && piece.color === destPiece.color) {\r\n      return;\r\n    }\r\n    if (piece instanceof King) {\r\n      let squaresMoved = Math.abs(newPoint.col - piece.point.col);\r\n      if (squaresMoved > 1) {\r\n        if (newPoint.col < 3) {\r\n          let leftRook = this.board.getPieceByField(piece.point.row, 0);\r\n          leftRook.point.col = 3;\r\n        } else {\r\n          let rightRook = this.board.getPieceByField(piece.point.row, 7);\r\n          rightRook.point.col = 5;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (piece instanceof Pawn) {\r\n      this.checkIfPawnTakesEnPassant(newPoint);\r\n      this.checkIfPawnEnpassanted(piece, newPoint);\r\n    }\r\n\r\n    piece.point = newPoint;\r\n    this.increaseFullMoveCount();\r\n    this.board.currentWhitePlayer = !this.board.currentWhitePlayer;\r\n    return this.checkForPawnPromote(piece);\r\n  }\r\n\r\n  checkIfPawnFirstMove(piece: Piece) {\r\n    if (piece instanceof Pawn) {\r\n      (piece as Pawn).isMovedAlready = true;\r\n    }\r\n  }\r\n\r\n  private checkIfRookMoved(piece: Piece) {\r\n    if (piece instanceof Rook) {\r\n      piece.isMovedAlready = true;\r\n    }\r\n  }\r\n\r\n  private checkIfKingMoved(piece: Piece) {\r\n    if (piece instanceof King) {\r\n      piece.isMovedAlready = true;\r\n    }\r\n  }\r\n\r\n  async checkForPawnPromote(piece: Piece) {\r\n    if (!(piece instanceof Pawn)) {\r\n      return;\r\n    }\r\n\r\n    if (piece.point.row === 0 || piece.point.row === 7) {\r\n      this.board.pieces = this.board.pieces.filter(e => e !== piece);\r\n      this.openPromoteDialog(piece);\r\n    }\r\n  }\r\n\r\n  async openPromoteDialog(piece: Piece) {\r\n    this.modal.open((index) => {\r\n      let isWhite = piece.color === Color.WHITE;\r\n      switch (index) {\r\n        case 1:\r\n          this.board.pieces.push(new Queen(piece.point, piece.color, isWhite ? UnicodeConstants.WHITE_QUEEN : UnicodeConstants.BLACK_QUEEN, this.board));\r\n          break;\r\n        case 2:\r\n          this.board.pieces.push(new Rook(piece.point, piece.color, isWhite ? UnicodeConstants.WHITE_ROOK : UnicodeConstants.BLACK_ROOK, this.board));\r\n          break;\r\n        case 3:\r\n          this.board.pieces.push(new Bishop(piece.point, piece.color, isWhite ? UnicodeConstants.WHITE_BISHOP : UnicodeConstants.BLACK_BISHOP, this.board));\r\n          break;\r\n        case 4:\r\n          this.board.pieces.push(new Knight(piece.point, piece.color, isWhite ? UnicodeConstants.WHITE_KNIGHT : UnicodeConstants.BLACK_KNIGHT, this.board));\r\n          break;\r\n        default:\r\n          this.board.pieces.push(new Queen(piece.point, piece.color, isWhite ? UnicodeConstants.WHITE_QUEEN : UnicodeConstants.BLACK_QUEEN, this.board));\r\n          break;\r\n      }\r\n      this.afterMoveActions();\r\n    });\r\n  }\r\n\r\n  private checkForPossibleMoves(color: Color, text: string) {\r\n    if (!this.board.pieces.filter(e => e.color === color)\r\n      .some(e => e.getPossibleMoves().some(f => !MoveUtils.willMoveCauseCheck(color, e.point.row, e.point.col, f.row, f.col, this.board))\r\n        || e.getPossibleCaptures().some(f => !MoveUtils.willMoveCauseCheck(color, e.point.row, e.point.col, f.row, f.col, this.board)))) {\r\n      alert(text);\r\n    }\r\n  }\r\n\r\n  private checkForPat(color: Color) {\r\n    if (color === Color.WHITE && !this.board.whiteKingChecked) {\r\n      this.checkForPossibleMoves(color, 'Stalemate!');\r\n    } else if (color === Color.BLACK && !this.board.blackKingChecked) {\r\n      this.checkForPossibleMoves(color, 'Stalemate!');\r\n    }\r\n  }\r\n\r\n  private checkIfPawnEnpassanted(piece: Pawn, newPoint: Point) {\r\n    if (Math.abs(piece.point.row - newPoint.row) > 1) {\r\n      this.board.enPassantPiece = piece;\r\n      this.board.enPassantPoint = new Point((piece.point.row + newPoint.row) / 2, piece.point.col);\r\n    } else {\r\n      this.board.enPassantPoint = null;\r\n      this.board.enPassantPiece = null;\r\n    }\r\n  }\r\n\r\n  private checkIfPawnTakesEnPassant(newPoint: Point) {\r\n    if (newPoint.isEqual(this.board.enPassantPoint)) {\r\n      this.board.pieces = this.board.pieces\r\n        .filter(piece => piece !== this.board.enPassantPiece);\r\n      this.board.enPassantPoint = null;\r\n      this.board.enPassantPiece = null;\r\n    }\r\n  }\r\n\r\n  reset() {\r\n    this.boardStateProvider.clear();\r\n    this.moveHistoryProvider.clear();\r\n    this.boardLoader.addPieces();\r\n    this.board.reset();\r\n    this.coords.reset();\r\n    this.drawProvider.clear();\r\n  }\r\n\r\n  reverse() {\r\n    this.selected = false;\r\n    this.board.reverse();\r\n    this.coords.reverse();\r\n  }\r\n\r\n  private saveClone() {\r\n    let clone = this.board.clone();\r\n\r\n    if (this.board.reverted) {\r\n      clone.reverse();\r\n    }\r\n    this.boardStateProvider.addMove(new BoardState(clone));\r\n  }\r\n\r\n  undo() {\r\n    if (!this.boardStateProvider.isEmpty()) {\r\n      let lastBoard = this.boardStateProvider.pop().board;\r\n      if (this.board.reverted) {\r\n        lastBoard.reverse();\r\n      }\r\n      this.board = lastBoard;\r\n      this.boardLoader.setBoard(this.board);\r\n      this.board.possibleCaptures = [];\r\n      this.board.possibleMoves = [];\r\n      this.moveHistoryProvider.pop();\r\n    }\r\n  }\r\n\r\n  getMoveHistory() {\r\n    return JSON.stringify(this.moveHistoryProvider.getAll());\r\n  }\r\n\r\n  private calculatePieceSize() {\r\n    this.pieceSize = this._size / 10;\r\n  }\r\n\r\n  setFEN(fen: string) {\r\n    try {\r\n      this.boardLoader.loadFEN(fen);\r\n    } catch (e) {\r\n      this.boardLoader.addPieces();\r\n    }\r\n  }\r\n\r\n  getFEN() {\r\n    return this.board.fen;\r\n  }\r\n\r\n  private increaseFullMoveCount() {\r\n    if (!this.board.currentWhitePlayer) {\r\n      ++this.board.fullMoveCount;\r\n    }\r\n  }\r\n\r\n  dragEnded(event: CdkDragEnd) {\r\n    event.source.reset();\r\n    event.source.element.nativeElement.style.zIndex = '0';\r\n    event.source.element.nativeElement.style.pointerEvents = 'auto';\r\n    event.source.element.nativeElement.style.touchAction = 'auto';\r\n  }\r\n\r\n  dragStart(event: CdkDragStart) {\r\n    let style = event.source.element.nativeElement.style;\r\n    style.position = 'relative';\r\n    style.zIndex = '1000';\r\n    style.touchAction = 'none';\r\n    style.pointerEvents = 'none';\r\n  }\r\n\r\n  private async handleClickEvent(pointClicked: Point) {\r\n    if (this.board.isPointInPossibleMoves(pointClicked) || this.board.isPointInPossibleCaptures(pointClicked)) {\r\n      this.saveClone();\r\n      this.board.lastMoveSrc = new Point(this.board.activePiece.point.row, this.board.activePiece.point.col);\r\n      this.board.lastMoveDest = pointClicked;\r\n      await this.movePiece(this.board.activePiece, pointClicked);\r\n      this.afterMoveActions();\r\n      this.onMove.emit();\r\n    }\r\n\r\n    this.disableSelection();\r\n    let pieceClicked = this.getPieceByPoint(pointClicked.row, pointClicked.col);\r\n    if (pieceClicked) {\r\n\r\n      if ((this.board.currentWhitePlayer && pieceClicked.color === Color.BLACK) || (!this.board.currentWhitePlayer && pieceClicked.color === Color.WHITE)) {\r\n        return;\r\n      }\r\n\r\n      this.prepareActivePiece(pieceClicked, pointClicked);\r\n    }\r\n  }\r\n\r\n  onMouseDown(event: any) {\r\n\r\n    if (event.which !== 1) {\r\n      this.drawPoint = this.getDrawingPoint(event.x, event.y);\r\n      return;\r\n    }\r\n    let pointClicked = this.getClickPoint(event);\r\n\r\n    this.drawProvider.clear();\r\n\r\n    if (this.board.activePiece && pointClicked.isEqual(this.board.activePiece.point)) {\r\n      this.disabling = true;\r\n      return;\r\n    }\r\n\r\n    if (this.selected) {\r\n      this.handleClickEvent(pointClicked);\r\n      //   this.possibleMoves = activePiece.getPossibleMoves();\r\n    } else {\r\n      let pieceClicked = this.getPieceByPoint(pointClicked.row, pointClicked.col);\r\n      if (pieceClicked) {\r\n\r\n        if ((this.board.currentWhitePlayer && pieceClicked.color === Color.BLACK) || (!this.board.currentWhitePlayer && pieceClicked.color === Color.WHITE)) {\r\n          return;\r\n        }\r\n\r\n        this.prepareActivePiece(pieceClicked, pointClicked);\r\n      }\r\n    }\r\n  }\r\n\r\n  getDrawingPoint(x: number, y: number) {\r\n    let squareSize = this._size / 8;\r\n    let xx = Math.floor((x - this.boardRef.nativeElement.getBoundingClientRect().left) / squareSize);\r\n    let yy = Math.floor((y - this.boardRef.nativeElement.getBoundingClientRect().top) / squareSize);\r\n    return new DrawPoint(\r\n      Math.floor(xx * squareSize + squareSize / 2),\r\n      Math.floor(yy * squareSize + squareSize / 2),\r\n    );\r\n  }\r\n\r\n  private addDrawPoint(x: any, y: any) {\r\n    let upPoint = this.getDrawingPoint(x, y);\r\n    if (this.drawPoint.isEqual(upPoint)) {\r\n      let circle = new Circle();\r\n      circle.drawPoint = upPoint;\r\n      if (!this.drawProvider.containsCircle(circle)) {\r\n        this.drawProvider.addCircle(circle);\r\n      }\r\n    } else {\r\n      let arrow = new Arrow();\r\n      arrow.start = this.drawPoint;\r\n      arrow.end = upPoint;\r\n\r\n      if (!this.drawProvider.containsArrow(arrow)) {\r\n        this.drawProvider.addArrow(arrow);\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n","import {ModuleWithProviders, NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgxChessBoardComponent} from './ngx-chess-board.component';\r\nimport {NgxChessBoardService} from './service/ngx-chess-board.service';\r\nimport { DragDropModule } from '@angular/cdk/drag-drop';\r\nimport {PiecePromotionModalComponent} from './piece-promotion-modal/piece-promotion-modal.component';\r\n\r\n@NgModule({\r\n  declarations: [NgxChessBoardComponent, PiecePromotionModalComponent],\r\n  imports: [\r\n    CommonModule,\r\n    DragDropModule,\r\n  ],\r\n  exports: [NgxChessBoardComponent]\r\n})\r\nexport class NgxChessBoardModule {\r\n\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: NgxChessBoardModule,\r\n      providers: [NgxChessBoardService]\r\n    };\r\n  }\r\n\r\n}\r\n"]}