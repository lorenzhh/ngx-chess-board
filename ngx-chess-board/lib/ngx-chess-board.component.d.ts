import { ElementRef, EventEmitter, OnInit } from '@angular/core';
import { Piece } from './models/pieces/piece';
import { Point } from './models/pieces/point';
import { Board } from './models/board';
import { NgxChessBoardService } from './service/ngx-chess-board.service';
import { NgxChessBoardView } from './ngx-chess-board-view';
import { BoardStateProvider } from './board-state-provider/board-state-provider';
import { HistoryMoveProvider } from './history-move-provider/history-move-provider';
import { CoordsProvider } from './coords/coords-provider';
import { BoardLoader } from './board-state-provider/board-loader';
import { CdkDragEnd, CdkDragStart } from '@angular/cdk/drag-drop';
import { PiecePromotionModalComponent } from './piece-promotion-modal/piece-promotion-modal.component';
import { DrawPoint } from './drawing-tools/draw-point';
import { DrawProvider } from './drawing-tools/draw-provider';
export declare class NgxChessBoardComponent implements OnInit, NgxChessBoardView {
    private ngxChessBoardService;
    size: number;
    onRightClick(event: any): void;
    _size: number;
    darkTileColor: string;
    lightTileColor: string;
    showCoords: boolean;
    dragDisabled: boolean;
    drawDisabled: boolean;
    onMove: EventEmitter<any>;
    pieceSize: number;
    selected: boolean;
    boardRef: ElementRef;
    modal: PiecePromotionModalComponent;
    board: Board;
    boardStateProvider: BoardStateProvider;
    moveHistoryProvider: HistoryMoveProvider;
    boardLoader: BoardLoader;
    coords: CoordsProvider;
    disabling: boolean;
    drawProvider: DrawProvider;
    drawPoint: DrawPoint;
    constructor(ngxChessBoardService: NgxChessBoardService);
    ngOnInit(): void;
    onMouseUp(event: any): Promise<void>;
    afterMoveActions(): void;
    disableSelection(): void;
    prepareActivePiece(pieceClicked: Piece, pointClicked: Point): void;
    getPieceByPoint(row: number, col: number): Piece;
    isKingChecked(piece: Piece): boolean;
    getClickPoint(event: any): Point;
    movePiece(piece: Piece, newPoint: Point): Promise<void>;
    checkIfPawnFirstMove(piece: Piece): void;
    private checkIfRookMoved;
    private checkIfKingMoved;
    checkForPawnPromote(piece: Piece): Promise<void>;
    openPromoteDialog(piece: Piece): Promise<void>;
    private checkForPossibleMoves;
    private checkForPat;
    private checkIfPawnEnpassanted;
    private checkIfPawnTakesEnPassant;
    reset(): void;
    reverse(): void;
    private saveClone;
    undo(): void;
    getMoveHistory(): string;
    private calculatePieceSize;
    setFEN(fen: string): void;
    getFEN(): string;
    private increaseFullMoveCount;
    dragEnded(event: CdkDragEnd): void;
    dragStart(event: CdkDragStart): void;
    private handleClickEvent;
    onMouseDown(event: any): void;
    getDrawingPoint(x: number, y: number): DrawPoint;
    private addDrawPoint;
}
