/**
 * @fileoverview added by tsickle
 * Generated from: lib/board-state-provider/board-loader.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Pawn } from '../models/pieces/pawn';
import { Point } from '../models/pieces/point';
import { Color } from '../models/pieces/color';
import { UnicodeConstants } from '../utils/unicode-constants';
import { Rook } from '../models/pieces/rook';
import { Knight } from '../models/pieces/knight';
import { Bishop } from '../models/pieces/bishop';
import { Queen } from '../models/pieces/queen';
import { King } from '../models/pieces/king';
var BoardLoader = /** @class */ (function () {
    function BoardLoader(board) {
        this.board = board;
    }
    /**
     * @return {?}
     */
    BoardLoader.prototype.addPieces = /**
     * @return {?}
     */
    function () {
        this.board.pieces = [];
        // piony czarne
        for (var i = 0; i < 8; ++i) {
            this.board.pieces.push(new Pawn(new Point(1, i), Color.BLACK, UnicodeConstants.BLACK_PAWN, this.board));
        }
        this.board.pieces.push(new Rook(new Point(0, 0), Color.BLACK, UnicodeConstants.BLACK_ROOK, this.board));
        this.board.pieces.push(new Knight(new Point(0, 1), Color.BLACK, UnicodeConstants.BLACK_KNIGHT, this.board));
        this.board.pieces.push(new Bishop(new Point(0, 2), Color.BLACK, UnicodeConstants.BLACK_BISHOP, this.board));
        this.board.pieces.push(new Queen(new Point(0, 3), Color.BLACK, UnicodeConstants.BLACK_QUEEN, this.board));
        this.board.pieces.push(new King(new Point(0, 4), Color.BLACK, UnicodeConstants.BLACK_KING, this.board));
        this.board.pieces.push(new Bishop(new Point(0, 5), Color.BLACK, UnicodeConstants.BLACK_BISHOP, this.board));
        this.board.pieces.push(new Knight(new Point(0, 6), Color.BLACK, UnicodeConstants.BLACK_KNIGHT, this.board));
        this.board.pieces.push(new Rook(new Point(0, 7), Color.BLACK, UnicodeConstants.BLACK_ROOK, this.board));
        // piony biale
        for (var i = 0; i < 8; ++i) {
            this.board.pieces.push(new Pawn(new Point(6, i), Color.WHITE, UnicodeConstants.WHITE_PAWN, this.board));
        }
        this.board.pieces.push(new Rook(new Point(7, 0), Color.WHITE, UnicodeConstants.WHITE_ROOK, this.board));
        this.board.pieces.push(new Knight(new Point(7, 1), Color.WHITE, UnicodeConstants.WHITE_KNIGHT, this.board));
        this.board.pieces.push(new Bishop(new Point(7, 2), Color.WHITE, UnicodeConstants.WHITE_BISHOP, this.board));
        this.board.pieces.push(new Queen(new Point(7, 3), Color.WHITE, UnicodeConstants.WHITE_QUEEN, this.board));
        this.board.pieces.push(new King(new Point(7, 4), Color.WHITE, UnicodeConstants.WHITE_KING, this.board));
        this.board.pieces.push(new Bishop(new Point(7, 5), Color.WHITE, UnicodeConstants.WHITE_BISHOP, this.board));
        this.board.pieces.push(new Knight(new Point(7, 6), Color.WHITE, UnicodeConstants.WHITE_KNIGHT, this.board));
        this.board.pieces.push(new Rook(new Point(7, 7), Color.WHITE, UnicodeConstants.WHITE_ROOK, this.board));
        this.board.calculateFEN();
    };
    /**
     * @param {?} fen
     * @return {?}
     */
    BoardLoader.prototype.loadFEN = /**
     * @param {?} fen
     * @return {?}
     */
    function (fen) {
        if (fen) {
            this.board.reverted = false;
            this.board.pieces = [];
            /** @type {?} */
            var split = fen.split('/');
            for (var i = 0; i < 8; ++i) {
                /** @type {?} */
                var pointer = 0;
                for (var j = 0; j < 8; ++j) {
                    /** @type {?} */
                    var chunk = split[i].charAt(j);
                    if (chunk.match(/[0-9]/)) {
                        pointer += Number(chunk);
                    }
                    else {
                        switch (chunk) {
                            case 'r':
                                this.board.pieces.push(new Rook(new Point(i, pointer), Color.BLACK, UnicodeConstants.BLACK_ROOK, this.board));
                                break;
                            case 'n':
                                this.board.pieces.push(new Knight(new Point(i, pointer), Color.BLACK, UnicodeConstants.BLACK_KNIGHT, this.board));
                                break;
                            case 'b':
                                this.board.pieces.push(new Bishop(new Point(i, pointer), Color.BLACK, UnicodeConstants.BLACK_BISHOP, this.board));
                                break;
                            case 'q':
                                this.board.pieces.push(new Queen(new Point(i, pointer), Color.BLACK, UnicodeConstants.BLACK_QUEEN, this.board));
                                break;
                            case 'k':
                                this.board.pieces.push(new King(new Point(i, pointer), Color.BLACK, UnicodeConstants.BLACK_KING, this.board));
                                break;
                            case 'p': {
                                /** @type {?} */
                                var pawn = new Pawn(new Point(i, pointer), Color.BLACK, UnicodeConstants.BLACK_PAWN, this.board);
                                if ((pawn.color === Color.BLACK && pawn.point.row !== 1) || (pawn.color === Color.WHITE && pawn.point.row !== 6)) {
                                    pawn.isMovedAlready = true;
                                }
                                this.board.pieces.push(pawn);
                                break;
                            }
                            case 'R':
                                this.board.pieces.push(new Rook(new Point(i, pointer), Color.WHITE, UnicodeConstants.WHITE_ROOK, this.board));
                                break;
                            case 'N':
                                this.board.pieces.push(new Knight(new Point(i, pointer), Color.WHITE, UnicodeConstants.WHITE_KNIGHT, this.board));
                                break;
                            case 'B':
                                this.board.pieces.push(new Bishop(new Point(i, pointer), Color.WHITE, UnicodeConstants.WHITE_BISHOP, this.board));
                                break;
                            case 'Q':
                                this.board.pieces.push(new Queen(new Point(i, pointer), Color.WHITE, UnicodeConstants.WHITE_QUEEN, this.board));
                                break;
                            case 'K':
                                this.board.pieces.push(new King(new Point(i, pointer), Color.WHITE, UnicodeConstants.WHITE_KING, this.board));
                                break;
                            case 'P': {
                                /** @type {?} */
                                var pawn = new Pawn(new Point(i, pointer), Color.WHITE, UnicodeConstants.WHITE_PAWN, this.board);
                                if ((pawn.color === Color.BLACK && pawn.point.row !== 1) || (pawn.color === Color.WHITE && pawn.point.row !== 6)) {
                                    pawn.isMovedAlready = true;
                                }
                                this.board.pieces.push(pawn);
                                break;
                            }
                        }
                        ++pointer;
                    }
                }
            }
            this.setCurrentPlayer(fen);
            this.setCastles(fen);
            this.setEnPassant(fen);
            this.setFullMoveCount(fen);
        }
        else {
            throw Error('Incorrect FEN provided');
        }
    };
    /**
     * @private
     * @param {?} fen
     * @return {?}
     */
    BoardLoader.prototype.setCurrentPlayer = /**
     * @private
     * @param {?} fen
     * @return {?}
     */
    function (fen) {
        if (fen) {
            /** @type {?} */
            var split = fen.split(' ');
            this.board.currentWhitePlayer = split[1] === 'w';
        }
    };
    /**
     * @param {?} board
     * @return {?}
     */
    BoardLoader.prototype.setBoard = /**
     * @param {?} board
     * @return {?}
     */
    function (board) {
        this.board = board;
    };
    /**
     * @private
     * @param {?} fen
     * @return {?}
     */
    BoardLoader.prototype.setCastles = /**
     * @private
     * @param {?} fen
     * @return {?}
     */
    function (fen) {
        if (fen) {
            /** @type {?} */
            var split = fen.split(' ');
            /** @type {?} */
            var castleChunk = split[2];
            if (!castleChunk.includes('K')) {
                this.setRookAlreadyMoved(Color.WHITE, 7);
            }
            if (!castleChunk.includes('Q')) {
                this.setRookAlreadyMoved(Color.WHITE, 0);
            }
            if (!castleChunk.includes('k')) {
                this.setRookAlreadyMoved(Color.BLACK, 7);
            }
            if (!castleChunk.includes('q')) {
                this.setRookAlreadyMoved(Color.BLACK, 0);
            }
        }
    };
    /**
     * @private
     * @param {?} fen
     * @return {?}
     */
    BoardLoader.prototype.setFullMoveCount = /**
     * @private
     * @param {?} fen
     * @return {?}
     */
    function (fen) {
    };
    /**
     * @private
     * @param {?} fen
     * @return {?}
     */
    BoardLoader.prototype.setEnPassant = /**
     * @private
     * @param {?} fen
     * @return {?}
     */
    function (fen) {
        if (fen) {
            /** @type {?} */
            var split = fen.split(' ');
            /** @type {?} */
            var enPassantPoint = split[3];
            if (enPassantPoint === '-') {
                return;
            }
            // if()
        }
    };
    /**
     * @private
     * @param {?} color
     * @param {?} col
     * @return {?}
     */
    BoardLoader.prototype.setRookAlreadyMoved = /**
     * @private
     * @param {?} color
     * @param {?} col
     * @return {?}
     */
    function (color, col) {
        /** @type {?} */
        var rook = (/** @type {?} */ (this.board.pieces.find((/**
         * @param {?} e
         * @return {?}
         */
        function (e) { return e.color === color && e instanceof Rook && e.point.col === col; }))));
        rook.isMovedAlready = true;
    };
    return BoardLoader;
}());
export { BoardLoader };
if (false) {
    /**
     * @type {?}
     * @private
     */
    BoardLoader.prototype.board;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm9hcmQtbG9hZGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWNoZXNzLWJvYXJkLyIsInNvdXJjZXMiOlsibGliL2JvYXJkLXN0YXRlLXByb3ZpZGVyL2JvYXJkLWxvYWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBQyxJQUFJLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUMzQyxPQUFPLEVBQUMsS0FBSyxFQUFDLE1BQU0sd0JBQXdCLENBQUM7QUFDN0MsT0FBTyxFQUFDLEtBQUssRUFBQyxNQUFNLHdCQUF3QixDQUFDO0FBQzdDLE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLDRCQUE0QixDQUFDO0FBQzVELE9BQU8sRUFBQyxJQUFJLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUMzQyxPQUFPLEVBQUMsTUFBTSxFQUFDLE1BQU0seUJBQXlCLENBQUM7QUFDL0MsT0FBTyxFQUFDLE1BQU0sRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBQy9DLE9BQU8sRUFBQyxLQUFLLEVBQUMsTUFBTSx3QkFBd0IsQ0FBQztBQUM3QyxPQUFPLEVBQUMsSUFBSSxFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFHM0M7SUFJRSxxQkFBWSxLQUFZO1FBQ3RCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0lBQ3JCLENBQUM7Ozs7SUFFRCwrQkFBUzs7O0lBQVQ7UUFDRSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUM7UUFDdkIsZUFBZTtRQUNmLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUU7WUFDMUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsS0FBSyxFQUFFLGdCQUFnQixDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztTQUN6RztRQUNELElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLEtBQUssRUFBRSxnQkFBZ0IsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDeEcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksTUFBTSxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsS0FBSyxFQUFFLGdCQUFnQixDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUM1RyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxNQUFNLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxLQUFLLEVBQUUsZ0JBQWdCLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQzVHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLEtBQUssRUFBRSxnQkFBZ0IsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDMUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsS0FBSyxFQUFFLGdCQUFnQixDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUN4RyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxNQUFNLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxLQUFLLEVBQUUsZ0JBQWdCLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQzVHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLE1BQU0sQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLEtBQUssRUFBRSxnQkFBZ0IsQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDNUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsS0FBSyxFQUFFLGdCQUFnQixDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUd4RyxjQUFjO1FBQ2QsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRTtZQUMxQixJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxLQUFLLEVBQUUsZ0JBQWdCLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1NBQ3pHO1FBQ0QsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsS0FBSyxFQUFFLGdCQUFnQixDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUN4RyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxNQUFNLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxLQUFLLEVBQUUsZ0JBQWdCLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQzVHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLE1BQU0sQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLEtBQUssRUFBRSxnQkFBZ0IsQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDNUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsS0FBSyxFQUFFLGdCQUFnQixDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUMxRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxLQUFLLEVBQUUsZ0JBQWdCLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ3hHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLE1BQU0sQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLEtBQUssRUFBRSxnQkFBZ0IsQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDNUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksTUFBTSxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsS0FBSyxFQUFFLGdCQUFnQixDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUM1RyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxLQUFLLEVBQUUsZ0JBQWdCLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBRXhHLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDNUIsQ0FBQzs7Ozs7SUFFRCw2QkFBTzs7OztJQUFQLFVBQVEsR0FBVztRQUNqQixJQUFJLEdBQUcsRUFBRTtZQUNQLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztZQUM1QixJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUM7O2dCQUNuQixLQUFLLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7WUFDMUIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRTs7b0JBQ3RCLE9BQU8sR0FBRyxDQUFDO2dCQUNmLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUU7O3dCQUN0QixLQUFLLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7b0JBQzlCLElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsRUFBRTt3QkFDeEIsT0FBTyxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztxQkFDMUI7eUJBQU07d0JBQ0wsUUFBUSxLQUFLLEVBQUU7NEJBQ2IsS0FBSyxHQUFHO2dDQUNOLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLEVBQUUsS0FBSyxDQUFDLEtBQUssRUFBRSxnQkFBZ0IsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7Z0NBQzlHLE1BQU07NEJBQ1IsS0FBSyxHQUFHO2dDQUNOLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLE1BQU0sQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLEVBQUUsS0FBSyxDQUFDLEtBQUssRUFBRSxnQkFBZ0IsQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7Z0NBRWxILE1BQU07NEJBQ1IsS0FBSyxHQUFHO2dDQUNOLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLE1BQU0sQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLEVBQUUsS0FBSyxDQUFDLEtBQUssRUFBRSxnQkFBZ0IsQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7Z0NBQ2xILE1BQU07NEJBQ1IsS0FBSyxHQUFHO2dDQUNOLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLEVBQUUsS0FBSyxDQUFDLEtBQUssRUFBRSxnQkFBZ0IsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7Z0NBQ2hILE1BQU07NEJBQ1IsS0FBSyxHQUFHO2dDQUNOLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLEVBQUUsS0FBSyxDQUFDLEtBQUssRUFBRSxnQkFBZ0IsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7Z0NBQzlHLE1BQU07NEJBQ1IsS0FBSyxHQUFHLENBQUMsQ0FBQzs7b0NBQ0osSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsRUFBRSxPQUFPLENBQUMsRUFBRSxLQUFLLENBQUMsS0FBSyxFQUFFLGdCQUFnQixDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDO2dDQUNoRyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssS0FBSyxLQUFLLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssS0FBSyxLQUFLLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxFQUFFO29DQUNoSCxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQztpQ0FDNUI7Z0NBQ0QsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2dDQUM3QixNQUFNOzZCQUNQOzRCQUNELEtBQUssR0FBRztnQ0FDTixJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxFQUFFLEtBQUssQ0FBQyxLQUFLLEVBQUUsZ0JBQWdCLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO2dDQUU5RyxNQUFNOzRCQUNSLEtBQUssR0FBRztnQ0FDTixJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxNQUFNLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxFQUFFLEtBQUssQ0FBQyxLQUFLLEVBQUUsZ0JBQWdCLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO2dDQUNsSCxNQUFNOzRCQUVSLEtBQUssR0FBRztnQ0FDTixJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxNQUFNLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxFQUFFLEtBQUssQ0FBQyxLQUFLLEVBQUUsZ0JBQWdCLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO2dDQUNsSCxNQUFNOzRCQUVSLEtBQUssR0FBRztnQ0FDTixJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxFQUFFLEtBQUssQ0FBQyxLQUFLLEVBQUUsZ0JBQWdCLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO2dDQUNoSCxNQUFNOzRCQUVSLEtBQUssR0FBRztnQ0FDTixJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxFQUFFLEtBQUssQ0FBQyxLQUFLLEVBQUUsZ0JBQWdCLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO2dDQUM5RyxNQUFNOzRCQUVSLEtBQUssR0FBRyxDQUFDLENBQUM7O29DQUNKLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLEVBQUUsS0FBSyxDQUFDLEtBQUssRUFBRSxnQkFBZ0IsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLEtB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SUFBM0IsVUFBNEIsS0FBWSxFQUFFLEdBQVc7O1lBQy9DLElBQUksR0FBRyxtQkFBTyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJOzs7O1FBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLENBQUMsS0FBSyxLQUFLLEtBQUssSUFBSSxDQUFDLFlBQVksSUFBSSxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxLQUFLLEdBQUcsRUFBN0QsQ0FBNkQsRUFBQyxFQUFBO1FBQzVHLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDO0lBQzdCLENBQUM7SUFDSCxrQkFBQztBQUFELENBQUMsQUFoTEQsSUFnTEM7Ozs7Ozs7SUEvS0MsNEJBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtQYXdufSBmcm9tICcuLi9tb2RlbHMvcGllY2VzL3Bhd24nO1xyXG5pbXBvcnQge1BvaW50fSBmcm9tICcuLi9tb2RlbHMvcGllY2VzL3BvaW50JztcclxuaW1wb3J0IHtDb2xvcn0gZnJvbSAnLi4vbW9kZWxzL3BpZWNlcy9jb2xvcic7XHJcbmltcG9ydCB7VW5pY29kZUNvbnN0YW50c30gZnJvbSAnLi4vdXRpbHMvdW5pY29kZS1jb25zdGFudHMnO1xyXG5pbXBvcnQge1Jvb2t9IGZyb20gJy4uL21vZGVscy9waWVjZXMvcm9vayc7XHJcbmltcG9ydCB7S25pZ2h0fSBmcm9tICcuLi9tb2RlbHMvcGllY2VzL2tuaWdodCc7XHJcbmltcG9ydCB7QmlzaG9wfSBmcm9tICcuLi9tb2RlbHMvcGllY2VzL2Jpc2hvcCc7XHJcbmltcG9ydCB7UXVlZW59IGZyb20gJy4uL21vZGVscy9waWVjZXMvcXVlZW4nO1xyXG5pbXBvcnQge0tpbmd9IGZyb20gJy4uL21vZGVscy9waWVjZXMva2luZyc7XHJcbmltcG9ydCB7Qm9hcmR9IGZyb20gJy4uL21vZGVscy9ib2FyZCc7XHJcblxyXG5leHBvcnQgY2xhc3MgQm9hcmRMb2FkZXIge1xyXG4gIHByaXZhdGUgYm9hcmQ6IEJvYXJkO1xyXG5cclxuXHJcbiAgY29uc3RydWN0b3IoYm9hcmQ6IEJvYXJkKSB7XHJcbiAgICB0aGlzLmJvYXJkID0gYm9hcmQ7XHJcbiAgfVxyXG5cclxuICBhZGRQaWVjZXMoKSB7XHJcbiAgICB0aGlzLmJvYXJkLnBpZWNlcyA9IFtdO1xyXG4gICAgLy8gcGlvbnkgY3phcm5lXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDg7ICsraSkge1xyXG4gICAgICB0aGlzLmJvYXJkLnBpZWNlcy5wdXNoKG5ldyBQYXduKG5ldyBQb2ludCgxLCBpKSwgQ29sb3IuQkxBQ0ssIFVuaWNvZGVDb25zdGFudHMuQkxBQ0tfUEFXTiwgdGhpcy5ib2FyZCkpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5ib2FyZC5waWVjZXMucHVzaChuZXcgUm9vayhuZXcgUG9pbnQoMCwgMCksIENvbG9yLkJMQUNLLCBVbmljb2RlQ29uc3RhbnRzLkJMQUNLX1JPT0ssIHRoaXMuYm9hcmQpKTtcclxuICAgIHRoaXMuYm9hcmQucGllY2VzLnB1c2gobmV3IEtuaWdodChuZXcgUG9pbnQoMCwgMSksIENvbG9yLkJMQUNLLCBVbmljb2RlQ29uc3RhbnRzLkJMQUNLX0tOSUdIVCwgdGhpcy5ib2FyZCkpO1xyXG4gICAgdGhpcy5ib2FyZC5waWVjZXMucHVzaChuZXcgQmlzaG9wKG5ldyBQb2ludCgwLCAyKSwgQ29sb3IuQkxBQ0ssIFVuaWNvZGVDb25zdGFudHMuQkxBQ0tfQklTSE9QLCB0aGlzLmJvYXJkKSk7XHJcbiAgICB0aGlzLmJvYXJkLnBpZWNlcy5wdXNoKG5ldyBRdWVlbihuZXcgUG9pbnQoMCwgMyksIENvbG9yLkJMQUNLLCBVbmljb2RlQ29uc3RhbnRzLkJMQUNLX1FVRUVOLCB0aGlzLmJvYXJkKSk7XHJcbiAgICB0aGlzLmJvYXJkLnBpZWNlcy5wdXNoKG5ldyBLaW5nKG5ldyBQb2ludCgwLCA0KSwgQ29sb3IuQkxBQ0ssIFVuaWNvZGVDb25zdGFudHMuQkxBQ0tfS0lORywgdGhpcy5ib2FyZCkpO1xyXG4gICAgdGhpcy5ib2FyZC5waWVjZXMucHVzaChuZXcgQmlzaG9wKG5ldyBQb2ludCgwLCA1KSwgQ29sb3IuQkxBQ0ssIFVuaWNvZGVDb25zdGFudHMuQkxBQ0tfQklTSE9QLCB0aGlzLmJvYXJkKSk7XHJcbiAgICB0aGlzLmJvYXJkLnBpZWNlcy5wdXNoKG5ldyBLbmlnaHQobmV3IFBvaW50KDAsIDYpLCBDb2xvci5CTEFDSywgVW5pY29kZUNvbnN0YW50cy5CTEFDS19LTklHSFQsIHRoaXMuYm9hcmQpKTtcclxuICAgIHRoaXMuYm9hcmQucGllY2VzLnB1c2gobmV3IFJvb2sobmV3IFBvaW50KDAsIDcpLCBDb2xvci5CTEFDSywgVW5pY29kZUNvbnN0YW50cy5CTEFDS19ST09LLCB0aGlzLmJvYXJkKSk7XHJcblxyXG5cclxuICAgIC8vIHBpb255IGJpYWxlXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDg7ICsraSkge1xyXG4gICAgICB0aGlzLmJvYXJkLnBpZWNlcy5wdXNoKG5ldyBQYXduKG5ldyBQb2ludCg2LCBpKSwgQ29sb3IuV0hJVEUsIFVuaWNvZGVDb25zdGFudHMuV0hJVEVfUEFXTiwgdGhpcy5ib2FyZCkpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5ib2FyZC5waWVjZXMucHVzaChuZXcgUm9vayhuZXcgUG9pbnQoNywgMCksIENvbG9yLldISVRFLCBVbmljb2RlQ29uc3RhbnRzLldISVRFX1JPT0ssIHRoaXMuYm9hcmQpKTtcclxuICAgIHRoaXMuYm9hcmQucGllY2VzLnB1c2gobmV3IEtuaWdodChuZXcgUG9pbnQoNywgMSksIENvbG9yLldISVRFLCBVbmljb2RlQ29uc3RhbnRzLldISVRFX0tOSUdIVCwgdGhpcy5ib2FyZCkpO1xyXG4gICAgdGhpcy5ib2FyZC5waWVjZXMucHVzaChuZXcgQmlzaG9wKG5ldyBQb2ludCg3LCAyKSwgQ29sb3IuV0hJVEUsIFVuaWNvZGVDb25zdGFudHMuV0hJVEVfQklTSE9QLCB0aGlzLmJvYXJkKSk7XHJcbiAgICB0aGlzLmJvYXJkLnBpZWNlcy5wdXNoKG5ldyBRdWVlbihuZXcgUG9pbnQoNywgMyksIENvbG9yLldISVRFLCBVbmljb2RlQ29uc3RhbnRzLldISVRFX1FVRUVOLCB0aGlzLmJvYXJkKSk7XHJcbiAgICB0aGlzLmJvYXJkLnBpZWNlcy5wdXNoKG5ldyBLaW5nKG5ldyBQb2ludCg3LCA0KSwgQ29sb3IuV0hJVEUsIFVuaWNvZGVDb25zdGFudHMuV0hJVEVfS0lORywgdGhpcy5ib2FyZCkpO1xyXG4gICAgdGhpcy5ib2FyZC5waWVjZXMucHVzaChuZXcgQmlzaG9wKG5ldyBQb2ludCg3LCA1KSwgQ29sb3IuV0hJVEUsIFVuaWNvZGVDb25zdGFudHMuV0hJVEVfQklTSE9QLCB0aGlzLmJvYXJkKSk7XHJcbiAgICB0aGlzLmJvYXJkLnBpZWNlcy5wdXNoKG5ldyBLbmlnaHQobmV3IFBvaW50KDcsIDYpLCBDb2xvci5XSElURSwgVW5pY29kZUNvbnN0YW50cy5XSElURV9LTklHSFQsIHRoaXMuYm9hcmQpKTtcclxuICAgIHRoaXMuYm9hcmQucGllY2VzLnB1c2gobmV3IFJvb2sobmV3IFBvaW50KDcsIDcpLCBDb2xvci5XSElURSwgVW5pY29kZUNvbnN0YW50cy5XSElURV9ST09LLCB0aGlzLmJvYXJkKSk7XHJcblxyXG4gICAgdGhpcy5ib2FyZC5jYWxjdWxhdGVGRU4oKTtcclxuICB9XHJcblxyXG4gIGxvYWRGRU4oZmVuOiBzdHJpbmcpIHtcclxuICAgIGlmIChmZW4pIHtcclxuICAgICAgdGhpcy5ib2FyZC5yZXZlcnRlZCA9IGZhbHNlO1xyXG4gICAgICB0aGlzLmJvYXJkLnBpZWNlcyA9IFtdO1xyXG4gICAgICBsZXQgc3BsaXQgPSBmZW4uc3BsaXQoJy8nKTtcclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA4OyArK2kpIHtcclxuICAgICAgICBsZXQgcG9pbnRlciA9IDA7XHJcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCA4OyArK2opIHtcclxuICAgICAgICAgIGxldCBjaHVuayA9IHNwbGl0W2ldLmNoYXJBdChqKTtcclxuICAgICAgICAgIGlmIChjaHVuay5tYXRjaCgvWzAtOV0vKSkge1xyXG4gICAgICAgICAgICBwb2ludGVyICs9IE51bWJlcihjaHVuayk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKGNodW5rKSB7XHJcbiAgICAgICAgICAgICAgY2FzZSAncic6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJvYXJkLnBpZWNlcy5wdXNoKG5ldyBSb29rKG5ldyBQb2ludChpLCBwb2ludGVyKSwgQ29sb3IuQkxBQ0ssIFVuaWNvZGVDb25zdGFudHMuQkxBQ0tfUk9PSywgdGhpcy5ib2FyZCkpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgY2FzZSAnbic6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJvYXJkLnBpZWNlcy5wdXNoKG5ldyBLbmlnaHQobmV3IFBvaW50KGksIHBvaW50ZXIpLCBDb2xvci5CTEFDSywgVW5pY29kZUNvbnN0YW50cy5CTEFDS19LTklHSFQsIHRoaXMuYm9hcmQpKTtcclxuXHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICBjYXNlICdiJzpcclxuICAgICAgICAgICAgICAgIHRoaXMuYm9hcmQucGllY2VzLnB1c2gobmV3IEJpc2hvcChuZXcgUG9pbnQoaSwgcG9pbnRlciksIENvbG9yLkJMQUNLLCBVbmljb2RlQ29uc3RhbnRzLkJMQUNLX0JJU0hPUCwgdGhpcy5ib2FyZCkpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgY2FzZSAncSc6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJvYXJkLnBpZWNlcy5wdXNoKG5ldyBRdWVlbihuZXcgUG9pbnQoaSwgcG9pbnRlciksIENvbG9yLkJMQUNLLCBVbmljb2RlQ29uc3RhbnRzLkJMQUNLX1FVRUVOLCB0aGlzLmJvYXJkKSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICBjYXNlICdrJzpcclxuICAgICAgICAgICAgICAgIHRoaXMuYm9hcmQucGllY2VzLnB1c2gobmV3IEtpbmcobmV3IFBvaW50KGksIHBvaW50ZXIpLCBDb2xvci5CTEFDSywgVW5pY29kZUNvbnN0YW50cy5CTEFDS19LSU5HLCB0aGlzLmJvYXJkKSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICBjYXNlICdwJzoge1xyXG4gICAgICAgICAgICAgICAgbGV0IHBhd24gPSBuZXcgUGF3bihuZXcgUG9pbnQoaSwgcG9pbnRlciksIENvbG9yLkJMQUNLLCBVbmljb2RlQ29uc3RhbnRzLkJMQUNLX1BBV04sIHRoaXMuYm9hcmQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKChwYXduLmNvbG9yID09PSBDb2xvci5CTEFDSyAmJiBwYXduLnBvaW50LnJvdyAhPT0gMSkgfHwgKHBhd24uY29sb3IgPT09IENvbG9yLldISVRFICYmIHBhd24ucG9pbnQucm93ICE9PSA2KSkge1xyXG4gICAgICAgICAgICAgICAgICBwYXduLmlzTW92ZWRBbHJlYWR5ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuYm9hcmQucGllY2VzLnB1c2gocGF3bik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgY2FzZSAnUic6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJvYXJkLnBpZWNlcy5wdXNoKG5ldyBSb29rKG5ldyBQb2ludChpLCBwb2ludGVyKSwgQ29sb3IuV0hJVEUsIFVuaWNvZGVDb25zdGFudHMuV0hJVEVfUk9PSywgdGhpcy5ib2FyZCkpO1xyXG5cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgIGNhc2UgJ04nOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5ib2FyZC5waWVjZXMucHVzaChuZXcgS25pZ2h0KG5ldyBQb2ludChpLCBwb2ludGVyKSwgQ29sb3IuV0hJVEUsIFVuaWNvZGVDb25zdGFudHMuV0hJVEVfS05JR0hULCB0aGlzLmJvYXJkKSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgY2FzZSAnQic6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJvYXJkLnBpZWNlcy5wdXNoKG5ldyBCaXNob3AobmV3IFBvaW50KGksIHBvaW50ZXIpLCBDb2xvci5XSElURSwgVW5pY29kZUNvbnN0YW50cy5XSElURV9CSVNIT1AsIHRoaXMuYm9hcmQpKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICBjYXNlICdRJzpcclxuICAgICAgICAgICAgICAgIHRoaXMuYm9hcmQucGllY2VzLnB1c2gobmV3IFF1ZWVuKG5ldyBQb2ludChpLCBwb2ludGVyKSwgQ29sb3IuV0hJVEUsIFVuaWNvZGVDb25zdGFudHMuV0hJVEVfUVVFRU4sIHRoaXMuYm9hcmQpKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICBjYXNlICdLJzpcclxuICAgICAgICAgICAgICAgIHRoaXMuYm9hcmQucGllY2VzLnB1c2gobmV3IEtpbmcobmV3IFBvaW50KGksIHBvaW50ZXIpLCBDb2xvci5XSElURSwgVW5pY29kZUNvbnN0YW50cy5XSElURV9LSU5HLCB0aGlzLmJvYXJkKSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgY2FzZSAnUCc6IHtcclxuICAgICAgICAgICAgICAgIGxldCBwYXduID0gbmV3IFBhd24obmV3IFBvaW50KGksIHBvaW50ZXIpLCBDb2xvci5XSElURSwgVW5pY29kZUNvbnN0YW50cy5XSElURV9QQVdOLCB0aGlzLmJvYXJkKTtcclxuICAgICAgICAgICAgICAgIGlmICgocGF3bi5jb2xvciA9PT0gQ29sb3IuQkxBQ0sgJiYgcGF3bi5wb2ludC5yb3cgIT09IDEpIHx8IChwYXduLmNvbG9yID09PSBDb2xvci5XSElURSAmJiBwYXduLnBvaW50LnJvdyAhPT0gNikpIHtcclxuICAgICAgICAgICAgICAgICAgcGF3bi5pc01vdmVkQWxyZWFkeSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJvYXJkLnBpZWNlcy5wdXNoKHBhd24pO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICsrcG9pbnRlcjtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMuc2V0Q3VycmVudFBsYXllcihmZW4pO1xyXG4gICAgICB0aGlzLnNldENhc3RsZXMoZmVuKTtcclxuICAgICAgdGhpcy5zZXRFblBhc3NhbnQoZmVuKTtcclxuICAgICAgdGhpcy5zZXRGdWxsTW92ZUNvdW50KGZlbik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aHJvdyBFcnJvcignSW5jb3JyZWN0IEZFTiBwcm92aWRlZCcpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcblxyXG4gIHByaXZhdGUgc2V0Q3VycmVudFBsYXllcihmZW46IHN0cmluZykge1xyXG4gICAgaWYgKGZlbikge1xyXG4gICAgICBsZXQgc3BsaXQgPSBmZW4uc3BsaXQoJyAnKTtcclxuICAgICAgdGhpcy5ib2FyZC5jdXJyZW50V2hpdGVQbGF5ZXIgPSBzcGxpdFsxXSA9PT0gJ3cnO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc2V0Qm9hcmQoYm9hcmQ6IEJvYXJkKSB7XHJcbiAgICB0aGlzLmJvYXJkID0gYm9hcmQ7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHNldENhc3RsZXMoZmVuOiBzdHJpbmcpIHtcclxuICAgIGlmIChmZW4pIHtcclxuICAgICAgbGV0IHNwbGl0ID0gZmVuLnNwbGl0KCcgJyk7XHJcbiAgICAgIGxldCBjYXN0bGVDaHVuayA9IHNwbGl0WzJdO1xyXG5cclxuICAgICAgaWYgKCFjYXN0bGVDaHVuay5pbmNsdWRlcygnSycpKSB7XHJcbiAgICAgICAgdGhpcy5zZXRSb29rQWxyZWFkeU1vdmVkKENvbG9yLldISVRFLCA3KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKCFjYXN0bGVDaHVuay5pbmNsdWRlcygnUScpKSB7XHJcbiAgICAgICAgdGhpcy5zZXRSb29rQWxyZWFkeU1vdmVkKENvbG9yLldISVRFLCAwKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKCFjYXN0bGVDaHVuay5pbmNsdWRlcygnaycpKSB7XHJcbiAgICAgICAgdGhpcy5zZXRSb29rQWxyZWFkeU1vdmVkKENvbG9yLkJMQUNLLCA3KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKCFjYXN0bGVDaHVuay5pbmNsdWRlcygncScpKSB7XHJcbiAgICAgICAgdGhpcy5zZXRSb29rQWxyZWFkeU1vdmVkKENvbG9yLkJMQUNLLCAwKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBzZXRGdWxsTW92ZUNvdW50KGZlbjogc3RyaW5nKSB7XHJcblxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBzZXRFblBhc3NhbnQoZmVuOiBzdHJpbmcpIHtcclxuICAgIGlmIChmZW4pIHtcclxuICAgICAgbGV0IHNwbGl0ID0gZmVuLnNwbGl0KCcgJyk7XHJcbiAgICAgIGxldCBlblBhc3NhbnRQb2ludCA9IHNwbGl0WzNdO1xyXG5cclxuICAgICAgaWYgKGVuUGFzc2FudFBvaW50ID09PSAnLScpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIGlmKClcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgc2V0Um9va0FscmVhZHlNb3ZlZChjb2xvcjogQ29sb3IsIGNvbDogbnVtYmVyKSB7XHJcbiAgICBsZXQgcm9vayA9IDxSb29rPiB0aGlzLmJvYXJkLnBpZWNlcy5maW5kKGUgPT4gZS5jb2xvciA9PT0gY29sb3IgJiYgZSBpbnN0YW5jZW9mIFJvb2sgJiYgZS5wb2ludC5jb2wgPT09IGNvbCk7XHJcbiAgICByb29rLmlzTW92ZWRBbHJlYWR5ID0gdHJ1ZTtcclxuICB9XHJcbn1cclxuIl19